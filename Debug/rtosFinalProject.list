
rtosSmartPark.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d8c8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ad8  0800da68  0800da68  0000ea68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e540  0800e540  00010150  2**0
                  CONTENTS
  4 .ARM          00000008  0800e540  0800e540  0000f540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e548  0800e548  00010150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e548  0800e548  0000f548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e54c  0800e54c  0000f54c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000150  20000000  0800e550  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006ab8  20000150  0800e6a0  00010150  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006c08  0800e6a0  00010c08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010150  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ff7f  00000000  00000000  00010180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005222  00000000  00000000  000300ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b40  00000000  00000000  00035328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014c4  00000000  00000000  00036e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007769  00000000  00000000  0003832c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002357e  00000000  00000000  0003fa95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099759  00000000  00000000  00063013  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fc76c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ac8  00000000  00000000  000fc7b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00104278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000150 	.word	0x20000150
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800da50 	.word	0x0800da50

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000154 	.word	0x20000154
 80001dc:	0800da50 	.word	0x0800da50

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <initParkingSpots>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void initParkingSpots() {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
  int index = 0;
 80005a6:	2300      	movs	r3, #0
 80005a8:	60fb      	str	r3, [r7, #12]
  for (char block = 'A'; block <= 'C'; block++) {
 80005aa:	2341      	movs	r3, #65	@ 0x41
 80005ac:	72fb      	strb	r3, [r7, #11]
 80005ae:	e023      	b.n	80005f8 <initParkingSpots+0x58>
    for (int num = 1; num <= 5; num++) {
 80005b0:	2301      	movs	r3, #1
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	e01a      	b.n	80005ec <initParkingSpots+0x4c>
      sprintf(spots[index].id, "%c%d", block, num);
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	00db      	lsls	r3, r3, #3
 80005ba:	4a13      	ldr	r2, [pc, #76]	@ (8000608 <initParkingSpots+0x68>)
 80005bc:	1898      	adds	r0, r3, r2
 80005be:	7afa      	ldrb	r2, [r7, #11]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	4912      	ldr	r1, [pc, #72]	@ (800060c <initParkingSpots+0x6c>)
 80005c4:	f00c f8d2 	bl	800c76c <siprintf>
      spots[index].status = 0;
 80005c8:	4a0f      	ldr	r2, [pc, #60]	@ (8000608 <initParkingSpots+0x68>)
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	00db      	lsls	r3, r3, #3
 80005ce:	4413      	add	r3, r2
 80005d0:	2200      	movs	r2, #0
 80005d2:	711a      	strb	r2, [r3, #4]
      spots[index].timeLeft = 0;
 80005d4:	4a0c      	ldr	r2, [pc, #48]	@ (8000608 <initParkingSpots+0x68>)
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	00db      	lsls	r3, r3, #3
 80005da:	4413      	add	r3, r2
 80005dc:	2200      	movs	r2, #0
 80005de:	80da      	strh	r2, [r3, #6]
      index++;
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	3301      	adds	r3, #1
 80005e4:	60fb      	str	r3, [r7, #12]
    for (int num = 1; num <= 5; num++) {
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	3301      	adds	r3, #1
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	2b05      	cmp	r3, #5
 80005f0:	dde1      	ble.n	80005b6 <initParkingSpots+0x16>
  for (char block = 'A'; block <= 'C'; block++) {
 80005f2:	7afb      	ldrb	r3, [r7, #11]
 80005f4:	3301      	adds	r3, #1
 80005f6:	72fb      	strb	r3, [r7, #11]
 80005f8:	7afb      	ldrb	r3, [r7, #11]
 80005fa:	2b43      	cmp	r3, #67	@ 0x43
 80005fc:	d9d8      	bls.n	80005b0 <initParkingSpots+0x10>
    }
  }
}
 80005fe:	bf00      	nop
 8000600:	bf00      	nop
 8000602:	3710      	adds	r7, #16
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20000170 	.word	0x20000170
 800060c:	0800da90 	.word	0x0800da90

08000610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000610:	b5b0      	push	{r4, r5, r7, lr}
 8000612:	b08c      	sub	sp, #48	@ 0x30
 8000614:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000616:	f001 f9d7 	bl	80019c8 <HAL_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061a:	f000 f889 	bl	8000730 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800061e:	f000 f8ef 	bl	8000800 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000622:	f000 f9cf 	bl	80009c4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000626:	f000 f90b 	bl	8000840 <MX_I2C1_Init>
  MX_I2S2_Init();
 800062a:	f000 f937 	bl	800089c <MX_I2S2_Init>
  MX_I2S3_Init();
 800062e:	f000 f963 	bl	80008f8 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000632:	f000 f991 	bl	8000958 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000636:	f008 fa97 	bl	8008b68 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  oledMutex = xSemaphoreCreateMutex();
 800063a:	2001      	movs	r0, #1
 800063c:	f008 fdd3 	bl	80091e6 <xQueueCreateMutex>
 8000640:	4603      	mov	r3, r0
 8000642:	4a2d      	ldr	r2, [pc, #180]	@ (80006f8 <main+0xe8>)
 8000644:	6013      	str	r3, [r2, #0]
  if (oledMutex == NULL) {
 8000646:	4b2c      	ldr	r3, [pc, #176]	@ (80006f8 <main+0xe8>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d101      	bne.n	8000652 <main+0x42>
      Error_Handler();
 800064e:	f000 fd51 	bl	80010f4 <Error_Handler>
  }

  commandQueue = xQueueCreate(20, sizeof(char[64]));
 8000652:	2200      	movs	r2, #0
 8000654:	2140      	movs	r1, #64	@ 0x40
 8000656:	2014      	movs	r0, #20
 8000658:	f008 fd4d 	bl	80090f6 <xQueueGenericCreate>
 800065c:	4603      	mov	r3, r0
 800065e:	4a27      	ldr	r2, [pc, #156]	@ (80006fc <main+0xec>)
 8000660:	6013      	str	r3, [r2, #0]
  if (commandQueue == NULL) {
 8000662:	4b26      	ldr	r3, [pc, #152]	@ (80006fc <main+0xec>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d101      	bne.n	800066e <main+0x5e>
	  Error_Handler();
 800066a:	f000 fd43 	bl	80010f4 <Error_Handler>
  }

  oledQueue = xQueueCreate(20, sizeof(OledMessage));
 800066e:	2200      	movs	r2, #0
 8000670:	212e      	movs	r1, #46	@ 0x2e
 8000672:	2014      	movs	r0, #20
 8000674:	f008 fd3f 	bl	80090f6 <xQueueGenericCreate>
 8000678:	4603      	mov	r3, r0
 800067a:	4a21      	ldr	r2, [pc, #132]	@ (8000700 <main+0xf0>)
 800067c:	6013      	str	r3, [r2, #0]
  if (oledQueue == NULL) {
 800067e:	4b20      	ldr	r3, [pc, #128]	@ (8000700 <main+0xf0>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d101      	bne.n	800068a <main+0x7a>
      Error_Handler();
 8000686:	f000 fd35 	bl	80010f4 <Error_Handler>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */

  initParkingSpots();
 800068a:	f7ff ff89 	bl	80005a0 <initParkingSpots>
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of UsbCommTask */
  UsbCommTaskHandle = osThreadNew(StartUsbCommTask, NULL, &UsbCommTask_attributes);
 800068e:	4a1d      	ldr	r2, [pc, #116]	@ (8000704 <main+0xf4>)
 8000690:	2100      	movs	r1, #0
 8000692:	481d      	ldr	r0, [pc, #116]	@ (8000708 <main+0xf8>)
 8000694:	f008 fab2 	bl	8008bfc <osThreadNew>
 8000698:	4603      	mov	r3, r0
 800069a:	4a1c      	ldr	r2, [pc, #112]	@ (800070c <main+0xfc>)
 800069c:	6013      	str	r3, [r2, #0]

  /* creation of ParkingManagerT */
  ParkingManagerTHandle = osThreadNew(StartParkingManagerTask, NULL, &ParkingManagerT_attributes);
 800069e:	4a1c      	ldr	r2, [pc, #112]	@ (8000710 <main+0x100>)
 80006a0:	2100      	movs	r1, #0
 80006a2:	481c      	ldr	r0, [pc, #112]	@ (8000714 <main+0x104>)
 80006a4:	f008 faaa 	bl	8008bfc <osThreadNew>
 80006a8:	4603      	mov	r3, r0
 80006aa:	4a1b      	ldr	r2, [pc, #108]	@ (8000718 <main+0x108>)
 80006ac:	6013      	str	r3, [r2, #0]

  /* creation of DisplayTask */
  DisplayTaskHandle = osThreadNew(StartDisplayTask, NULL, &DisplayTask_attributes);
 80006ae:	4a1b      	ldr	r2, [pc, #108]	@ (800071c <main+0x10c>)
 80006b0:	2100      	movs	r1, #0
 80006b2:	481b      	ldr	r0, [pc, #108]	@ (8000720 <main+0x110>)
 80006b4:	f008 faa2 	bl	8008bfc <osThreadNew>
 80006b8:	4603      	mov	r3, r0
 80006ba:	4a1a      	ldr	r2, [pc, #104]	@ (8000724 <main+0x114>)
 80006bc:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  OledMessage testMsg = { "Test", "Calisiyor", 3000 };
 80006be:	4b1a      	ldr	r3, [pc, #104]	@ (8000728 <main+0x118>)
 80006c0:	463c      	mov	r4, r7
 80006c2:	461d      	mov	r5, r3
 80006c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006cc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80006d0:	c407      	stmia	r4!, {r0, r1, r2}
 80006d2:	8023      	strh	r3, [r4, #0]
  xQueueSend(oledQueue, &testMsg, 0);
 80006d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000700 <main+0xf0>)
 80006d6:	6818      	ldr	r0, [r3, #0]
 80006d8:	4639      	mov	r1, r7
 80006da:	2300      	movs	r3, #0
 80006dc:	2200      	movs	r2, #0
 80006de:	f008 fd9b 	bl	8009218 <xQueueGenericSend>

  /* Start scheduler */
  osKernelStart();
 80006e2:	f008 fa65 	bl	8008bb0 <osKernelStart>
  HAL_GPIO_WritePin(GPIOD, LD5_Pin, GPIO_PIN_SET); // KIRMIZI LED
 80006e6:	2201      	movs	r2, #1
 80006e8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006ec:	480f      	ldr	r0, [pc, #60]	@ (800072c <main+0x11c>)
 80006ee:	f001 fc97 	bl	8002020 <HAL_GPIO_WritePin>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006f2:	bf00      	nop
 80006f4:	e7fd      	b.n	80006f2 <main+0xe2>
 80006f6:	bf00      	nop
 80006f8:	2000016c 	.word	0x2000016c
 80006fc:	200001ec 	.word	0x200001ec
 8000700:	200001e8 	.word	0x200001e8
 8000704:	0800dbf4 	.word	0x0800dbf4
 8000708:	08000b79 	.word	0x08000b79
 800070c:	2000036c 	.word	0x2000036c
 8000710:	0800dc18 	.word	0x0800dc18
 8000714:	08000c05 	.word	0x08000c05
 8000718:	20000370 	.word	0x20000370
 800071c:	0800dc3c 	.word	0x0800dc3c
 8000720:	08000ffd 	.word	0x08000ffd
 8000724:	20000374 	.word	0x20000374
 8000728:	0800da98 	.word	0x0800da98
 800072c:	40020c00 	.word	0x40020c00

08000730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b094      	sub	sp, #80	@ 0x50
 8000734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000736:	f107 0320 	add.w	r3, r7, #32
 800073a:	2230      	movs	r2, #48	@ 0x30
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f00c f860 	bl	800c804 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000744:	f107 030c 	add.w	r3, r7, #12
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000754:	2300      	movs	r3, #0
 8000756:	60bb      	str	r3, [r7, #8]
 8000758:	4b27      	ldr	r3, [pc, #156]	@ (80007f8 <SystemClock_Config+0xc8>)
 800075a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800075c:	4a26      	ldr	r2, [pc, #152]	@ (80007f8 <SystemClock_Config+0xc8>)
 800075e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000762:	6413      	str	r3, [r2, #64]	@ 0x40
 8000764:	4b24      	ldr	r3, [pc, #144]	@ (80007f8 <SystemClock_Config+0xc8>)
 8000766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000768:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000770:	2300      	movs	r3, #0
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	4b21      	ldr	r3, [pc, #132]	@ (80007fc <SystemClock_Config+0xcc>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a20      	ldr	r2, [pc, #128]	@ (80007fc <SystemClock_Config+0xcc>)
 800077a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800077e:	6013      	str	r3, [r2, #0]
 8000780:	4b1e      	ldr	r3, [pc, #120]	@ (80007fc <SystemClock_Config+0xcc>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800078c:	2301      	movs	r3, #1
 800078e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000790:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000794:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000796:	2302      	movs	r3, #2
 8000798:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800079a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800079e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007a0:	2304      	movs	r3, #4
 80007a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80007a4:	23c0      	movs	r3, #192	@ 0xc0
 80007a6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007a8:	2304      	movs	r3, #4
 80007aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80007ac:	2308      	movs	r3, #8
 80007ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b0:	f107 0320 	add.w	r3, r7, #32
 80007b4:	4618      	mov	r0, r3
 80007b6:	f004 f807 	bl	80047c8 <HAL_RCC_OscConfig>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007c0:	f000 fc98 	bl	80010f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c4:	230f      	movs	r3, #15
 80007c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c8:	2302      	movs	r3, #2
 80007ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007cc:	2300      	movs	r3, #0
 80007ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007d0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007d6:	2300      	movs	r3, #0
 80007d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007da:	f107 030c 	add.w	r3, r7, #12
 80007de:	2103      	movs	r1, #3
 80007e0:	4618      	mov	r0, r3
 80007e2:	f004 fa69 	bl	8004cb8 <HAL_RCC_ClockConfig>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80007ec:	f000 fc82 	bl	80010f4 <Error_Handler>
  }
}
 80007f0:	bf00      	nop
 80007f2:	3750      	adds	r7, #80	@ 0x50
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40023800 	.word	0x40023800
 80007fc:	40007000 	.word	0x40007000

08000800 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b086      	sub	sp, #24
 8000804:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000806:	463b      	mov	r3, r7
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
 8000812:	611a      	str	r2, [r3, #16]
 8000814:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000816:	2301      	movs	r3, #1
 8000818:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 800081a:	23c8      	movs	r3, #200	@ 0xc8
 800081c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 800081e:	2305      	movs	r3, #5
 8000820:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000822:	2302      	movs	r3, #2
 8000824:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000826:	463b      	mov	r3, r7
 8000828:	4618      	mov	r0, r3
 800082a:	f004 fc51 	bl	80050d0 <HAL_RCCEx_PeriphCLKConfig>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8000834:	f000 fc5e 	bl	80010f4 <Error_Handler>
  }
}
 8000838:	bf00      	nop
 800083a:	3718      	adds	r7, #24
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}

08000840 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000844:	4b12      	ldr	r3, [pc, #72]	@ (8000890 <MX_I2C1_Init+0x50>)
 8000846:	4a13      	ldr	r2, [pc, #76]	@ (8000894 <MX_I2C1_Init+0x54>)
 8000848:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800084a:	4b11      	ldr	r3, [pc, #68]	@ (8000890 <MX_I2C1_Init+0x50>)
 800084c:	4a12      	ldr	r2, [pc, #72]	@ (8000898 <MX_I2C1_Init+0x58>)
 800084e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000850:	4b0f      	ldr	r3, [pc, #60]	@ (8000890 <MX_I2C1_Init+0x50>)
 8000852:	2200      	movs	r2, #0
 8000854:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000856:	4b0e      	ldr	r3, [pc, #56]	@ (8000890 <MX_I2C1_Init+0x50>)
 8000858:	2200      	movs	r2, #0
 800085a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800085c:	4b0c      	ldr	r3, [pc, #48]	@ (8000890 <MX_I2C1_Init+0x50>)
 800085e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000862:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000864:	4b0a      	ldr	r3, [pc, #40]	@ (8000890 <MX_I2C1_Init+0x50>)
 8000866:	2200      	movs	r2, #0
 8000868:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800086a:	4b09      	ldr	r3, [pc, #36]	@ (8000890 <MX_I2C1_Init+0x50>)
 800086c:	2200      	movs	r2, #0
 800086e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000870:	4b07      	ldr	r3, [pc, #28]	@ (8000890 <MX_I2C1_Init+0x50>)
 8000872:	2200      	movs	r2, #0
 8000874:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000876:	4b06      	ldr	r3, [pc, #24]	@ (8000890 <MX_I2C1_Init+0x50>)
 8000878:	2200      	movs	r2, #0
 800087a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800087c:	4804      	ldr	r0, [pc, #16]	@ (8000890 <MX_I2C1_Init+0x50>)
 800087e:	f001 fc03 	bl	8002088 <HAL_I2C_Init>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000888:	f000 fc34 	bl	80010f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800088c:	bf00      	nop
 800088e:	bd80      	pop	{r7, pc}
 8000890:	20000230 	.word	0x20000230
 8000894:	40005400 	.word	0x40005400
 8000898:	000186a0 	.word	0x000186a0

0800089c <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80008a0:	4b12      	ldr	r3, [pc, #72]	@ (80008ec <MX_I2S2_Init+0x50>)
 80008a2:	4a13      	ldr	r2, [pc, #76]	@ (80008f0 <MX_I2S2_Init+0x54>)
 80008a4:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80008a6:	4b11      	ldr	r3, [pc, #68]	@ (80008ec <MX_I2S2_Init+0x50>)
 80008a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008ac:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80008ae:	4b0f      	ldr	r3, [pc, #60]	@ (80008ec <MX_I2S2_Init+0x50>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80008b4:	4b0d      	ldr	r3, [pc, #52]	@ (80008ec <MX_I2S2_Init+0x50>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80008ba:	4b0c      	ldr	r3, [pc, #48]	@ (80008ec <MX_I2S2_Init+0x50>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80008c0:	4b0a      	ldr	r3, [pc, #40]	@ (80008ec <MX_I2S2_Init+0x50>)
 80008c2:	4a0c      	ldr	r2, [pc, #48]	@ (80008f4 <MX_I2S2_Init+0x58>)
 80008c4:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80008c6:	4b09      	ldr	r3, [pc, #36]	@ (80008ec <MX_I2S2_Init+0x50>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80008cc:	4b07      	ldr	r3, [pc, #28]	@ (80008ec <MX_I2S2_Init+0x50>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80008d2:	4b06      	ldr	r3, [pc, #24]	@ (80008ec <MX_I2S2_Init+0x50>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80008d8:	4804      	ldr	r0, [pc, #16]	@ (80008ec <MX_I2S2_Init+0x50>)
 80008da:	f002 f883 	bl	80029e4 <HAL_I2S_Init>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 80008e4:	f000 fc06 	bl	80010f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	20000284 	.word	0x20000284
 80008f0:	40003800 	.word	0x40003800
 80008f4:	00017700 	.word	0x00017700

080008f8 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80008fc:	4b13      	ldr	r3, [pc, #76]	@ (800094c <MX_I2S3_Init+0x54>)
 80008fe:	4a14      	ldr	r2, [pc, #80]	@ (8000950 <MX_I2S3_Init+0x58>)
 8000900:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000902:	4b12      	ldr	r3, [pc, #72]	@ (800094c <MX_I2S3_Init+0x54>)
 8000904:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000908:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800090a:	4b10      	ldr	r3, [pc, #64]	@ (800094c <MX_I2S3_Init+0x54>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000910:	4b0e      	ldr	r3, [pc, #56]	@ (800094c <MX_I2S3_Init+0x54>)
 8000912:	2200      	movs	r2, #0
 8000914:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000916:	4b0d      	ldr	r3, [pc, #52]	@ (800094c <MX_I2S3_Init+0x54>)
 8000918:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800091c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800091e:	4b0b      	ldr	r3, [pc, #44]	@ (800094c <MX_I2S3_Init+0x54>)
 8000920:	4a0c      	ldr	r2, [pc, #48]	@ (8000954 <MX_I2S3_Init+0x5c>)
 8000922:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000924:	4b09      	ldr	r3, [pc, #36]	@ (800094c <MX_I2S3_Init+0x54>)
 8000926:	2200      	movs	r2, #0
 8000928:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800092a:	4b08      	ldr	r3, [pc, #32]	@ (800094c <MX_I2S3_Init+0x54>)
 800092c:	2200      	movs	r2, #0
 800092e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000930:	4b06      	ldr	r3, [pc, #24]	@ (800094c <MX_I2S3_Init+0x54>)
 8000932:	2200      	movs	r2, #0
 8000934:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000936:	4805      	ldr	r0, [pc, #20]	@ (800094c <MX_I2S3_Init+0x54>)
 8000938:	f002 f854 	bl	80029e4 <HAL_I2S_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000942:	f000 fbd7 	bl	80010f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	200002cc 	.word	0x200002cc
 8000950:	40003c00 	.word	0x40003c00
 8000954:	00017700 	.word	0x00017700

08000958 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800095c:	4b17      	ldr	r3, [pc, #92]	@ (80009bc <MX_SPI1_Init+0x64>)
 800095e:	4a18      	ldr	r2, [pc, #96]	@ (80009c0 <MX_SPI1_Init+0x68>)
 8000960:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000962:	4b16      	ldr	r3, [pc, #88]	@ (80009bc <MX_SPI1_Init+0x64>)
 8000964:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000968:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800096a:	4b14      	ldr	r3, [pc, #80]	@ (80009bc <MX_SPI1_Init+0x64>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000970:	4b12      	ldr	r3, [pc, #72]	@ (80009bc <MX_SPI1_Init+0x64>)
 8000972:	2200      	movs	r2, #0
 8000974:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000976:	4b11      	ldr	r3, [pc, #68]	@ (80009bc <MX_SPI1_Init+0x64>)
 8000978:	2200      	movs	r2, #0
 800097a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800097c:	4b0f      	ldr	r3, [pc, #60]	@ (80009bc <MX_SPI1_Init+0x64>)
 800097e:	2200      	movs	r2, #0
 8000980:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000982:	4b0e      	ldr	r3, [pc, #56]	@ (80009bc <MX_SPI1_Init+0x64>)
 8000984:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000988:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800098a:	4b0c      	ldr	r3, [pc, #48]	@ (80009bc <MX_SPI1_Init+0x64>)
 800098c:	2200      	movs	r2, #0
 800098e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000990:	4b0a      	ldr	r3, [pc, #40]	@ (80009bc <MX_SPI1_Init+0x64>)
 8000992:	2200      	movs	r2, #0
 8000994:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000996:	4b09      	ldr	r3, [pc, #36]	@ (80009bc <MX_SPI1_Init+0x64>)
 8000998:	2200      	movs	r2, #0
 800099a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800099c:	4b07      	ldr	r3, [pc, #28]	@ (80009bc <MX_SPI1_Init+0x64>)
 800099e:	2200      	movs	r2, #0
 80009a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80009a2:	4b06      	ldr	r3, [pc, #24]	@ (80009bc <MX_SPI1_Init+0x64>)
 80009a4:	220a      	movs	r2, #10
 80009a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009a8:	4804      	ldr	r0, [pc, #16]	@ (80009bc <MX_SPI1_Init+0x64>)
 80009aa:	f004 fce3 	bl	8005374 <HAL_SPI_Init>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80009b4:	f000 fb9e 	bl	80010f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009b8:	bf00      	nop
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20000314 	.word	0x20000314
 80009c0:	40013000 	.word	0x40013000

080009c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b08c      	sub	sp, #48	@ 0x30
 80009c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	605a      	str	r2, [r3, #4]
 80009d4:	609a      	str	r2, [r3, #8]
 80009d6:	60da      	str	r2, [r3, #12]
 80009d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	61bb      	str	r3, [r7, #24]
 80009de:	4b61      	ldr	r3, [pc, #388]	@ (8000b64 <MX_GPIO_Init+0x1a0>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e2:	4a60      	ldr	r2, [pc, #384]	@ (8000b64 <MX_GPIO_Init+0x1a0>)
 80009e4:	f043 0310 	orr.w	r3, r3, #16
 80009e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ea:	4b5e      	ldr	r3, [pc, #376]	@ (8000b64 <MX_GPIO_Init+0x1a0>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ee:	f003 0310 	and.w	r3, r3, #16
 80009f2:	61bb      	str	r3, [r7, #24]
 80009f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	617b      	str	r3, [r7, #20]
 80009fa:	4b5a      	ldr	r3, [pc, #360]	@ (8000b64 <MX_GPIO_Init+0x1a0>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fe:	4a59      	ldr	r2, [pc, #356]	@ (8000b64 <MX_GPIO_Init+0x1a0>)
 8000a00:	f043 0304 	orr.w	r3, r3, #4
 8000a04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a06:	4b57      	ldr	r3, [pc, #348]	@ (8000b64 <MX_GPIO_Init+0x1a0>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0a:	f003 0304 	and.w	r3, r3, #4
 8000a0e:	617b      	str	r3, [r7, #20]
 8000a10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	613b      	str	r3, [r7, #16]
 8000a16:	4b53      	ldr	r3, [pc, #332]	@ (8000b64 <MX_GPIO_Init+0x1a0>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1a:	4a52      	ldr	r2, [pc, #328]	@ (8000b64 <MX_GPIO_Init+0x1a0>)
 8000a1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a22:	4b50      	ldr	r3, [pc, #320]	@ (8000b64 <MX_GPIO_Init+0x1a0>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a2a:	613b      	str	r3, [r7, #16]
 8000a2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60fb      	str	r3, [r7, #12]
 8000a32:	4b4c      	ldr	r3, [pc, #304]	@ (8000b64 <MX_GPIO_Init+0x1a0>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a36:	4a4b      	ldr	r2, [pc, #300]	@ (8000b64 <MX_GPIO_Init+0x1a0>)
 8000a38:	f043 0301 	orr.w	r3, r3, #1
 8000a3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a3e:	4b49      	ldr	r3, [pc, #292]	@ (8000b64 <MX_GPIO_Init+0x1a0>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60bb      	str	r3, [r7, #8]
 8000a4e:	4b45      	ldr	r3, [pc, #276]	@ (8000b64 <MX_GPIO_Init+0x1a0>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a52:	4a44      	ldr	r2, [pc, #272]	@ (8000b64 <MX_GPIO_Init+0x1a0>)
 8000a54:	f043 0302 	orr.w	r3, r3, #2
 8000a58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a5a:	4b42      	ldr	r3, [pc, #264]	@ (8000b64 <MX_GPIO_Init+0x1a0>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5e:	f003 0302 	and.w	r3, r3, #2
 8000a62:	60bb      	str	r3, [r7, #8]
 8000a64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	607b      	str	r3, [r7, #4]
 8000a6a:	4b3e      	ldr	r3, [pc, #248]	@ (8000b64 <MX_GPIO_Init+0x1a0>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6e:	4a3d      	ldr	r2, [pc, #244]	@ (8000b64 <MX_GPIO_Init+0x1a0>)
 8000a70:	f043 0308 	orr.w	r3, r3, #8
 8000a74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a76:	4b3b      	ldr	r3, [pc, #236]	@ (8000b64 <MX_GPIO_Init+0x1a0>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7a:	f003 0308 	and.w	r3, r3, #8
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000a82:	2200      	movs	r2, #0
 8000a84:	2108      	movs	r1, #8
 8000a86:	4838      	ldr	r0, [pc, #224]	@ (8000b68 <MX_GPIO_Init+0x1a4>)
 8000a88:	f001 faca 	bl	8002020 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	2101      	movs	r1, #1
 8000a90:	4836      	ldr	r0, [pc, #216]	@ (8000b6c <MX_GPIO_Init+0x1a8>)
 8000a92:	f001 fac5 	bl	8002020 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a96:	2200      	movs	r2, #0
 8000a98:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000a9c:	4834      	ldr	r0, [pc, #208]	@ (8000b70 <MX_GPIO_Init+0x1ac>)
 8000a9e:	f001 fabf 	bl	8002020 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000aa2:	2304      	movs	r3, #4
 8000aa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8000aae:	f107 031c 	add.w	r3, r7, #28
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	482c      	ldr	r0, [pc, #176]	@ (8000b68 <MX_GPIO_Init+0x1a4>)
 8000ab6:	f001 f92f 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000aba:	2308      	movs	r3, #8
 8000abc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000aca:	f107 031c 	add.w	r3, r7, #28
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4825      	ldr	r0, [pc, #148]	@ (8000b68 <MX_GPIO_Init+0x1a4>)
 8000ad2:	f001 f921 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000ad6:	2332      	movs	r3, #50	@ 0x32
 8000ad8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ada:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000ade:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ae4:	f107 031c 	add.w	r3, r7, #28
 8000ae8:	4619      	mov	r1, r3
 8000aea:	481f      	ldr	r0, [pc, #124]	@ (8000b68 <MX_GPIO_Init+0x1a4>)
 8000aec:	f001 f914 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000af0:	2301      	movs	r3, #1
 8000af2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af4:	2301      	movs	r3, #1
 8000af6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afc:	2300      	movs	r3, #0
 8000afe:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b00:	f107 031c 	add.w	r3, r7, #28
 8000b04:	4619      	mov	r1, r3
 8000b06:	4819      	ldr	r0, [pc, #100]	@ (8000b6c <MX_GPIO_Init+0x1a8>)
 8000b08:	f001 f906 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b10:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000b14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1a:	f107 031c 	add.w	r3, r7, #28
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4814      	ldr	r0, [pc, #80]	@ (8000b74 <MX_GPIO_Init+0x1b0>)
 8000b22:	f001 f8f9 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000b26:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000b2a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b34:	2300      	movs	r3, #0
 8000b36:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b38:	f107 031c 	add.w	r3, r7, #28
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	480c      	ldr	r0, [pc, #48]	@ (8000b70 <MX_GPIO_Init+0x1ac>)
 8000b40:	f001 f8ea 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b44:	2320      	movs	r3, #32
 8000b46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b50:	f107 031c 	add.w	r3, r7, #28
 8000b54:	4619      	mov	r1, r3
 8000b56:	4806      	ldr	r0, [pc, #24]	@ (8000b70 <MX_GPIO_Init+0x1ac>)
 8000b58:	f001 f8de 	bl	8001d18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b5c:	bf00      	nop
 8000b5e:	3730      	adds	r7, #48	@ 0x30
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40021000 	.word	0x40021000
 8000b6c:	40020800 	.word	0x40020800
 8000b70:	40020c00 	.word	0x40020c00
 8000b74:	40020000 	.word	0x40020000

08000b78 <StartUsbCommTask>:
  * @retval None
  */
/* USER CODE END Header_StartUsbCommTask */
uint8_t commandReady = 0;

void StartUsbCommTask(void *argument) {
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b09e      	sub	sp, #120	@ 0x78
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  MX_USB_DEVICE_Init();
 8000b80:	f00b f88a 	bl	800bc98 <MX_USB_DEVICE_Init>
  while (1) {
	  if (commandReady) {
 8000b84:	4b19      	ldr	r3, [pc, #100]	@ (8000bec <StartUsbCommTask+0x74>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d02a      	beq.n	8000be2 <StartUsbCommTask+0x6a>
	      commandReady = 0;
 8000b8c:	4b17      	ldr	r3, [pc, #92]	@ (8000bec <StartUsbCommTask+0x74>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	701a      	strb	r2, [r3, #0]

	      OledMessage msg;
	      snprintf(msg.line1, sizeof(msg.line1), "USB OK");
 8000b92:	f107 0308 	add.w	r3, r7, #8
 8000b96:	4a16      	ldr	r2, [pc, #88]	@ (8000bf0 <StartUsbCommTask+0x78>)
 8000b98:	2116      	movs	r1, #22
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f00b fdb2 	bl	800c704 <sniprintf>
	      snprintf(msg.line2, sizeof(msg.line2), "Komut Alindi");
 8000ba0:	f107 0308 	add.w	r3, r7, #8
 8000ba4:	3316      	adds	r3, #22
 8000ba6:	4a13      	ldr	r2, [pc, #76]	@ (8000bf4 <StartUsbCommTask+0x7c>)
 8000ba8:	2116      	movs	r1, #22
 8000baa:	4618      	mov	r0, r3
 8000bac:	f00b fdaa 	bl	800c704 <sniprintf>
	      msg.duration_ms = 2000;
 8000bb0:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000bb4:	86bb      	strh	r3, [r7, #52]	@ 0x34
	      xQueueSend(oledQueue, &msg, 0);
 8000bb6:	4b10      	ldr	r3, [pc, #64]	@ (8000bf8 <StartUsbCommTask+0x80>)
 8000bb8:	6818      	ldr	r0, [r3, #0]
 8000bba:	f107 0108 	add.w	r1, r7, #8
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	f008 fb29 	bl	8009218 <xQueueGenericSend>

	      char temp[64];
	      strcpy(temp, rxBuffer);
 8000bc6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000bca:	490c      	ldr	r1, [pc, #48]	@ (8000bfc <StartUsbCommTask+0x84>)
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f00b fe71 	bl	800c8b4 <strcpy>

	      // Queue'ya gönder
	      xQueueSend(commandQueue, &temp, pdMS_TO_TICKS(100));
 8000bd2:	4b0b      	ldr	r3, [pc, #44]	@ (8000c00 <StartUsbCommTask+0x88>)
 8000bd4:	6818      	ldr	r0, [r3, #0]
 8000bd6:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8000bda:	2300      	movs	r3, #0
 8000bdc:	2264      	movs	r2, #100	@ 0x64
 8000bde:	f008 fb1b 	bl	8009218 <xQueueGenericSend>
	  }
    osDelay(10);
 8000be2:	200a      	movs	r0, #10
 8000be4:	f008 f89c 	bl	8008d20 <osDelay>
	  if (commandReady) {
 8000be8:	e7cc      	b.n	8000b84 <StartUsbCommTask+0xc>
 8000bea:	bf00      	nop
 8000bec:	20000378 	.word	0x20000378
 8000bf0:	0800dac8 	.word	0x0800dac8
 8000bf4:	0800dad0 	.word	0x0800dad0
 8000bf8:	200001e8 	.word	0x200001e8
 8000bfc:	200001f0 	.word	0x200001f0
 8000c00:	200001ec 	.word	0x200001ec

08000c04 <StartParkingManagerTask>:
* @brief Function implementing the ParkingManagerT thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartParkingManagerTask */
void StartParkingManagerTask(void *argument) {
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b0b8      	sub	sp, #224	@ 0xe0
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
    char cmd[64];
    TickType_t lastCheck = xTaskGetTickCount();
 8000c0c:	f009 fb8c 	bl	800a328 <xTaskGetTickCount>
 8000c10:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (1) {
        // Queue'dan komut bekle
        if (xQueueReceive(commandQueue, &cmd, pdMS_TO_TICKS(100)) == pdPASS) {
 8000c14:	4baa      	ldr	r3, [pc, #680]	@ (8000ec0 <StartParkingManagerTask+0x2bc>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f107 0184 	add.w	r1, r7, #132	@ 0x84
 8000c1c:	2264      	movs	r2, #100	@ 0x64
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f008 fc9a 	bl	8009558 <xQueueReceive>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	f040 812f 	bne.w	8000e8a <StartParkingManagerTask+0x286>

            if (strncmp(cmd, "RESERVE", 7) == 0) {
 8000c2c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000c30:	2207      	movs	r2, #7
 8000c32:	49a4      	ldr	r1, [pc, #656]	@ (8000ec4 <StartParkingManagerTask+0x2c0>)
 8000c34:	4618      	mov	r0, r3
 8000c36:	f00b fdfe 	bl	800c836 <strncmp>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	f040 8090 	bne.w	8000d62 <StartParkingManagerTask+0x15e>
                char spot[4] = {0};
 8000c42:	2300      	movs	r3, #0
 8000c44:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                int duration = 0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	67fb      	str	r3, [r7, #124]	@ 0x7c

                int parsed = sscanf(cmd, "RESERVE;%3[^;];%d", spot, &duration);
 8000c4c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000c50:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 8000c54:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 8000c58:	499b      	ldr	r1, [pc, #620]	@ (8000ec8 <StartParkingManagerTask+0x2c4>)
 8000c5a:	f00b fda7 	bl	800c7ac <siscanf>
 8000c5e:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
                if (parsed == 2) {
 8000c62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000c66:	2b02      	cmp	r3, #2
 8000c68:	d15c      	bne.n	8000d24 <StartParkingManagerTask+0x120>
                    spot[strcspn(spot, "\r\n")] = 0;
 8000c6a:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000c6e:	4997      	ldr	r1, [pc, #604]	@ (8000ecc <StartParkingManagerTask+0x2c8>)
 8000c70:	4618      	mov	r0, r3
 8000c72:	f00b fdcf 	bl	800c814 <strcspn>
 8000c76:	4603      	mov	r3, r0
 8000c78:	33e0      	adds	r3, #224	@ 0xe0
 8000c7a:	443b      	add	r3, r7
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	f803 2c60 	strb.w	r2, [r3, #-96]
                    spot[3] = '\0';
 8000c82:	2300      	movs	r3, #0
 8000c84:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83

                    for (int i = 0; i < TOTAL_SPOTS; i++) {
 8000c88:	2300      	movs	r3, #0
 8000c8a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8000c8e:	e044      	b.n	8000d1a <StartParkingManagerTask+0x116>
                        if (strcmp(spots[i].id, spot) == 0) {
 8000c90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8000c94:	00db      	lsls	r3, r3, #3
 8000c96:	4a8e      	ldr	r2, [pc, #568]	@ (8000ed0 <StartParkingManagerTask+0x2cc>)
 8000c98:	4413      	add	r3, r2
 8000c9a:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 8000c9e:	4611      	mov	r1, r2
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff fa9d 	bl	80001e0 <strcmp>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d131      	bne.n	8000d10 <StartParkingManagerTask+0x10c>
                            spots[i].status = 1;
 8000cac:	4a88      	ldr	r2, [pc, #544]	@ (8000ed0 <StartParkingManagerTask+0x2cc>)
 8000cae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8000cb2:	00db      	lsls	r3, r3, #3
 8000cb4:	4413      	add	r3, r2
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	711a      	strb	r2, [r3, #4]
                            spots[i].timeLeft = duration;
 8000cba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000cbc:	b299      	uxth	r1, r3
 8000cbe:	4a84      	ldr	r2, [pc, #528]	@ (8000ed0 <StartParkingManagerTask+0x2cc>)
 8000cc0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8000cc4:	00db      	lsls	r3, r3, #3
 8000cc6:	4413      	add	r3, r2
 8000cc8:	460a      	mov	r2, r1
 8000cca:	80da      	strh	r2, [r3, #6]

                            OledMessage reserveMsg;
                            snprintf(reserveMsg.line1, sizeof(reserveMsg.line1), "Rezerve: %s", spots[i].id);
 8000ccc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8000cd0:	00db      	lsls	r3, r3, #3
 8000cd2:	4a7f      	ldr	r2, [pc, #508]	@ (8000ed0 <StartParkingManagerTask+0x2cc>)
 8000cd4:	4413      	add	r3, r2
 8000cd6:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8000cda:	4a7e      	ldr	r2, [pc, #504]	@ (8000ed4 <StartParkingManagerTask+0x2d0>)
 8000cdc:	2116      	movs	r1, #22
 8000cde:	f00b fd11 	bl	800c704 <sniprintf>
                            snprintf(reserveMsg.line2, sizeof(reserveMsg.line2), "Sure: %d dk", duration);
 8000ce2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000ce4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000ce8:	f103 0016 	add.w	r0, r3, #22
 8000cec:	4613      	mov	r3, r2
 8000cee:	4a7a      	ldr	r2, [pc, #488]	@ (8000ed8 <StartParkingManagerTask+0x2d4>)
 8000cf0:	2116      	movs	r1, #22
 8000cf2:	f00b fd07 	bl	800c704 <sniprintf>
                            reserveMsg.duration_ms = 3000;
 8000cf6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8000cfa:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
                            xQueueSend(oledQueue, &reserveMsg, pdMS_TO_TICKS(100));
 8000cfe:	4b77      	ldr	r3, [pc, #476]	@ (8000edc <StartParkingManagerTask+0x2d8>)
 8000d00:	6818      	ldr	r0, [r3, #0]
 8000d02:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8000d06:	2300      	movs	r3, #0
 8000d08:	2264      	movs	r2, #100	@ 0x64
 8000d0a:	f008 fa85 	bl	8009218 <xQueueGenericSend>
                            break;
 8000d0e:	e0bc      	b.n	8000e8a <StartParkingManagerTask+0x286>
                    for (int i = 0; i < TOTAL_SPOTS; i++) {
 8000d10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8000d14:	3301      	adds	r3, #1
 8000d16:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8000d1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8000d1e:	2b0e      	cmp	r3, #14
 8000d20:	ddb6      	ble.n	8000c90 <StartParkingManagerTask+0x8c>
 8000d22:	e0b2      	b.n	8000e8a <StartParkingManagerTask+0x286>
                    }

                }
                else {
                    OledMessage err;
                    snprintf(err.line1, sizeof(err.line1), "Komut hatali");
 8000d24:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000d28:	4a6d      	ldr	r2, [pc, #436]	@ (8000ee0 <StartParkingManagerTask+0x2dc>)
 8000d2a:	2116      	movs	r1, #22
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f00b fce9 	bl	800c704 <sniprintf>
                    snprintf(err.line2, sizeof(err.line2), "%.20s", cmd);
 8000d32:	f107 0284 	add.w	r2, r7, #132	@ 0x84
 8000d36:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000d3a:	f103 0016 	add.w	r0, r3, #22
 8000d3e:	4613      	mov	r3, r2
 8000d40:	4a68      	ldr	r2, [pc, #416]	@ (8000ee4 <StartParkingManagerTask+0x2e0>)
 8000d42:	2116      	movs	r1, #22
 8000d44:	f00b fcde 	bl	800c704 <sniprintf>
                    err.duration_ms = 3000;
 8000d48:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8000d4c:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
                    xQueueSend(oledQueue, &err, pdMS_TO_TICKS(100));
 8000d50:	4b62      	ldr	r3, [pc, #392]	@ (8000edc <StartParkingManagerTask+0x2d8>)
 8000d52:	6818      	ldr	r0, [r3, #0]
 8000d54:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8000d58:	2300      	movs	r3, #0
 8000d5a:	2264      	movs	r2, #100	@ 0x64
 8000d5c:	f008 fa5c 	bl	8009218 <xQueueGenericSend>
 8000d60:	e093      	b.n	8000e8a <StartParkingManagerTask+0x286>
                }
            }
            else if (strncmp(cmd, "CANCEL", 6) == 0) {
 8000d62:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000d66:	2206      	movs	r2, #6
 8000d68:	495f      	ldr	r1, [pc, #380]	@ (8000ee8 <StartParkingManagerTask+0x2e4>)
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f00b fd63 	bl	800c836 <strncmp>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f040 8089 	bne.w	8000e8a <StartParkingManagerTask+0x286>
                char spot[4] = {0};
 8000d78:	2300      	movs	r3, #0
 8000d7a:	67bb      	str	r3, [r7, #120]	@ 0x78
                sscanf(cmd, "CANCEL;%3s", spot);
 8000d7c:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8000d80:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000d84:	4959      	ldr	r1, [pc, #356]	@ (8000eec <StartParkingManagerTask+0x2e8>)
 8000d86:	4618      	mov	r0, r3
 8000d88:	f00b fd10 	bl	800c7ac <siscanf>
                spot[strcspn(spot, "\r\n")] = 0;
 8000d8c:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000d90:	494e      	ldr	r1, [pc, #312]	@ (8000ecc <StartParkingManagerTask+0x2c8>)
 8000d92:	4618      	mov	r0, r3
 8000d94:	f00b fd3e 	bl	800c814 <strcspn>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	33e0      	adds	r3, #224	@ 0xe0
 8000d9c:	443b      	add	r3, r7
 8000d9e:	2200      	movs	r2, #0
 8000da0:	f803 2c68 	strb.w	r2, [r3, #-104]

                for (int i = 0; i < TOTAL_SPOTS; i++) {
 8000da4:	2300      	movs	r3, #0
 8000da6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8000daa:	e06a      	b.n	8000e82 <StartParkingManagerTask+0x27e>
                    if (strcmp(spots[i].id, spot) == 0 && spots[i].status == 1) {
 8000dac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000db0:	00db      	lsls	r3, r3, #3
 8000db2:	4a47      	ldr	r2, [pc, #284]	@ (8000ed0 <StartParkingManagerTask+0x2cc>)
 8000db4:	4413      	add	r3, r2
 8000db6:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8000dba:	4611      	mov	r1, r2
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff fa0f 	bl	80001e0 <strcmp>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d157      	bne.n	8000e78 <StartParkingManagerTask+0x274>
 8000dc8:	4a41      	ldr	r2, [pc, #260]	@ (8000ed0 <StartParkingManagerTask+0x2cc>)
 8000dca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000dce:	00db      	lsls	r3, r3, #3
 8000dd0:	4413      	add	r3, r2
 8000dd2:	791b      	ldrb	r3, [r3, #4]
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d14f      	bne.n	8000e78 <StartParkingManagerTask+0x274>
                        uint16_t kalanSure = spots[i].timeLeft;
 8000dd8:	4a3d      	ldr	r2, [pc, #244]	@ (8000ed0 <StartParkingManagerTask+0x2cc>)
 8000dda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000dde:	00db      	lsls	r3, r3, #3
 8000de0:	4413      	add	r3, r2
 8000de2:	88db      	ldrh	r3, [r3, #6]
 8000de4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce

                        spots[i].status = 0;
 8000de8:	4a39      	ldr	r2, [pc, #228]	@ (8000ed0 <StartParkingManagerTask+0x2cc>)
 8000dea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000dee:	00db      	lsls	r3, r3, #3
 8000df0:	4413      	add	r3, r2
 8000df2:	2200      	movs	r2, #0
 8000df4:	711a      	strb	r2, [r3, #4]
                        spots[i].timeLeft = 0;
 8000df6:	4a36      	ldr	r2, [pc, #216]	@ (8000ed0 <StartParkingManagerTask+0x2cc>)
 8000df8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000dfc:	00db      	lsls	r3, r3, #3
 8000dfe:	4413      	add	r3, r2
 8000e00:	2200      	movs	r2, #0
 8000e02:	80da      	strh	r2, [r3, #6]

                        OledMessage cancelMsg;
                        snprintf(cancelMsg.line1, sizeof(cancelMsg.line1), "Iptal: %s", spots[i].id);
 8000e04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000e08:	00db      	lsls	r3, r3, #3
 8000e0a:	4a31      	ldr	r2, [pc, #196]	@ (8000ed0 <StartParkingManagerTask+0x2cc>)
 8000e0c:	4413      	add	r3, r2
 8000e0e:	f107 0008 	add.w	r0, r7, #8
 8000e12:	4a37      	ldr	r2, [pc, #220]	@ (8000ef0 <StartParkingManagerTask+0x2ec>)
 8000e14:	2116      	movs	r1, #22
 8000e16:	f00b fc75 	bl	800c704 <sniprintf>
                        snprintf(cancelMsg.line2, sizeof(cancelMsg.line2), "Kalan: %d dk", kalanSure);
 8000e1a:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8000e1e:	f107 0308 	add.w	r3, r7, #8
 8000e22:	f103 0016 	add.w	r0, r3, #22
 8000e26:	4613      	mov	r3, r2
 8000e28:	4a32      	ldr	r2, [pc, #200]	@ (8000ef4 <StartParkingManagerTask+0x2f0>)
 8000e2a:	2116      	movs	r1, #22
 8000e2c:	f00b fc6a 	bl	800c704 <sniprintf>
                        cancelMsg.duration_ms = 3000;
 8000e30:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8000e34:	86bb      	strh	r3, [r7, #52]	@ 0x34
                        xQueueSend(oledQueue, &cancelMsg, pdMS_TO_TICKS(100));
 8000e36:	4b29      	ldr	r3, [pc, #164]	@ (8000edc <StartParkingManagerTask+0x2d8>)
 8000e38:	6818      	ldr	r0, [r3, #0]
 8000e3a:	f107 0108 	add.w	r1, r7, #8
 8000e3e:	2300      	movs	r3, #0
 8000e40:	2264      	movs	r2, #100	@ 0x64
 8000e42:	f008 f9e9 	bl	8009218 <xQueueGenericSend>

                        char usbMsg[64];
                        snprintf(usbMsg, sizeof(usbMsg), "EXPIRED;%s\r\n", spots[i].id);
 8000e46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000e4a:	00db      	lsls	r3, r3, #3
 8000e4c:	4a20      	ldr	r2, [pc, #128]	@ (8000ed0 <StartParkingManagerTask+0x2cc>)
 8000e4e:	4413      	add	r3, r2
 8000e50:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8000e54:	4a28      	ldr	r2, [pc, #160]	@ (8000ef8 <StartParkingManagerTask+0x2f4>)
 8000e56:	2140      	movs	r1, #64	@ 0x40
 8000e58:	f00b fc54 	bl	800c704 <sniprintf>
                        CDC_Transmit_FS((uint8_t*)usbMsg, strlen(usbMsg));
 8000e5c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff f9c7 	bl	80001f4 <strlen>
 8000e66:	4603      	mov	r3, r0
 8000e68:	b29a      	uxth	r2, r3
 8000e6a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000e6e:	4611      	mov	r1, r2
 8000e70:	4618      	mov	r0, r3
 8000e72:	f00a ffe7 	bl	800be44 <CDC_Transmit_FS>
                        break;
 8000e76:	e008      	b.n	8000e8a <StartParkingManagerTask+0x286>
                for (int i = 0; i < TOTAL_SPOTS; i++) {
 8000e78:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8000e82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000e86:	2b0e      	cmp	r3, #14
 8000e88:	dd90      	ble.n	8000dac <StartParkingManagerTask+0x1a8>
                }
            }

        }

        TickType_t now = xTaskGetTickCount();
 8000e8a:	f009 fa4d 	bl	800a328 <xTaskGetTickCount>
 8000e8e:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
        if ((now - lastCheck) >= pdMS_TO_TICKS(60000)) {
 8000e92:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8000e96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000e9a:	1ad3      	subs	r3, r2, r3
 8000e9c:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	f240 809c 	bls.w	8000fde <StartParkingManagerTask+0x3da>
            lastCheck = now;
 8000ea6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000eaa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

            HAL_GPIO_TogglePin(GPIOD, LD3_Pin);
 8000eae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000eb2:	4812      	ldr	r0, [pc, #72]	@ (8000efc <StartParkingManagerTask+0x2f8>)
 8000eb4:	f001 f8cd 	bl	8002052 <HAL_GPIO_TogglePin>

            for (int i = 0; i < TOTAL_SPOTS; i++) {
 8000eb8:	2300      	movs	r3, #0
 8000eba:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8000ebe:	e08a      	b.n	8000fd6 <StartParkingManagerTask+0x3d2>
 8000ec0:	200001ec 	.word	0x200001ec
 8000ec4:	0800dae0 	.word	0x0800dae0
 8000ec8:	0800dae8 	.word	0x0800dae8
 8000ecc:	0800dafc 	.word	0x0800dafc
 8000ed0:	20000170 	.word	0x20000170
 8000ed4:	0800db00 	.word	0x0800db00
 8000ed8:	0800db0c 	.word	0x0800db0c
 8000edc:	200001e8 	.word	0x200001e8
 8000ee0:	0800db18 	.word	0x0800db18
 8000ee4:	0800db28 	.word	0x0800db28
 8000ee8:	0800db30 	.word	0x0800db30
 8000eec:	0800db38 	.word	0x0800db38
 8000ef0:	0800db44 	.word	0x0800db44
 8000ef4:	0800db50 	.word	0x0800db50
 8000ef8:	0800db60 	.word	0x0800db60
 8000efc:	40020c00 	.word	0x40020c00
                if (spots[i].status == 1 && spots[i].timeLeft > 0) {
 8000f00:	4a39      	ldr	r2, [pc, #228]	@ (8000fe8 <StartParkingManagerTask+0x3e4>)
 8000f02:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000f06:	00db      	lsls	r3, r3, #3
 8000f08:	4413      	add	r3, r2
 8000f0a:	791b      	ldrb	r3, [r3, #4]
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d15d      	bne.n	8000fcc <StartParkingManagerTask+0x3c8>
 8000f10:	4a35      	ldr	r2, [pc, #212]	@ (8000fe8 <StartParkingManagerTask+0x3e4>)
 8000f12:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000f16:	00db      	lsls	r3, r3, #3
 8000f18:	4413      	add	r3, r2
 8000f1a:	88db      	ldrh	r3, [r3, #6]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d055      	beq.n	8000fcc <StartParkingManagerTask+0x3c8>
                    spots[i].timeLeft--;
 8000f20:	4a31      	ldr	r2, [pc, #196]	@ (8000fe8 <StartParkingManagerTask+0x3e4>)
 8000f22:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000f26:	00db      	lsls	r3, r3, #3
 8000f28:	4413      	add	r3, r2
 8000f2a:	88db      	ldrh	r3, [r3, #6]
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	b299      	uxth	r1, r3
 8000f30:	4a2d      	ldr	r2, [pc, #180]	@ (8000fe8 <StartParkingManagerTask+0x3e4>)
 8000f32:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000f36:	00db      	lsls	r3, r3, #3
 8000f38:	4413      	add	r3, r2
 8000f3a:	460a      	mov	r2, r1
 8000f3c:	80da      	strh	r2, [r3, #6]

                    if (spots[i].timeLeft == 0) {
 8000f3e:	4a2a      	ldr	r2, [pc, #168]	@ (8000fe8 <StartParkingManagerTask+0x3e4>)
 8000f40:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000f44:	00db      	lsls	r3, r3, #3
 8000f46:	4413      	add	r3, r2
 8000f48:	88db      	ldrh	r3, [r3, #6]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d13e      	bne.n	8000fcc <StartParkingManagerTask+0x3c8>
                        spots[i].status = 0;
 8000f4e:	4a26      	ldr	r2, [pc, #152]	@ (8000fe8 <StartParkingManagerTask+0x3e4>)
 8000f50:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000f54:	00db      	lsls	r3, r3, #3
 8000f56:	4413      	add	r3, r2
 8000f58:	2200      	movs	r2, #0
 8000f5a:	711a      	strb	r2, [r3, #4]

                        OledMessage expiredMsg;
                        snprintf(expiredMsg.line1, sizeof(expiredMsg.line1), "Süre bitti!");
 8000f5c:	f107 0308 	add.w	r3, r7, #8
 8000f60:	4a22      	ldr	r2, [pc, #136]	@ (8000fec <StartParkingManagerTask+0x3e8>)
 8000f62:	2116      	movs	r1, #22
 8000f64:	4618      	mov	r0, r3
 8000f66:	f00b fbcd 	bl	800c704 <sniprintf>
                        snprintf(expiredMsg.line2, sizeof(expiredMsg.line2), "%s bos", spots[i].id);
 8000f6a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000f6e:	00db      	lsls	r3, r3, #3
 8000f70:	4a1d      	ldr	r2, [pc, #116]	@ (8000fe8 <StartParkingManagerTask+0x3e4>)
 8000f72:	441a      	add	r2, r3
 8000f74:	f107 0308 	add.w	r3, r7, #8
 8000f78:	f103 0016 	add.w	r0, r3, #22
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ff0 <StartParkingManagerTask+0x3ec>)
 8000f80:	2116      	movs	r1, #22
 8000f82:	f00b fbbf 	bl	800c704 <sniprintf>
                        expiredMsg.duration_ms = 3000;
 8000f86:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8000f8a:	86bb      	strh	r3, [r7, #52]	@ 0x34
                        xQueueSend(oledQueue, &expiredMsg, pdMS_TO_TICKS(100));
 8000f8c:	4b19      	ldr	r3, [pc, #100]	@ (8000ff4 <StartParkingManagerTask+0x3f0>)
 8000f8e:	6818      	ldr	r0, [r3, #0]
 8000f90:	f107 0108 	add.w	r1, r7, #8
 8000f94:	2300      	movs	r3, #0
 8000f96:	2264      	movs	r2, #100	@ 0x64
 8000f98:	f008 f93e 	bl	8009218 <xQueueGenericSend>

                        char usbMsg[64];
                        snprintf(usbMsg, sizeof(usbMsg), "EXPIRED;%s\r\n", spots[i].id);
 8000f9c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000fa0:	00db      	lsls	r3, r3, #3
 8000fa2:	4a11      	ldr	r2, [pc, #68]	@ (8000fe8 <StartParkingManagerTask+0x3e4>)
 8000fa4:	4413      	add	r3, r2
 8000fa6:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8000faa:	4a13      	ldr	r2, [pc, #76]	@ (8000ff8 <StartParkingManagerTask+0x3f4>)
 8000fac:	2140      	movs	r1, #64	@ 0x40
 8000fae:	f00b fba9 	bl	800c704 <sniprintf>
                        CDC_Transmit_FS((uint8_t*)usbMsg, strlen(usbMsg));
 8000fb2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff f91c 	bl	80001f4 <strlen>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	b29a      	uxth	r2, r3
 8000fc0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000fc4:	4611      	mov	r1, r2
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f00a ff3c 	bl	800be44 <CDC_Transmit_FS>
            for (int i = 0; i < TOTAL_SPOTS; i++) {
 8000fcc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8000fd6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000fda:	2b0e      	cmp	r3, #14
 8000fdc:	dd90      	ble.n	8000f00 <StartParkingManagerTask+0x2fc>
                    }
                }
            }

        }
        vTaskDelay(1);
 8000fde:	2001      	movs	r0, #1
 8000fe0:	f009 f858 	bl	800a094 <vTaskDelay>
    while (1) {
 8000fe4:	e616      	b.n	8000c14 <StartParkingManagerTask+0x10>
 8000fe6:	bf00      	nop
 8000fe8:	20000170 	.word	0x20000170
 8000fec:	0800db70 	.word	0x0800db70
 8000ff0:	0800db80 	.word	0x0800db80
 8000ff4:	200001e8 	.word	0x200001e8
 8000ff8:	0800db60 	.word	0x0800db60

08000ffc <StartDisplayTask>:
* @brief Function implementing the DisplayTask thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDisplayTask */
void StartDisplayTask(void *argument) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b094      	sub	sp, #80	@ 0x50
 8001000:	af02      	add	r7, sp, #8
 8001002:	6078      	str	r0, [r7, #4]
	ssd1306_Init();
 8001004:	f000 fae2 	bl	80015cc <ssd1306_Init>

    TickType_t xLastWakeTime = xTaskGetTickCount();
 8001008:	f009 f98e 	bl	800a328 <xTaskGetTickCount>
 800100c:	4603      	mov	r3, r0
 800100e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    const TickType_t xFrequency = pdMS_TO_TICKS(1000);
 8001010:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001014:	643b      	str	r3, [r7, #64]	@ 0x40

    OledMessage msg;
    uint32_t msgEndTime = 0;
 8001016:	2300      	movs	r3, #0
 8001018:	647b      	str	r3, [r7, #68]	@ 0x44

    while (1) {
        // Yeni mesaj varsa al
        if (xQueueReceive(oledQueue, &msg, 0) == pdPASS) {
 800101a:	4b33      	ldr	r3, [pc, #204]	@ (80010e8 <StartDisplayTask+0xec>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f107 010c 	add.w	r1, r7, #12
 8001022:	2200      	movs	r2, #0
 8001024:	4618      	mov	r0, r3
 8001026:	f008 fa97 	bl	8009558 <xQueueReceive>
 800102a:	4603      	mov	r3, r0
 800102c:	2b01      	cmp	r3, #1
 800102e:	d134      	bne.n	800109a <StartDisplayTask+0x9e>
            if (xSemaphoreTake(oledMutex, pdMS_TO_TICKS(100)) == pdTRUE) {
 8001030:	4b2e      	ldr	r3, [pc, #184]	@ (80010ec <StartDisplayTask+0xf0>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2164      	movs	r1, #100	@ 0x64
 8001036:	4618      	mov	r0, r3
 8001038:	f008 fb70 	bl	800971c <xQueueSemaphoreTake>
 800103c:	4603      	mov	r3, r0
 800103e:	2b01      	cmp	r3, #1
 8001040:	d12b      	bne.n	800109a <StartDisplayTask+0x9e>
                ssd1306_Fill(Black);
 8001042:	2000      	movs	r0, #0
 8001044:	f000 fb2c 	bl	80016a0 <ssd1306_Fill>
                ssd1306_SetCursor(0, 0);
 8001048:	2100      	movs	r1, #0
 800104a:	2000      	movs	r0, #0
 800104c:	f000 fc72 	bl	8001934 <ssd1306_SetCursor>
                ssd1306_WriteString(msg.line1, Font_7x10, White);
 8001050:	4b27      	ldr	r3, [pc, #156]	@ (80010f0 <StartDisplayTask+0xf4>)
 8001052:	f107 000c 	add.w	r0, r7, #12
 8001056:	2201      	movs	r2, #1
 8001058:	9200      	str	r2, [sp, #0]
 800105a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800105c:	f000 fc44 	bl	80018e8 <ssd1306_WriteString>
                ssd1306_SetCursor(0, 16);
 8001060:	2110      	movs	r1, #16
 8001062:	2000      	movs	r0, #0
 8001064:	f000 fc66 	bl	8001934 <ssd1306_SetCursor>
                ssd1306_WriteString(msg.line2, Font_7x10, White);
 8001068:	4b21      	ldr	r3, [pc, #132]	@ (80010f0 <StartDisplayTask+0xf4>)
 800106a:	f107 020c 	add.w	r2, r7, #12
 800106e:	f102 0016 	add.w	r0, r2, #22
 8001072:	2201      	movs	r2, #1
 8001074:	9200      	str	r2, [sp, #0]
 8001076:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001078:	f000 fc36 	bl	80018e8 <ssd1306_WriteString>
                ssd1306_UpdateScreen();
 800107c:	f000 fb28 	bl	80016d0 <ssd1306_UpdateScreen>
                xSemaphoreGive(oledMutex);
 8001080:	4b1a      	ldr	r3, [pc, #104]	@ (80010ec <StartDisplayTask+0xf0>)
 8001082:	6818      	ldr	r0, [r3, #0]
 8001084:	2300      	movs	r3, #0
 8001086:	2200      	movs	r2, #0
 8001088:	2100      	movs	r1, #0
 800108a:	f008 f8c5 	bl	8009218 <xQueueGenericSend>
                msgEndTime = HAL_GetTick() + msg.duration_ms;
 800108e:	f000 fd01 	bl	8001a94 <HAL_GetTick>
 8001092:	4603      	mov	r3, r0
 8001094:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8001096:	4413      	add	r3, r2
 8001098:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }

        // Süre dolduysa ekranı temizle
        if (msgEndTime > 0 && HAL_GetTick() > msgEndTime) {
 800109a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800109c:	2b00      	cmp	r3, #0
 800109e:	d01c      	beq.n	80010da <StartDisplayTask+0xde>
 80010a0:	f000 fcf8 	bl	8001a94 <HAL_GetTick>
 80010a4:	4602      	mov	r2, r0
 80010a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d216      	bcs.n	80010da <StartDisplayTask+0xde>
            if (xSemaphoreTake(oledMutex, pdMS_TO_TICKS(100)) == pdTRUE) {
 80010ac:	4b0f      	ldr	r3, [pc, #60]	@ (80010ec <StartDisplayTask+0xf0>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2164      	movs	r1, #100	@ 0x64
 80010b2:	4618      	mov	r0, r3
 80010b4:	f008 fb32 	bl	800971c <xQueueSemaphoreTake>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d10d      	bne.n	80010da <StartDisplayTask+0xde>
                ssd1306_Fill(Black);
 80010be:	2000      	movs	r0, #0
 80010c0:	f000 faee 	bl	80016a0 <ssd1306_Fill>
                ssd1306_UpdateScreen();
 80010c4:	f000 fb04 	bl	80016d0 <ssd1306_UpdateScreen>
                xSemaphoreGive(oledMutex);
 80010c8:	4b08      	ldr	r3, [pc, #32]	@ (80010ec <StartDisplayTask+0xf0>)
 80010ca:	6818      	ldr	r0, [r3, #0]
 80010cc:	2300      	movs	r3, #0
 80010ce:	2200      	movs	r2, #0
 80010d0:	2100      	movs	r1, #0
 80010d2:	f008 f8a1 	bl	8009218 <xQueueGenericSend>
                msgEndTime = 0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
        vTaskDelayUntil(&xLastWakeTime, xFrequency);
 80010da:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80010de:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80010e0:	4618      	mov	r0, r3
 80010e2:	f008 ff57 	bl	8009f94 <vTaskDelayUntil>
        if (xQueueReceive(oledQueue, &msg, 0) == pdPASS) {
 80010e6:	e798      	b.n	800101a <StartDisplayTask+0x1e>
 80010e8:	200001e8 	.word	0x200001e8
 80010ec:	2000016c 	.word	0x2000016c
 80010f0:	0800e3e4 	.word	0x0800e3e4

080010f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010f8:	b672      	cpsid	i
}
 80010fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010fc:	bf00      	nop
 80010fe:	e7fd      	b.n	80010fc <Error_Handler+0x8>

08001100 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	607b      	str	r3, [r7, #4]
 800110a:	4b12      	ldr	r3, [pc, #72]	@ (8001154 <HAL_MspInit+0x54>)
 800110c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800110e:	4a11      	ldr	r2, [pc, #68]	@ (8001154 <HAL_MspInit+0x54>)
 8001110:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001114:	6453      	str	r3, [r2, #68]	@ 0x44
 8001116:	4b0f      	ldr	r3, [pc, #60]	@ (8001154 <HAL_MspInit+0x54>)
 8001118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800111a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800111e:	607b      	str	r3, [r7, #4]
 8001120:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	603b      	str	r3, [r7, #0]
 8001126:	4b0b      	ldr	r3, [pc, #44]	@ (8001154 <HAL_MspInit+0x54>)
 8001128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800112a:	4a0a      	ldr	r2, [pc, #40]	@ (8001154 <HAL_MspInit+0x54>)
 800112c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001130:	6413      	str	r3, [r2, #64]	@ 0x40
 8001132:	4b08      	ldr	r3, [pc, #32]	@ (8001154 <HAL_MspInit+0x54>)
 8001134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001136:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800113a:	603b      	str	r3, [r7, #0]
 800113c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800113e:	2200      	movs	r2, #0
 8001140:	210f      	movs	r1, #15
 8001142:	f06f 0001 	mvn.w	r0, #1
 8001146:	f000 fdb0 	bl	8001caa <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40023800 	.word	0x40023800

08001158 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b08a      	sub	sp, #40	@ 0x28
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001160:	f107 0314 	add.w	r3, r7, #20
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a19      	ldr	r2, [pc, #100]	@ (80011dc <HAL_I2C_MspInit+0x84>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d12c      	bne.n	80011d4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	613b      	str	r3, [r7, #16]
 800117e:	4b18      	ldr	r3, [pc, #96]	@ (80011e0 <HAL_I2C_MspInit+0x88>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001182:	4a17      	ldr	r2, [pc, #92]	@ (80011e0 <HAL_I2C_MspInit+0x88>)
 8001184:	f043 0302 	orr.w	r3, r3, #2
 8001188:	6313      	str	r3, [r2, #48]	@ 0x30
 800118a:	4b15      	ldr	r3, [pc, #84]	@ (80011e0 <HAL_I2C_MspInit+0x88>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118e:	f003 0302 	and.w	r3, r3, #2
 8001192:	613b      	str	r3, [r7, #16]
 8001194:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001196:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800119a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800119c:	2312      	movs	r3, #18
 800119e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011a0:	2301      	movs	r3, #1
 80011a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a4:	2300      	movs	r3, #0
 80011a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011a8:	2304      	movs	r3, #4
 80011aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	4619      	mov	r1, r3
 80011b2:	480c      	ldr	r0, [pc, #48]	@ (80011e4 <HAL_I2C_MspInit+0x8c>)
 80011b4:	f000 fdb0 	bl	8001d18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011b8:	2300      	movs	r3, #0
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	4b08      	ldr	r3, [pc, #32]	@ (80011e0 <HAL_I2C_MspInit+0x88>)
 80011be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c0:	4a07      	ldr	r2, [pc, #28]	@ (80011e0 <HAL_I2C_MspInit+0x88>)
 80011c2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80011c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80011c8:	4b05      	ldr	r3, [pc, #20]	@ (80011e0 <HAL_I2C_MspInit+0x88>)
 80011ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80011d4:	bf00      	nop
 80011d6:	3728      	adds	r7, #40	@ 0x28
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40005400 	.word	0x40005400
 80011e0:	40023800 	.word	0x40023800
 80011e4:	40020400 	.word	0x40020400

080011e8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08e      	sub	sp, #56	@ 0x38
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a59      	ldr	r2, [pc, #356]	@ (800136c <HAL_I2S_MspInit+0x184>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d15b      	bne.n	80012c2 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	623b      	str	r3, [r7, #32]
 800120e:	4b58      	ldr	r3, [pc, #352]	@ (8001370 <HAL_I2S_MspInit+0x188>)
 8001210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001212:	4a57      	ldr	r2, [pc, #348]	@ (8001370 <HAL_I2S_MspInit+0x188>)
 8001214:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001218:	6413      	str	r3, [r2, #64]	@ 0x40
 800121a:	4b55      	ldr	r3, [pc, #340]	@ (8001370 <HAL_I2S_MspInit+0x188>)
 800121c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800121e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001222:	623b      	str	r3, [r7, #32]
 8001224:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	61fb      	str	r3, [r7, #28]
 800122a:	4b51      	ldr	r3, [pc, #324]	@ (8001370 <HAL_I2S_MspInit+0x188>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122e:	4a50      	ldr	r2, [pc, #320]	@ (8001370 <HAL_I2S_MspInit+0x188>)
 8001230:	f043 0304 	orr.w	r3, r3, #4
 8001234:	6313      	str	r3, [r2, #48]	@ 0x30
 8001236:	4b4e      	ldr	r3, [pc, #312]	@ (8001370 <HAL_I2S_MspInit+0x188>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123a:	f003 0304 	and.w	r3, r3, #4
 800123e:	61fb      	str	r3, [r7, #28]
 8001240:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	61bb      	str	r3, [r7, #24]
 8001246:	4b4a      	ldr	r3, [pc, #296]	@ (8001370 <HAL_I2S_MspInit+0x188>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124a:	4a49      	ldr	r2, [pc, #292]	@ (8001370 <HAL_I2S_MspInit+0x188>)
 800124c:	f043 0302 	orr.w	r3, r3, #2
 8001250:	6313      	str	r3, [r2, #48]	@ 0x30
 8001252:	4b47      	ldr	r3, [pc, #284]	@ (8001370 <HAL_I2S_MspInit+0x188>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	61bb      	str	r3, [r7, #24]
 800125c:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800125e:	2304      	movs	r3, #4
 8001260:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001262:	2302      	movs	r3, #2
 8001264:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126a:	2300      	movs	r3, #0
 800126c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 800126e:	2306      	movs	r3, #6
 8001270:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001272:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001276:	4619      	mov	r1, r3
 8001278:	483e      	ldr	r0, [pc, #248]	@ (8001374 <HAL_I2S_MspInit+0x18c>)
 800127a:	f000 fd4d 	bl	8001d18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800127e:	2308      	movs	r3, #8
 8001280:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001282:	2302      	movs	r3, #2
 8001284:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128a:	2300      	movs	r3, #0
 800128c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800128e:	2305      	movs	r3, #5
 8001290:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001292:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001296:	4619      	mov	r1, r3
 8001298:	4836      	ldr	r0, [pc, #216]	@ (8001374 <HAL_I2S_MspInit+0x18c>)
 800129a:	f000 fd3d 	bl	8001d18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 800129e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80012a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a4:	2302      	movs	r3, #2
 80012a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ac:	2300      	movs	r3, #0
 80012ae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012b0:	2305      	movs	r3, #5
 80012b2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012b8:	4619      	mov	r1, r3
 80012ba:	482f      	ldr	r0, [pc, #188]	@ (8001378 <HAL_I2S_MspInit+0x190>)
 80012bc:	f000 fd2c 	bl	8001d18 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80012c0:	e04f      	b.n	8001362 <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a2d      	ldr	r2, [pc, #180]	@ (800137c <HAL_I2S_MspInit+0x194>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d14a      	bne.n	8001362 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]
 80012d0:	4b27      	ldr	r3, [pc, #156]	@ (8001370 <HAL_I2S_MspInit+0x188>)
 80012d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d4:	4a26      	ldr	r2, [pc, #152]	@ (8001370 <HAL_I2S_MspInit+0x188>)
 80012d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80012da:	6413      	str	r3, [r2, #64]	@ 0x40
 80012dc:	4b24      	ldr	r3, [pc, #144]	@ (8001370 <HAL_I2S_MspInit+0x188>)
 80012de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80012e4:	617b      	str	r3, [r7, #20]
 80012e6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e8:	2300      	movs	r3, #0
 80012ea:	613b      	str	r3, [r7, #16]
 80012ec:	4b20      	ldr	r3, [pc, #128]	@ (8001370 <HAL_I2S_MspInit+0x188>)
 80012ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f0:	4a1f      	ldr	r2, [pc, #124]	@ (8001370 <HAL_I2S_MspInit+0x188>)
 80012f2:	f043 0301 	orr.w	r3, r3, #1
 80012f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80012f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001370 <HAL_I2S_MspInit+0x188>)
 80012fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fc:	f003 0301 	and.w	r3, r3, #1
 8001300:	613b      	str	r3, [r7, #16]
 8001302:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001304:	2300      	movs	r3, #0
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	4b19      	ldr	r3, [pc, #100]	@ (8001370 <HAL_I2S_MspInit+0x188>)
 800130a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130c:	4a18      	ldr	r2, [pc, #96]	@ (8001370 <HAL_I2S_MspInit+0x188>)
 800130e:	f043 0304 	orr.w	r3, r3, #4
 8001312:	6313      	str	r3, [r2, #48]	@ 0x30
 8001314:	4b16      	ldr	r3, [pc, #88]	@ (8001370 <HAL_I2S_MspInit+0x188>)
 8001316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001318:	f003 0304 	and.w	r3, r3, #4
 800131c:	60fb      	str	r3, [r7, #12]
 800131e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001320:	2310      	movs	r3, #16
 8001322:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001324:	2302      	movs	r3, #2
 8001326:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132c:	2300      	movs	r3, #0
 800132e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001330:	2306      	movs	r3, #6
 8001332:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001334:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001338:	4619      	mov	r1, r3
 800133a:	4811      	ldr	r0, [pc, #68]	@ (8001380 <HAL_I2S_MspInit+0x198>)
 800133c:	f000 fcec 	bl	8001d18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001340:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8001344:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001346:	2302      	movs	r3, #2
 8001348:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	2300      	movs	r3, #0
 800134c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134e:	2300      	movs	r3, #0
 8001350:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001352:	2306      	movs	r3, #6
 8001354:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001356:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800135a:	4619      	mov	r1, r3
 800135c:	4805      	ldr	r0, [pc, #20]	@ (8001374 <HAL_I2S_MspInit+0x18c>)
 800135e:	f000 fcdb 	bl	8001d18 <HAL_GPIO_Init>
}
 8001362:	bf00      	nop
 8001364:	3738      	adds	r7, #56	@ 0x38
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40003800 	.word	0x40003800
 8001370:	40023800 	.word	0x40023800
 8001374:	40020800 	.word	0x40020800
 8001378:	40020400 	.word	0x40020400
 800137c:	40003c00 	.word	0x40003c00
 8001380:	40020000 	.word	0x40020000

08001384 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b08a      	sub	sp, #40	@ 0x28
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138c:	f107 0314 	add.w	r3, r7, #20
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	609a      	str	r2, [r3, #8]
 8001398:	60da      	str	r2, [r3, #12]
 800139a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a19      	ldr	r2, [pc, #100]	@ (8001408 <HAL_SPI_MspInit+0x84>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d12b      	bne.n	80013fe <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	613b      	str	r3, [r7, #16]
 80013aa:	4b18      	ldr	r3, [pc, #96]	@ (800140c <HAL_SPI_MspInit+0x88>)
 80013ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ae:	4a17      	ldr	r2, [pc, #92]	@ (800140c <HAL_SPI_MspInit+0x88>)
 80013b0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80013b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80013b6:	4b15      	ldr	r3, [pc, #84]	@ (800140c <HAL_SPI_MspInit+0x88>)
 80013b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013be:	613b      	str	r3, [r7, #16]
 80013c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	4b11      	ldr	r3, [pc, #68]	@ (800140c <HAL_SPI_MspInit+0x88>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ca:	4a10      	ldr	r2, [pc, #64]	@ (800140c <HAL_SPI_MspInit+0x88>)
 80013cc:	f043 0301 	orr.w	r3, r3, #1
 80013d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013d2:	4b0e      	ldr	r3, [pc, #56]	@ (800140c <HAL_SPI_MspInit+0x88>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80013de:	23e0      	movs	r3, #224	@ 0xe0
 80013e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e2:	2302      	movs	r3, #2
 80013e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ea:	2303      	movs	r3, #3
 80013ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013ee:	2305      	movs	r3, #5
 80013f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f2:	f107 0314 	add.w	r3, r7, #20
 80013f6:	4619      	mov	r1, r3
 80013f8:	4805      	ldr	r0, [pc, #20]	@ (8001410 <HAL_SPI_MspInit+0x8c>)
 80013fa:	f000 fc8d 	bl	8001d18 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80013fe:	bf00      	nop
 8001400:	3728      	adds	r7, #40	@ 0x28
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40013000 	.word	0x40013000
 800140c:	40023800 	.word	0x40023800
 8001410:	40020000 	.word	0x40020000

08001414 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001418:	bf00      	nop
 800141a:	e7fd      	b.n	8001418 <NMI_Handler+0x4>

0800141c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001420:	bf00      	nop
 8001422:	e7fd      	b.n	8001420 <HardFault_Handler+0x4>

08001424 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001428:	bf00      	nop
 800142a:	e7fd      	b.n	8001428 <MemManage_Handler+0x4>

0800142c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001430:	bf00      	nop
 8001432:	e7fd      	b.n	8001430 <BusFault_Handler+0x4>

08001434 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001438:	bf00      	nop
 800143a:	e7fd      	b.n	8001438 <UsageFault_Handler+0x4>

0800143c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr

0800144a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800144e:	f000 fb0d 	bl	8001a6c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001452:	f009 faa3 	bl	800a99c <xTaskGetSchedulerState>
 8001456:	4603      	mov	r3, r0
 8001458:	2b01      	cmp	r3, #1
 800145a:	d001      	beq.n	8001460 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800145c:	f00a f99c 	bl	800b798 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001460:	bf00      	nop
 8001462:	bd80      	pop	{r7, pc}

08001464 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001468:	4802      	ldr	r0, [pc, #8]	@ (8001474 <OTG_FS_IRQHandler+0x10>)
 800146a:	f002 f89f 	bl	80035ac <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	200063bc 	.word	0x200063bc

08001478 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001480:	4a14      	ldr	r2, [pc, #80]	@ (80014d4 <_sbrk+0x5c>)
 8001482:	4b15      	ldr	r3, [pc, #84]	@ (80014d8 <_sbrk+0x60>)
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800148c:	4b13      	ldr	r3, [pc, #76]	@ (80014dc <_sbrk+0x64>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d102      	bne.n	800149a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001494:	4b11      	ldr	r3, [pc, #68]	@ (80014dc <_sbrk+0x64>)
 8001496:	4a12      	ldr	r2, [pc, #72]	@ (80014e0 <_sbrk+0x68>)
 8001498:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800149a:	4b10      	ldr	r3, [pc, #64]	@ (80014dc <_sbrk+0x64>)
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4413      	add	r3, r2
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d207      	bcs.n	80014b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014a8:	f00b f9d8 	bl	800c85c <__errno>
 80014ac:	4603      	mov	r3, r0
 80014ae:	220c      	movs	r2, #12
 80014b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014b2:	f04f 33ff 	mov.w	r3, #4294967295
 80014b6:	e009      	b.n	80014cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014b8:	4b08      	ldr	r3, [pc, #32]	@ (80014dc <_sbrk+0x64>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014be:	4b07      	ldr	r3, [pc, #28]	@ (80014dc <_sbrk+0x64>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4413      	add	r3, r2
 80014c6:	4a05      	ldr	r2, [pc, #20]	@ (80014dc <_sbrk+0x64>)
 80014c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014ca:	68fb      	ldr	r3, [r7, #12]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3718      	adds	r7, #24
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	20020000 	.word	0x20020000
 80014d8:	00000400 	.word	0x00000400
 80014dc:	2000037c 	.word	0x2000037c
 80014e0:	20006c08 	.word	0x20006c08

080014e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014e8:	4b06      	ldr	r3, [pc, #24]	@ (8001504 <SystemInit+0x20>)
 80014ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014ee:	4a05      	ldr	r2, [pc, #20]	@ (8001504 <SystemInit+0x20>)
 80014f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	e000ed00 	.word	0xe000ed00

08001508 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001508:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001540 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800150c:	f7ff ffea 	bl	80014e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001510:	480c      	ldr	r0, [pc, #48]	@ (8001544 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001512:	490d      	ldr	r1, [pc, #52]	@ (8001548 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001514:	4a0d      	ldr	r2, [pc, #52]	@ (800154c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001516:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001518:	e002      	b.n	8001520 <LoopCopyDataInit>

0800151a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800151a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800151c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800151e:	3304      	adds	r3, #4

08001520 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001520:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001522:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001524:	d3f9      	bcc.n	800151a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001526:	4a0a      	ldr	r2, [pc, #40]	@ (8001550 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001528:	4c0a      	ldr	r4, [pc, #40]	@ (8001554 <LoopFillZerobss+0x22>)
  movs r3, #0
 800152a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800152c:	e001      	b.n	8001532 <LoopFillZerobss>

0800152e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800152e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001530:	3204      	adds	r2, #4

08001532 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001532:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001534:	d3fb      	bcc.n	800152e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001536:	f00b f997 	bl	800c868 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800153a:	f7ff f869 	bl	8000610 <main>
  bx  lr    
 800153e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001540:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001544:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001548:	20000150 	.word	0x20000150
  ldr r2, =_sidata
 800154c:	0800e550 	.word	0x0800e550
  ldr r2, =_sbss
 8001550:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8001554:	20006c08 	.word	0x20006c08

08001558 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001558:	e7fe      	b.n	8001558 <ADC_IRQHandler>

0800155a <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800155e:	bf00      	nop
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af04      	add	r7, sp, #16
 800156e:	4603      	mov	r3, r0
 8001570:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001572:	f04f 33ff 	mov.w	r3, #4294967295
 8001576:	9302      	str	r3, [sp, #8]
 8001578:	2301      	movs	r3, #1
 800157a:	9301      	str	r3, [sp, #4]
 800157c:	1dfb      	adds	r3, r7, #7
 800157e:	9300      	str	r3, [sp, #0]
 8001580:	2301      	movs	r3, #1
 8001582:	2200      	movs	r2, #0
 8001584:	2178      	movs	r1, #120	@ 0x78
 8001586:	4803      	ldr	r0, [pc, #12]	@ (8001594 <ssd1306_WriteCommand+0x2c>)
 8001588:	f000 fec2 	bl	8002310 <HAL_I2C_Mem_Write>
}
 800158c:	bf00      	nop
 800158e:	3708      	adds	r7, #8
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	20000230 	.word	0x20000230

08001598 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af04      	add	r7, sp, #16
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	f04f 32ff 	mov.w	r2, #4294967295
 80015aa:	9202      	str	r2, [sp, #8]
 80015ac:	9301      	str	r3, [sp, #4]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	9300      	str	r3, [sp, #0]
 80015b2:	2301      	movs	r3, #1
 80015b4:	2240      	movs	r2, #64	@ 0x40
 80015b6:	2178      	movs	r1, #120	@ 0x78
 80015b8:	4803      	ldr	r0, [pc, #12]	@ (80015c8 <ssd1306_WriteData+0x30>)
 80015ba:	f000 fea9 	bl	8002310 <HAL_I2C_Mem_Write>
}
 80015be:	bf00      	nop
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20000230 	.word	0x20000230

080015cc <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80015d0:	f7ff ffc3 	bl	800155a <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80015d4:	2064      	movs	r0, #100	@ 0x64
 80015d6:	f000 fa69 	bl	8001aac <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80015da:	2000      	movs	r0, #0
 80015dc:	f000 f9d6 	bl	800198c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80015e0:	2020      	movs	r0, #32
 80015e2:	f7ff ffc1 	bl	8001568 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80015e6:	2000      	movs	r0, #0
 80015e8:	f7ff ffbe 	bl	8001568 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80015ec:	20b0      	movs	r0, #176	@ 0xb0
 80015ee:	f7ff ffbb 	bl	8001568 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80015f2:	20c8      	movs	r0, #200	@ 0xc8
 80015f4:	f7ff ffb8 	bl	8001568 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80015f8:	2000      	movs	r0, #0
 80015fa:	f7ff ffb5 	bl	8001568 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80015fe:	2010      	movs	r0, #16
 8001600:	f7ff ffb2 	bl	8001568 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001604:	2040      	movs	r0, #64	@ 0x40
 8001606:	f7ff ffaf 	bl	8001568 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800160a:	20ff      	movs	r0, #255	@ 0xff
 800160c:	f000 f9aa 	bl	8001964 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001610:	20a1      	movs	r0, #161	@ 0xa1
 8001612:	f7ff ffa9 	bl	8001568 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001616:	20a6      	movs	r0, #166	@ 0xa6
 8001618:	f7ff ffa6 	bl	8001568 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800161c:	20a8      	movs	r0, #168	@ 0xa8
 800161e:	f7ff ffa3 	bl	8001568 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 8001622:	201f      	movs	r0, #31
 8001624:	f7ff ffa0 	bl	8001568 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001628:	20a4      	movs	r0, #164	@ 0xa4
 800162a:	f7ff ff9d 	bl	8001568 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800162e:	20d3      	movs	r0, #211	@ 0xd3
 8001630:	f7ff ff9a 	bl	8001568 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001634:	2000      	movs	r0, #0
 8001636:	f7ff ff97 	bl	8001568 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800163a:	20d5      	movs	r0, #213	@ 0xd5
 800163c:	f7ff ff94 	bl	8001568 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001640:	20f0      	movs	r0, #240	@ 0xf0
 8001642:	f7ff ff91 	bl	8001568 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001646:	20d9      	movs	r0, #217	@ 0xd9
 8001648:	f7ff ff8e 	bl	8001568 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800164c:	2022      	movs	r0, #34	@ 0x22
 800164e:	f7ff ff8b 	bl	8001568 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001652:	20da      	movs	r0, #218	@ 0xda
 8001654:	f7ff ff88 	bl	8001568 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 8001658:	2002      	movs	r0, #2
 800165a:	f7ff ff85 	bl	8001568 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800165e:	20db      	movs	r0, #219	@ 0xdb
 8001660:	f7ff ff82 	bl	8001568 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001664:	2020      	movs	r0, #32
 8001666:	f7ff ff7f 	bl	8001568 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800166a:	208d      	movs	r0, #141	@ 0x8d
 800166c:	f7ff ff7c 	bl	8001568 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001670:	2014      	movs	r0, #20
 8001672:	f7ff ff79 	bl	8001568 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001676:	2001      	movs	r0, #1
 8001678:	f000 f988 	bl	800198c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800167c:	2000      	movs	r0, #0
 800167e:	f000 f80f 	bl	80016a0 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001682:	f000 f825 	bl	80016d0 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001686:	4b05      	ldr	r3, [pc, #20]	@ (800169c <ssd1306_Init+0xd0>)
 8001688:	2200      	movs	r2, #0
 800168a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800168c:	4b03      	ldr	r3, [pc, #12]	@ (800169c <ssd1306_Init+0xd0>)
 800168e:	2200      	movs	r2, #0
 8001690:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001692:	4b02      	ldr	r3, [pc, #8]	@ (800169c <ssd1306_Init+0xd0>)
 8001694:	2201      	movs	r2, #1
 8001696:	711a      	strb	r2, [r3, #4]
}
 8001698:	bf00      	nop
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20000580 	.word	0x20000580

080016a0 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d101      	bne.n	80016b4 <ssd1306_Fill+0x14>
 80016b0:	2300      	movs	r3, #0
 80016b2:	e000      	b.n	80016b6 <ssd1306_Fill+0x16>
 80016b4:	23ff      	movs	r3, #255	@ 0xff
 80016b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016ba:	4619      	mov	r1, r3
 80016bc:	4803      	ldr	r0, [pc, #12]	@ (80016cc <ssd1306_Fill+0x2c>)
 80016be:	f00b f8a1 	bl	800c804 <memset>
}
 80016c2:	bf00      	nop
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20000380 	.word	0x20000380

080016d0 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80016d6:	2300      	movs	r3, #0
 80016d8:	71fb      	strb	r3, [r7, #7]
 80016da:	e016      	b.n	800170a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80016dc:	79fb      	ldrb	r3, [r7, #7]
 80016de:	3b50      	subs	r3, #80	@ 0x50
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff ff40 	bl	8001568 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80016e8:	2000      	movs	r0, #0
 80016ea:	f7ff ff3d 	bl	8001568 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80016ee:	2010      	movs	r0, #16
 80016f0:	f7ff ff3a 	bl	8001568 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80016f4:	79fb      	ldrb	r3, [r7, #7]
 80016f6:	01db      	lsls	r3, r3, #7
 80016f8:	4a08      	ldr	r2, [pc, #32]	@ (800171c <ssd1306_UpdateScreen+0x4c>)
 80016fa:	4413      	add	r3, r2
 80016fc:	2180      	movs	r1, #128	@ 0x80
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff ff4a 	bl	8001598 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001704:	79fb      	ldrb	r3, [r7, #7]
 8001706:	3301      	adds	r3, #1
 8001708:	71fb      	strb	r3, [r7, #7]
 800170a:	79fb      	ldrb	r3, [r7, #7]
 800170c:	2b03      	cmp	r3, #3
 800170e:	d9e5      	bls.n	80016dc <ssd1306_UpdateScreen+0xc>
    }
}
 8001710:	bf00      	nop
 8001712:	bf00      	nop
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	20000380 	.word	0x20000380

08001720 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	71fb      	strb	r3, [r7, #7]
 800172a:	460b      	mov	r3, r1
 800172c:	71bb      	strb	r3, [r7, #6]
 800172e:	4613      	mov	r3, r2
 8001730:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001736:	2b00      	cmp	r3, #0
 8001738:	db3d      	blt.n	80017b6 <ssd1306_DrawPixel+0x96>
 800173a:	79bb      	ldrb	r3, [r7, #6]
 800173c:	2b1f      	cmp	r3, #31
 800173e:	d83a      	bhi.n	80017b6 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001740:	797b      	ldrb	r3, [r7, #5]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d11a      	bne.n	800177c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001746:	79fa      	ldrb	r2, [r7, #7]
 8001748:	79bb      	ldrb	r3, [r7, #6]
 800174a:	08db      	lsrs	r3, r3, #3
 800174c:	b2d8      	uxtb	r0, r3
 800174e:	4603      	mov	r3, r0
 8001750:	01db      	lsls	r3, r3, #7
 8001752:	4413      	add	r3, r2
 8001754:	4a1b      	ldr	r2, [pc, #108]	@ (80017c4 <ssd1306_DrawPixel+0xa4>)
 8001756:	5cd3      	ldrb	r3, [r2, r3]
 8001758:	b25a      	sxtb	r2, r3
 800175a:	79bb      	ldrb	r3, [r7, #6]
 800175c:	f003 0307 	and.w	r3, r3, #7
 8001760:	2101      	movs	r1, #1
 8001762:	fa01 f303 	lsl.w	r3, r1, r3
 8001766:	b25b      	sxtb	r3, r3
 8001768:	4313      	orrs	r3, r2
 800176a:	b259      	sxtb	r1, r3
 800176c:	79fa      	ldrb	r2, [r7, #7]
 800176e:	4603      	mov	r3, r0
 8001770:	01db      	lsls	r3, r3, #7
 8001772:	4413      	add	r3, r2
 8001774:	b2c9      	uxtb	r1, r1
 8001776:	4a13      	ldr	r2, [pc, #76]	@ (80017c4 <ssd1306_DrawPixel+0xa4>)
 8001778:	54d1      	strb	r1, [r2, r3]
 800177a:	e01d      	b.n	80017b8 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800177c:	79fa      	ldrb	r2, [r7, #7]
 800177e:	79bb      	ldrb	r3, [r7, #6]
 8001780:	08db      	lsrs	r3, r3, #3
 8001782:	b2d8      	uxtb	r0, r3
 8001784:	4603      	mov	r3, r0
 8001786:	01db      	lsls	r3, r3, #7
 8001788:	4413      	add	r3, r2
 800178a:	4a0e      	ldr	r2, [pc, #56]	@ (80017c4 <ssd1306_DrawPixel+0xa4>)
 800178c:	5cd3      	ldrb	r3, [r2, r3]
 800178e:	b25a      	sxtb	r2, r3
 8001790:	79bb      	ldrb	r3, [r7, #6]
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	2101      	movs	r1, #1
 8001798:	fa01 f303 	lsl.w	r3, r1, r3
 800179c:	b25b      	sxtb	r3, r3
 800179e:	43db      	mvns	r3, r3
 80017a0:	b25b      	sxtb	r3, r3
 80017a2:	4013      	ands	r3, r2
 80017a4:	b259      	sxtb	r1, r3
 80017a6:	79fa      	ldrb	r2, [r7, #7]
 80017a8:	4603      	mov	r3, r0
 80017aa:	01db      	lsls	r3, r3, #7
 80017ac:	4413      	add	r3, r2
 80017ae:	b2c9      	uxtb	r1, r1
 80017b0:	4a04      	ldr	r2, [pc, #16]	@ (80017c4 <ssd1306_DrawPixel+0xa4>)
 80017b2:	54d1      	strb	r1, [r2, r3]
 80017b4:	e000      	b.n	80017b8 <ssd1306_DrawPixel+0x98>
        return;
 80017b6:	bf00      	nop
    }
}
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	20000380 	.word	0x20000380

080017c8 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80017c8:	b590      	push	{r4, r7, lr}
 80017ca:	b089      	sub	sp, #36	@ 0x24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4604      	mov	r4, r0
 80017d0:	4638      	mov	r0, r7
 80017d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80017d6:	4623      	mov	r3, r4
 80017d8:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80017da:	7bfb      	ldrb	r3, [r7, #15]
 80017dc:	2b1f      	cmp	r3, #31
 80017de:	d902      	bls.n	80017e6 <ssd1306_WriteChar+0x1e>
 80017e0:	7bfb      	ldrb	r3, [r7, #15]
 80017e2:	2b7e      	cmp	r3, #126	@ 0x7e
 80017e4:	d901      	bls.n	80017ea <ssd1306_WriteChar+0x22>
        return 0;
 80017e6:	2300      	movs	r3, #0
 80017e8:	e077      	b.n	80018da <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80017ea:	4b3e      	ldr	r3, [pc, #248]	@ (80018e4 <ssd1306_WriteChar+0x11c>)
 80017ec:	881b      	ldrh	r3, [r3, #0]
 80017ee:	461a      	mov	r2, r3
 80017f0:	783b      	ldrb	r3, [r7, #0]
 80017f2:	4413      	add	r3, r2
 80017f4:	2b80      	cmp	r3, #128	@ 0x80
 80017f6:	dc06      	bgt.n	8001806 <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 80017f8:	4b3a      	ldr	r3, [pc, #232]	@ (80018e4 <ssd1306_WriteChar+0x11c>)
 80017fa:	885b      	ldrh	r3, [r3, #2]
 80017fc:	461a      	mov	r2, r3
 80017fe:	787b      	ldrb	r3, [r7, #1]
 8001800:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8001802:	2b20      	cmp	r3, #32
 8001804:	dd01      	ble.n	800180a <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 8001806:	2300      	movs	r3, #0
 8001808:	e067      	b.n	80018da <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 800180a:	2300      	movs	r3, #0
 800180c:	61fb      	str	r3, [r7, #28]
 800180e:	e04e      	b.n	80018ae <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	7bfb      	ldrb	r3, [r7, #15]
 8001814:	3b20      	subs	r3, #32
 8001816:	7879      	ldrb	r1, [r7, #1]
 8001818:	fb01 f303 	mul.w	r3, r1, r3
 800181c:	4619      	mov	r1, r3
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	440b      	add	r3, r1
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	4413      	add	r3, r2
 8001826:	881b      	ldrh	r3, [r3, #0]
 8001828:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 800182a:	2300      	movs	r3, #0
 800182c:	61bb      	str	r3, [r7, #24]
 800182e:	e036      	b.n	800189e <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8001830:	697a      	ldr	r2, [r7, #20]
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d013      	beq.n	8001868 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001840:	4b28      	ldr	r3, [pc, #160]	@ (80018e4 <ssd1306_WriteChar+0x11c>)
 8001842:	881b      	ldrh	r3, [r3, #0]
 8001844:	b2da      	uxtb	r2, r3
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	b2db      	uxtb	r3, r3
 800184a:	4413      	add	r3, r2
 800184c:	b2d8      	uxtb	r0, r3
 800184e:	4b25      	ldr	r3, [pc, #148]	@ (80018e4 <ssd1306_WriteChar+0x11c>)
 8001850:	885b      	ldrh	r3, [r3, #2]
 8001852:	b2da      	uxtb	r2, r3
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	b2db      	uxtb	r3, r3
 8001858:	4413      	add	r3, r2
 800185a:	b2db      	uxtb	r3, r3
 800185c:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001860:	4619      	mov	r1, r3
 8001862:	f7ff ff5d 	bl	8001720 <ssd1306_DrawPixel>
 8001866:	e017      	b.n	8001898 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001868:	4b1e      	ldr	r3, [pc, #120]	@ (80018e4 <ssd1306_WriteChar+0x11c>)
 800186a:	881b      	ldrh	r3, [r3, #0]
 800186c:	b2da      	uxtb	r2, r3
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	b2db      	uxtb	r3, r3
 8001872:	4413      	add	r3, r2
 8001874:	b2d8      	uxtb	r0, r3
 8001876:	4b1b      	ldr	r3, [pc, #108]	@ (80018e4 <ssd1306_WriteChar+0x11c>)
 8001878:	885b      	ldrh	r3, [r3, #2]
 800187a:	b2da      	uxtb	r2, r3
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	b2db      	uxtb	r3, r3
 8001880:	4413      	add	r3, r2
 8001882:	b2d9      	uxtb	r1, r3
 8001884:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001888:	2b00      	cmp	r3, #0
 800188a:	bf0c      	ite	eq
 800188c:	2301      	moveq	r3, #1
 800188e:	2300      	movne	r3, #0
 8001890:	b2db      	uxtb	r3, r3
 8001892:	461a      	mov	r2, r3
 8001894:	f7ff ff44 	bl	8001720 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	3301      	adds	r3, #1
 800189c:	61bb      	str	r3, [r7, #24]
 800189e:	783b      	ldrb	r3, [r7, #0]
 80018a0:	461a      	mov	r2, r3
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d3c3      	bcc.n	8001830 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	3301      	adds	r3, #1
 80018ac:	61fb      	str	r3, [r7, #28]
 80018ae:	787b      	ldrb	r3, [r7, #1]
 80018b0:	461a      	mov	r2, r3
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d3ab      	bcc.n	8001810 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 80018b8:	4b0a      	ldr	r3, [pc, #40]	@ (80018e4 <ssd1306_WriteChar+0x11c>)
 80018ba:	881b      	ldrh	r3, [r3, #0]
 80018bc:	68ba      	ldr	r2, [r7, #8]
 80018be:	2a00      	cmp	r2, #0
 80018c0:	d005      	beq.n	80018ce <ssd1306_WriteChar+0x106>
 80018c2:	68b9      	ldr	r1, [r7, #8]
 80018c4:	7bfa      	ldrb	r2, [r7, #15]
 80018c6:	3a20      	subs	r2, #32
 80018c8:	440a      	add	r2, r1
 80018ca:	7812      	ldrb	r2, [r2, #0]
 80018cc:	e000      	b.n	80018d0 <ssd1306_WriteChar+0x108>
 80018ce:	783a      	ldrb	r2, [r7, #0]
 80018d0:	4413      	add	r3, r2
 80018d2:	b29a      	uxth	r2, r3
 80018d4:	4b03      	ldr	r3, [pc, #12]	@ (80018e4 <ssd1306_WriteChar+0x11c>)
 80018d6:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80018d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3724      	adds	r7, #36	@ 0x24
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd90      	pop	{r4, r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20000580 	.word	0x20000580

080018e8 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af02      	add	r7, sp, #8
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	4638      	mov	r0, r7
 80018f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 80018f6:	e013      	b.n	8001920 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	7818      	ldrb	r0, [r3, #0]
 80018fc:	7e3b      	ldrb	r3, [r7, #24]
 80018fe:	9300      	str	r3, [sp, #0]
 8001900:	463b      	mov	r3, r7
 8001902:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001904:	f7ff ff60 	bl	80017c8 <ssd1306_WriteChar>
 8001908:	4603      	mov	r3, r0
 800190a:	461a      	mov	r2, r3
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	429a      	cmp	r2, r3
 8001912:	d002      	beq.n	800191a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	e008      	b.n	800192c <ssd1306_WriteString+0x44>
        }
        str++;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	3301      	adds	r3, #1
 800191e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d1e7      	bne.n	80018f8 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	781b      	ldrb	r3, [r3, #0]
}
 800192c:	4618      	mov	r0, r3
 800192e:	3710      	adds	r7, #16
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	460a      	mov	r2, r1
 800193e:	71fb      	strb	r3, [r7, #7]
 8001940:	4613      	mov	r3, r2
 8001942:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001944:	79fb      	ldrb	r3, [r7, #7]
 8001946:	b29a      	uxth	r2, r3
 8001948:	4b05      	ldr	r3, [pc, #20]	@ (8001960 <ssd1306_SetCursor+0x2c>)
 800194a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800194c:	79bb      	ldrb	r3, [r7, #6]
 800194e:	b29a      	uxth	r2, r3
 8001950:	4b03      	ldr	r3, [pc, #12]	@ (8001960 <ssd1306_SetCursor+0x2c>)
 8001952:	805a      	strh	r2, [r3, #2]
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	20000580 	.word	0x20000580

08001964 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800196e:	2381      	movs	r3, #129	@ 0x81
 8001970:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001972:	7bfb      	ldrb	r3, [r7, #15]
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff fdf7 	bl	8001568 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800197a:	79fb      	ldrb	r3, [r7, #7]
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff fdf3 	bl	8001568 <ssd1306_WriteCommand>
}
 8001982:	bf00      	nop
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
	...

0800198c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001996:	79fb      	ldrb	r3, [r7, #7]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d005      	beq.n	80019a8 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800199c:	23af      	movs	r3, #175	@ 0xaf
 800199e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80019a0:	4b08      	ldr	r3, [pc, #32]	@ (80019c4 <ssd1306_SetDisplayOn+0x38>)
 80019a2:	2201      	movs	r2, #1
 80019a4:	715a      	strb	r2, [r3, #5]
 80019a6:	e004      	b.n	80019b2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80019a8:	23ae      	movs	r3, #174	@ 0xae
 80019aa:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80019ac:	4b05      	ldr	r3, [pc, #20]	@ (80019c4 <ssd1306_SetDisplayOn+0x38>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80019b2:	7bfb      	ldrb	r3, [r7, #15]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff fdd7 	bl	8001568 <ssd1306_WriteCommand>
}
 80019ba:	bf00      	nop
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20000580 	.word	0x20000580

080019c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001a08 <HAL_Init+0x40>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001a08 <HAL_Init+0x40>)
 80019d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001a08 <HAL_Init+0x40>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a0a      	ldr	r2, [pc, #40]	@ (8001a08 <HAL_Init+0x40>)
 80019de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019e4:	4b08      	ldr	r3, [pc, #32]	@ (8001a08 <HAL_Init+0x40>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a07      	ldr	r2, [pc, #28]	@ (8001a08 <HAL_Init+0x40>)
 80019ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019f0:	2003      	movs	r0, #3
 80019f2:	f000 f94f 	bl	8001c94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019f6:	200f      	movs	r0, #15
 80019f8:	f000 f808 	bl	8001a0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019fc:	f7ff fb80 	bl	8001100 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40023c00 	.word	0x40023c00

08001a0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a14:	4b12      	ldr	r3, [pc, #72]	@ (8001a60 <HAL_InitTick+0x54>)
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	4b12      	ldr	r3, [pc, #72]	@ (8001a64 <HAL_InitTick+0x58>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a22:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f000 f967 	bl	8001cfe <HAL_SYSTICK_Config>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e00e      	b.n	8001a58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2b0f      	cmp	r3, #15
 8001a3e:	d80a      	bhi.n	8001a56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a40:	2200      	movs	r2, #0
 8001a42:	6879      	ldr	r1, [r7, #4]
 8001a44:	f04f 30ff 	mov.w	r0, #4294967295
 8001a48:	f000 f92f 	bl	8001caa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a4c:	4a06      	ldr	r2, [pc, #24]	@ (8001a68 <HAL_InitTick+0x5c>)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a52:	2300      	movs	r3, #0
 8001a54:	e000      	b.n	8001a58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3708      	adds	r7, #8
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	20000000 	.word	0x20000000
 8001a64:	20000008 	.word	0x20000008
 8001a68:	20000004 	.word	0x20000004

08001a6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a70:	4b06      	ldr	r3, [pc, #24]	@ (8001a8c <HAL_IncTick+0x20>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	461a      	mov	r2, r3
 8001a76:	4b06      	ldr	r3, [pc, #24]	@ (8001a90 <HAL_IncTick+0x24>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	4a04      	ldr	r2, [pc, #16]	@ (8001a90 <HAL_IncTick+0x24>)
 8001a7e:	6013      	str	r3, [r2, #0]
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	20000008 	.word	0x20000008
 8001a90:	20000588 	.word	0x20000588

08001a94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  return uwTick;
 8001a98:	4b03      	ldr	r3, [pc, #12]	@ (8001aa8 <HAL_GetTick+0x14>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	20000588 	.word	0x20000588

08001aac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ab4:	f7ff ffee 	bl	8001a94 <HAL_GetTick>
 8001ab8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ac4:	d005      	beq.n	8001ad2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ac6:	4b0a      	ldr	r3, [pc, #40]	@ (8001af0 <HAL_Delay+0x44>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	461a      	mov	r2, r3
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	4413      	add	r3, r2
 8001ad0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ad2:	bf00      	nop
 8001ad4:	f7ff ffde 	bl	8001a94 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	68fa      	ldr	r2, [r7, #12]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d8f7      	bhi.n	8001ad4 <HAL_Delay+0x28>
  {
  }
}
 8001ae4:	bf00      	nop
 8001ae6:	bf00      	nop
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	20000008 	.word	0x20000008

08001af4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f003 0307 	and.w	r3, r3, #7
 8001b02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b04:	4b0c      	ldr	r3, [pc, #48]	@ (8001b38 <__NVIC_SetPriorityGrouping+0x44>)
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b0a:	68ba      	ldr	r2, [r7, #8]
 8001b0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b10:	4013      	ands	r3, r2
 8001b12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b26:	4a04      	ldr	r2, [pc, #16]	@ (8001b38 <__NVIC_SetPriorityGrouping+0x44>)
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	60d3      	str	r3, [r2, #12]
}
 8001b2c:	bf00      	nop
 8001b2e:	3714      	adds	r7, #20
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	e000ed00 	.word	0xe000ed00

08001b3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b40:	4b04      	ldr	r3, [pc, #16]	@ (8001b54 <__NVIC_GetPriorityGrouping+0x18>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	0a1b      	lsrs	r3, r3, #8
 8001b46:	f003 0307 	and.w	r3, r3, #7
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	e000ed00 	.word	0xe000ed00

08001b58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	db0b      	blt.n	8001b82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b6a:	79fb      	ldrb	r3, [r7, #7]
 8001b6c:	f003 021f 	and.w	r2, r3, #31
 8001b70:	4907      	ldr	r1, [pc, #28]	@ (8001b90 <__NVIC_EnableIRQ+0x38>)
 8001b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b76:	095b      	lsrs	r3, r3, #5
 8001b78:	2001      	movs	r0, #1
 8001b7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	e000e100 	.word	0xe000e100

08001b94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	6039      	str	r1, [r7, #0]
 8001b9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	db0a      	blt.n	8001bbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	b2da      	uxtb	r2, r3
 8001bac:	490c      	ldr	r1, [pc, #48]	@ (8001be0 <__NVIC_SetPriority+0x4c>)
 8001bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb2:	0112      	lsls	r2, r2, #4
 8001bb4:	b2d2      	uxtb	r2, r2
 8001bb6:	440b      	add	r3, r1
 8001bb8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bbc:	e00a      	b.n	8001bd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	b2da      	uxtb	r2, r3
 8001bc2:	4908      	ldr	r1, [pc, #32]	@ (8001be4 <__NVIC_SetPriority+0x50>)
 8001bc4:	79fb      	ldrb	r3, [r7, #7]
 8001bc6:	f003 030f 	and.w	r3, r3, #15
 8001bca:	3b04      	subs	r3, #4
 8001bcc:	0112      	lsls	r2, r2, #4
 8001bce:	b2d2      	uxtb	r2, r2
 8001bd0:	440b      	add	r3, r1
 8001bd2:	761a      	strb	r2, [r3, #24]
}
 8001bd4:	bf00      	nop
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr
 8001be0:	e000e100 	.word	0xe000e100
 8001be4:	e000ed00 	.word	0xe000ed00

08001be8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b089      	sub	sp, #36	@ 0x24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	f1c3 0307 	rsb	r3, r3, #7
 8001c02:	2b04      	cmp	r3, #4
 8001c04:	bf28      	it	cs
 8001c06:	2304      	movcs	r3, #4
 8001c08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	3304      	adds	r3, #4
 8001c0e:	2b06      	cmp	r3, #6
 8001c10:	d902      	bls.n	8001c18 <NVIC_EncodePriority+0x30>
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	3b03      	subs	r3, #3
 8001c16:	e000      	b.n	8001c1a <NVIC_EncodePriority+0x32>
 8001c18:	2300      	movs	r3, #0
 8001c1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	43da      	mvns	r2, r3
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	401a      	ands	r2, r3
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c30:	f04f 31ff 	mov.w	r1, #4294967295
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3a:	43d9      	mvns	r1, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c40:	4313      	orrs	r3, r2
         );
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3724      	adds	r7, #36	@ 0x24
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
	...

08001c50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c60:	d301      	bcc.n	8001c66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c62:	2301      	movs	r3, #1
 8001c64:	e00f      	b.n	8001c86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c66:	4a0a      	ldr	r2, [pc, #40]	@ (8001c90 <SysTick_Config+0x40>)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c6e:	210f      	movs	r1, #15
 8001c70:	f04f 30ff 	mov.w	r0, #4294967295
 8001c74:	f7ff ff8e 	bl	8001b94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c78:	4b05      	ldr	r3, [pc, #20]	@ (8001c90 <SysTick_Config+0x40>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c7e:	4b04      	ldr	r3, [pc, #16]	@ (8001c90 <SysTick_Config+0x40>)
 8001c80:	2207      	movs	r2, #7
 8001c82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	e000e010 	.word	0xe000e010

08001c94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f7ff ff29 	bl	8001af4 <__NVIC_SetPriorityGrouping>
}
 8001ca2:	bf00      	nop
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b086      	sub	sp, #24
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	60b9      	str	r1, [r7, #8]
 8001cb4:	607a      	str	r2, [r7, #4]
 8001cb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cbc:	f7ff ff3e 	bl	8001b3c <__NVIC_GetPriorityGrouping>
 8001cc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	68b9      	ldr	r1, [r7, #8]
 8001cc6:	6978      	ldr	r0, [r7, #20]
 8001cc8:	f7ff ff8e 	bl	8001be8 <NVIC_EncodePriority>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cd2:	4611      	mov	r1, r2
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff ff5d 	bl	8001b94 <__NVIC_SetPriority>
}
 8001cda:	bf00      	nop
 8001cdc:	3718      	adds	r7, #24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b082      	sub	sp, #8
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	4603      	mov	r3, r0
 8001cea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff ff31 	bl	8001b58 <__NVIC_EnableIRQ>
}
 8001cf6:	bf00      	nop
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b082      	sub	sp, #8
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f7ff ffa2 	bl	8001c50 <SysTick_Config>
 8001d0c:	4603      	mov	r3, r0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
	...

08001d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b089      	sub	sp, #36	@ 0x24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d22:	2300      	movs	r3, #0
 8001d24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d26:	2300      	movs	r3, #0
 8001d28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d2e:	2300      	movs	r3, #0
 8001d30:	61fb      	str	r3, [r7, #28]
 8001d32:	e159      	b.n	8001fe8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d34:	2201      	movs	r2, #1
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	697a      	ldr	r2, [r7, #20]
 8001d44:	4013      	ands	r3, r2
 8001d46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	f040 8148 	bne.w	8001fe2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f003 0303 	and.w	r3, r3, #3
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d005      	beq.n	8001d6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d130      	bne.n	8001dcc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	2203      	movs	r2, #3
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	68da      	ldr	r2, [r3, #12]
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001da0:	2201      	movs	r2, #1
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	43db      	mvns	r3, r3
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	4013      	ands	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	091b      	lsrs	r3, r3, #4
 8001db6:	f003 0201 	and.w	r2, r3, #1
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f003 0303 	and.w	r3, r3, #3
 8001dd4:	2b03      	cmp	r3, #3
 8001dd6:	d017      	beq.n	8001e08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	2203      	movs	r2, #3
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	43db      	mvns	r3, r3
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	4013      	ands	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	689a      	ldr	r2, [r3, #8]
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f003 0303 	and.w	r3, r3, #3
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d123      	bne.n	8001e5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	08da      	lsrs	r2, r3, #3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3208      	adds	r2, #8
 8001e1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	f003 0307 	and.w	r3, r3, #7
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	220f      	movs	r2, #15
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	43db      	mvns	r3, r3
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	4013      	ands	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	691a      	ldr	r2, [r3, #16]
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	f003 0307 	and.w	r3, r3, #7
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	08da      	lsrs	r2, r3, #3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	3208      	adds	r2, #8
 8001e56:	69b9      	ldr	r1, [r7, #24]
 8001e58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	2203      	movs	r2, #3
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	4013      	ands	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f003 0203 	and.w	r2, r3, #3
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	f000 80a2 	beq.w	8001fe2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	60fb      	str	r3, [r7, #12]
 8001ea2:	4b57      	ldr	r3, [pc, #348]	@ (8002000 <HAL_GPIO_Init+0x2e8>)
 8001ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ea6:	4a56      	ldr	r2, [pc, #344]	@ (8002000 <HAL_GPIO_Init+0x2e8>)
 8001ea8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001eac:	6453      	str	r3, [r2, #68]	@ 0x44
 8001eae:	4b54      	ldr	r3, [pc, #336]	@ (8002000 <HAL_GPIO_Init+0x2e8>)
 8001eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eba:	4a52      	ldr	r2, [pc, #328]	@ (8002004 <HAL_GPIO_Init+0x2ec>)
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	089b      	lsrs	r3, r3, #2
 8001ec0:	3302      	adds	r3, #2
 8001ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	f003 0303 	and.w	r3, r3, #3
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	220f      	movs	r2, #15
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	4013      	ands	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a49      	ldr	r2, [pc, #292]	@ (8002008 <HAL_GPIO_Init+0x2f0>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d019      	beq.n	8001f1a <HAL_GPIO_Init+0x202>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a48      	ldr	r2, [pc, #288]	@ (800200c <HAL_GPIO_Init+0x2f4>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d013      	beq.n	8001f16 <HAL_GPIO_Init+0x1fe>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a47      	ldr	r2, [pc, #284]	@ (8002010 <HAL_GPIO_Init+0x2f8>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d00d      	beq.n	8001f12 <HAL_GPIO_Init+0x1fa>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a46      	ldr	r2, [pc, #280]	@ (8002014 <HAL_GPIO_Init+0x2fc>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d007      	beq.n	8001f0e <HAL_GPIO_Init+0x1f6>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a45      	ldr	r2, [pc, #276]	@ (8002018 <HAL_GPIO_Init+0x300>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d101      	bne.n	8001f0a <HAL_GPIO_Init+0x1f2>
 8001f06:	2304      	movs	r3, #4
 8001f08:	e008      	b.n	8001f1c <HAL_GPIO_Init+0x204>
 8001f0a:	2307      	movs	r3, #7
 8001f0c:	e006      	b.n	8001f1c <HAL_GPIO_Init+0x204>
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e004      	b.n	8001f1c <HAL_GPIO_Init+0x204>
 8001f12:	2302      	movs	r3, #2
 8001f14:	e002      	b.n	8001f1c <HAL_GPIO_Init+0x204>
 8001f16:	2301      	movs	r3, #1
 8001f18:	e000      	b.n	8001f1c <HAL_GPIO_Init+0x204>
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	69fa      	ldr	r2, [r7, #28]
 8001f1e:	f002 0203 	and.w	r2, r2, #3
 8001f22:	0092      	lsls	r2, r2, #2
 8001f24:	4093      	lsls	r3, r2
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f2c:	4935      	ldr	r1, [pc, #212]	@ (8002004 <HAL_GPIO_Init+0x2ec>)
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	089b      	lsrs	r3, r3, #2
 8001f32:	3302      	adds	r3, #2
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f3a:	4b38      	ldr	r3, [pc, #224]	@ (800201c <HAL_GPIO_Init+0x304>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	43db      	mvns	r3, r3
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	4013      	ands	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d003      	beq.n	8001f5e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f5e:	4a2f      	ldr	r2, [pc, #188]	@ (800201c <HAL_GPIO_Init+0x304>)
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f64:	4b2d      	ldr	r3, [pc, #180]	@ (800201c <HAL_GPIO_Init+0x304>)
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	4013      	ands	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d003      	beq.n	8001f88 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f88:	4a24      	ldr	r2, [pc, #144]	@ (800201c <HAL_GPIO_Init+0x304>)
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f8e:	4b23      	ldr	r3, [pc, #140]	@ (800201c <HAL_GPIO_Init+0x304>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	43db      	mvns	r3, r3
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d003      	beq.n	8001fb2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fb2:	4a1a      	ldr	r2, [pc, #104]	@ (800201c <HAL_GPIO_Init+0x304>)
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fb8:	4b18      	ldr	r3, [pc, #96]	@ (800201c <HAL_GPIO_Init+0x304>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d003      	beq.n	8001fdc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fdc:	4a0f      	ldr	r2, [pc, #60]	@ (800201c <HAL_GPIO_Init+0x304>)
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	61fb      	str	r3, [r7, #28]
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	2b0f      	cmp	r3, #15
 8001fec:	f67f aea2 	bls.w	8001d34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ff0:	bf00      	nop
 8001ff2:	bf00      	nop
 8001ff4:	3724      	adds	r7, #36	@ 0x24
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	40023800 	.word	0x40023800
 8002004:	40013800 	.word	0x40013800
 8002008:	40020000 	.word	0x40020000
 800200c:	40020400 	.word	0x40020400
 8002010:	40020800 	.word	0x40020800
 8002014:	40020c00 	.word	0x40020c00
 8002018:	40021000 	.word	0x40021000
 800201c:	40013c00 	.word	0x40013c00

08002020 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	460b      	mov	r3, r1
 800202a:	807b      	strh	r3, [r7, #2]
 800202c:	4613      	mov	r3, r2
 800202e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002030:	787b      	ldrb	r3, [r7, #1]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d003      	beq.n	800203e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002036:	887a      	ldrh	r2, [r7, #2]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800203c:	e003      	b.n	8002046 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800203e:	887b      	ldrh	r3, [r7, #2]
 8002040:	041a      	lsls	r2, r3, #16
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	619a      	str	r2, [r3, #24]
}
 8002046:	bf00      	nop
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr

08002052 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002052:	b480      	push	{r7}
 8002054:	b085      	sub	sp, #20
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
 800205a:	460b      	mov	r3, r1
 800205c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002064:	887a      	ldrh	r2, [r7, #2]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	4013      	ands	r3, r2
 800206a:	041a      	lsls	r2, r3, #16
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	43d9      	mvns	r1, r3
 8002070:	887b      	ldrh	r3, [r7, #2]
 8002072:	400b      	ands	r3, r1
 8002074:	431a      	orrs	r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	619a      	str	r2, [r3, #24]
}
 800207a:	bf00      	nop
 800207c:	3714      	adds	r7, #20
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
	...

08002088 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d101      	bne.n	800209a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e12b      	b.n	80022f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d106      	bne.n	80020b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f7ff f852 	bl	8001158 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2224      	movs	r2, #36	@ 0x24
 80020b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f022 0201 	bic.w	r2, r2, #1
 80020ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80020da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80020ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80020ec:	f002 ffdc 	bl	80050a8 <HAL_RCC_GetPCLK1Freq>
 80020f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	4a81      	ldr	r2, [pc, #516]	@ (80022fc <HAL_I2C_Init+0x274>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d807      	bhi.n	800210c <HAL_I2C_Init+0x84>
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	4a80      	ldr	r2, [pc, #512]	@ (8002300 <HAL_I2C_Init+0x278>)
 8002100:	4293      	cmp	r3, r2
 8002102:	bf94      	ite	ls
 8002104:	2301      	movls	r3, #1
 8002106:	2300      	movhi	r3, #0
 8002108:	b2db      	uxtb	r3, r3
 800210a:	e006      	b.n	800211a <HAL_I2C_Init+0x92>
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	4a7d      	ldr	r2, [pc, #500]	@ (8002304 <HAL_I2C_Init+0x27c>)
 8002110:	4293      	cmp	r3, r2
 8002112:	bf94      	ite	ls
 8002114:	2301      	movls	r3, #1
 8002116:	2300      	movhi	r3, #0
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e0e7      	b.n	80022f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	4a78      	ldr	r2, [pc, #480]	@ (8002308 <HAL_I2C_Init+0x280>)
 8002126:	fba2 2303 	umull	r2, r3, r2, r3
 800212a:	0c9b      	lsrs	r3, r3, #18
 800212c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68ba      	ldr	r2, [r7, #8]
 800213e:	430a      	orrs	r2, r1
 8002140:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	6a1b      	ldr	r3, [r3, #32]
 8002148:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	4a6a      	ldr	r2, [pc, #424]	@ (80022fc <HAL_I2C_Init+0x274>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d802      	bhi.n	800215c <HAL_I2C_Init+0xd4>
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	3301      	adds	r3, #1
 800215a:	e009      	b.n	8002170 <HAL_I2C_Init+0xe8>
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002162:	fb02 f303 	mul.w	r3, r2, r3
 8002166:	4a69      	ldr	r2, [pc, #420]	@ (800230c <HAL_I2C_Init+0x284>)
 8002168:	fba2 2303 	umull	r2, r3, r2, r3
 800216c:	099b      	lsrs	r3, r3, #6
 800216e:	3301      	adds	r3, #1
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	6812      	ldr	r2, [r2, #0]
 8002174:	430b      	orrs	r3, r1
 8002176:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	69db      	ldr	r3, [r3, #28]
 800217e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002182:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	495c      	ldr	r1, [pc, #368]	@ (80022fc <HAL_I2C_Init+0x274>)
 800218c:	428b      	cmp	r3, r1
 800218e:	d819      	bhi.n	80021c4 <HAL_I2C_Init+0x13c>
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	1e59      	subs	r1, r3, #1
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	fbb1 f3f3 	udiv	r3, r1, r3
 800219e:	1c59      	adds	r1, r3, #1
 80021a0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80021a4:	400b      	ands	r3, r1
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d00a      	beq.n	80021c0 <HAL_I2C_Init+0x138>
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	1e59      	subs	r1, r3, #1
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80021b8:	3301      	adds	r3, #1
 80021ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021be:	e051      	b.n	8002264 <HAL_I2C_Init+0x1dc>
 80021c0:	2304      	movs	r3, #4
 80021c2:	e04f      	b.n	8002264 <HAL_I2C_Init+0x1dc>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d111      	bne.n	80021f0 <HAL_I2C_Init+0x168>
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	1e58      	subs	r0, r3, #1
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6859      	ldr	r1, [r3, #4]
 80021d4:	460b      	mov	r3, r1
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	440b      	add	r3, r1
 80021da:	fbb0 f3f3 	udiv	r3, r0, r3
 80021de:	3301      	adds	r3, #1
 80021e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	bf0c      	ite	eq
 80021e8:	2301      	moveq	r3, #1
 80021ea:	2300      	movne	r3, #0
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	e012      	b.n	8002216 <HAL_I2C_Init+0x18e>
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	1e58      	subs	r0, r3, #1
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6859      	ldr	r1, [r3, #4]
 80021f8:	460b      	mov	r3, r1
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	440b      	add	r3, r1
 80021fe:	0099      	lsls	r1, r3, #2
 8002200:	440b      	add	r3, r1
 8002202:	fbb0 f3f3 	udiv	r3, r0, r3
 8002206:	3301      	adds	r3, #1
 8002208:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800220c:	2b00      	cmp	r3, #0
 800220e:	bf0c      	ite	eq
 8002210:	2301      	moveq	r3, #1
 8002212:	2300      	movne	r3, #0
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <HAL_I2C_Init+0x196>
 800221a:	2301      	movs	r3, #1
 800221c:	e022      	b.n	8002264 <HAL_I2C_Init+0x1dc>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d10e      	bne.n	8002244 <HAL_I2C_Init+0x1bc>
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	1e58      	subs	r0, r3, #1
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6859      	ldr	r1, [r3, #4]
 800222e:	460b      	mov	r3, r1
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	440b      	add	r3, r1
 8002234:	fbb0 f3f3 	udiv	r3, r0, r3
 8002238:	3301      	adds	r3, #1
 800223a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800223e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002242:	e00f      	b.n	8002264 <HAL_I2C_Init+0x1dc>
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	1e58      	subs	r0, r3, #1
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6859      	ldr	r1, [r3, #4]
 800224c:	460b      	mov	r3, r1
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	440b      	add	r3, r1
 8002252:	0099      	lsls	r1, r3, #2
 8002254:	440b      	add	r3, r1
 8002256:	fbb0 f3f3 	udiv	r3, r0, r3
 800225a:	3301      	adds	r3, #1
 800225c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002260:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002264:	6879      	ldr	r1, [r7, #4]
 8002266:	6809      	ldr	r1, [r1, #0]
 8002268:	4313      	orrs	r3, r2
 800226a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	69da      	ldr	r2, [r3, #28]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a1b      	ldr	r3, [r3, #32]
 800227e:	431a      	orrs	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	430a      	orrs	r2, r1
 8002286:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002292:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	6911      	ldr	r1, [r2, #16]
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	68d2      	ldr	r2, [r2, #12]
 800229e:	4311      	orrs	r1, r2
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	6812      	ldr	r2, [r2, #0]
 80022a4:	430b      	orrs	r3, r1
 80022a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	695a      	ldr	r2, [r3, #20]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	431a      	orrs	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	430a      	orrs	r2, r1
 80022c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f042 0201 	orr.w	r2, r2, #1
 80022d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2220      	movs	r2, #32
 80022de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3710      	adds	r7, #16
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	000186a0 	.word	0x000186a0
 8002300:	001e847f 	.word	0x001e847f
 8002304:	003d08ff 	.word	0x003d08ff
 8002308:	431bde83 	.word	0x431bde83
 800230c:	10624dd3 	.word	0x10624dd3

08002310 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b088      	sub	sp, #32
 8002314:	af02      	add	r7, sp, #8
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	4608      	mov	r0, r1
 800231a:	4611      	mov	r1, r2
 800231c:	461a      	mov	r2, r3
 800231e:	4603      	mov	r3, r0
 8002320:	817b      	strh	r3, [r7, #10]
 8002322:	460b      	mov	r3, r1
 8002324:	813b      	strh	r3, [r7, #8]
 8002326:	4613      	mov	r3, r2
 8002328:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800232a:	f7ff fbb3 	bl	8001a94 <HAL_GetTick>
 800232e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002336:	b2db      	uxtb	r3, r3
 8002338:	2b20      	cmp	r3, #32
 800233a:	f040 80d9 	bne.w	80024f0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	9300      	str	r3, [sp, #0]
 8002342:	2319      	movs	r3, #25
 8002344:	2201      	movs	r2, #1
 8002346:	496d      	ldr	r1, [pc, #436]	@ (80024fc <HAL_I2C_Mem_Write+0x1ec>)
 8002348:	68f8      	ldr	r0, [r7, #12]
 800234a:	f000 f971 	bl	8002630 <I2C_WaitOnFlagUntilTimeout>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002354:	2302      	movs	r3, #2
 8002356:	e0cc      	b.n	80024f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800235e:	2b01      	cmp	r3, #1
 8002360:	d101      	bne.n	8002366 <HAL_I2C_Mem_Write+0x56>
 8002362:	2302      	movs	r3, #2
 8002364:	e0c5      	b.n	80024f2 <HAL_I2C_Mem_Write+0x1e2>
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2201      	movs	r2, #1
 800236a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0301 	and.w	r3, r3, #1
 8002378:	2b01      	cmp	r3, #1
 800237a:	d007      	beq.n	800238c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f042 0201 	orr.w	r2, r2, #1
 800238a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800239a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2221      	movs	r2, #33	@ 0x21
 80023a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2240      	movs	r2, #64	@ 0x40
 80023a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2200      	movs	r2, #0
 80023b0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6a3a      	ldr	r2, [r7, #32]
 80023b6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80023bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	4a4d      	ldr	r2, [pc, #308]	@ (8002500 <HAL_I2C_Mem_Write+0x1f0>)
 80023cc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023ce:	88f8      	ldrh	r0, [r7, #6]
 80023d0:	893a      	ldrh	r2, [r7, #8]
 80023d2:	8979      	ldrh	r1, [r7, #10]
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	9301      	str	r3, [sp, #4]
 80023d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023da:	9300      	str	r3, [sp, #0]
 80023dc:	4603      	mov	r3, r0
 80023de:	68f8      	ldr	r0, [r7, #12]
 80023e0:	f000 f890 	bl	8002504 <I2C_RequestMemoryWrite>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d052      	beq.n	8002490 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e081      	b.n	80024f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023ee:	697a      	ldr	r2, [r7, #20]
 80023f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80023f2:	68f8      	ldr	r0, [r7, #12]
 80023f4:	f000 fa36 	bl	8002864 <I2C_WaitOnTXEFlagUntilTimeout>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d00d      	beq.n	800241a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002402:	2b04      	cmp	r3, #4
 8002404:	d107      	bne.n	8002416 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002414:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e06b      	b.n	80024f2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800241e:	781a      	ldrb	r2, [r3, #0]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800242a:	1c5a      	adds	r2, r3, #1
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002434:	3b01      	subs	r3, #1
 8002436:	b29a      	uxth	r2, r3
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002440:	b29b      	uxth	r3, r3
 8002442:	3b01      	subs	r3, #1
 8002444:	b29a      	uxth	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	695b      	ldr	r3, [r3, #20]
 8002450:	f003 0304 	and.w	r3, r3, #4
 8002454:	2b04      	cmp	r3, #4
 8002456:	d11b      	bne.n	8002490 <HAL_I2C_Mem_Write+0x180>
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800245c:	2b00      	cmp	r3, #0
 800245e:	d017      	beq.n	8002490 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002464:	781a      	ldrb	r2, [r3, #0]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002470:	1c5a      	adds	r2, r3, #1
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800247a:	3b01      	subs	r3, #1
 800247c:	b29a      	uxth	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002486:	b29b      	uxth	r3, r3
 8002488:	3b01      	subs	r3, #1
 800248a:	b29a      	uxth	r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002494:	2b00      	cmp	r3, #0
 8002496:	d1aa      	bne.n	80023ee <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002498:	697a      	ldr	r2, [r7, #20]
 800249a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800249c:	68f8      	ldr	r0, [r7, #12]
 800249e:	f000 fa29 	bl	80028f4 <I2C_WaitOnBTFFlagUntilTimeout>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d00d      	beq.n	80024c4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ac:	2b04      	cmp	r3, #4
 80024ae:	d107      	bne.n	80024c0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024be:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e016      	b.n	80024f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2220      	movs	r2, #32
 80024d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2200      	movs	r2, #0
 80024e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80024ec:	2300      	movs	r3, #0
 80024ee:	e000      	b.n	80024f2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80024f0:	2302      	movs	r3, #2
  }
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3718      	adds	r7, #24
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	00100002 	.word	0x00100002
 8002500:	ffff0000 	.word	0xffff0000

08002504 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b088      	sub	sp, #32
 8002508:	af02      	add	r7, sp, #8
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	4608      	mov	r0, r1
 800250e:	4611      	mov	r1, r2
 8002510:	461a      	mov	r2, r3
 8002512:	4603      	mov	r3, r0
 8002514:	817b      	strh	r3, [r7, #10]
 8002516:	460b      	mov	r3, r1
 8002518:	813b      	strh	r3, [r7, #8]
 800251a:	4613      	mov	r3, r2
 800251c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800252c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800252e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002530:	9300      	str	r3, [sp, #0]
 8002532:	6a3b      	ldr	r3, [r7, #32]
 8002534:	2200      	movs	r2, #0
 8002536:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800253a:	68f8      	ldr	r0, [r7, #12]
 800253c:	f000 f878 	bl	8002630 <I2C_WaitOnFlagUntilTimeout>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00d      	beq.n	8002562 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002550:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002554:	d103      	bne.n	800255e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800255c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e05f      	b.n	8002622 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002562:	897b      	ldrh	r3, [r7, #10]
 8002564:	b2db      	uxtb	r3, r3
 8002566:	461a      	mov	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002570:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002574:	6a3a      	ldr	r2, [r7, #32]
 8002576:	492d      	ldr	r1, [pc, #180]	@ (800262c <I2C_RequestMemoryWrite+0x128>)
 8002578:	68f8      	ldr	r0, [r7, #12]
 800257a:	f000 f8d3 	bl	8002724 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e04c      	b.n	8002622 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002588:	2300      	movs	r3, #0
 800258a:	617b      	str	r3, [r7, #20]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	695b      	ldr	r3, [r3, #20]
 8002592:	617b      	str	r3, [r7, #20]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	699b      	ldr	r3, [r3, #24]
 800259a:	617b      	str	r3, [r7, #20]
 800259c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800259e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025a0:	6a39      	ldr	r1, [r7, #32]
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	f000 f95e 	bl	8002864 <I2C_WaitOnTXEFlagUntilTimeout>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00d      	beq.n	80025ca <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b2:	2b04      	cmp	r3, #4
 80025b4:	d107      	bne.n	80025c6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e02b      	b.n	8002622 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80025ca:	88fb      	ldrh	r3, [r7, #6]
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d105      	bne.n	80025dc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80025d0:	893b      	ldrh	r3, [r7, #8]
 80025d2:	b2da      	uxtb	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	611a      	str	r2, [r3, #16]
 80025da:	e021      	b.n	8002620 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80025dc:	893b      	ldrh	r3, [r7, #8]
 80025de:	0a1b      	lsrs	r3, r3, #8
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	b2da      	uxtb	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025ec:	6a39      	ldr	r1, [r7, #32]
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f000 f938 	bl	8002864 <I2C_WaitOnTXEFlagUntilTimeout>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d00d      	beq.n	8002616 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025fe:	2b04      	cmp	r3, #4
 8002600:	d107      	bne.n	8002612 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002610:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e005      	b.n	8002622 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002616:	893b      	ldrh	r3, [r7, #8]
 8002618:	b2da      	uxtb	r2, r3
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3718      	adds	r7, #24
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	00010002 	.word	0x00010002

08002630 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	603b      	str	r3, [r7, #0]
 800263c:	4613      	mov	r3, r2
 800263e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002640:	e048      	b.n	80026d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002648:	d044      	beq.n	80026d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800264a:	f7ff fa23 	bl	8001a94 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	683a      	ldr	r2, [r7, #0]
 8002656:	429a      	cmp	r2, r3
 8002658:	d302      	bcc.n	8002660 <I2C_WaitOnFlagUntilTimeout+0x30>
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d139      	bne.n	80026d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	0c1b      	lsrs	r3, r3, #16
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b01      	cmp	r3, #1
 8002668:	d10d      	bne.n	8002686 <I2C_WaitOnFlagUntilTimeout+0x56>
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	695b      	ldr	r3, [r3, #20]
 8002670:	43da      	mvns	r2, r3
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	4013      	ands	r3, r2
 8002676:	b29b      	uxth	r3, r3
 8002678:	2b00      	cmp	r3, #0
 800267a:	bf0c      	ite	eq
 800267c:	2301      	moveq	r3, #1
 800267e:	2300      	movne	r3, #0
 8002680:	b2db      	uxtb	r3, r3
 8002682:	461a      	mov	r2, r3
 8002684:	e00c      	b.n	80026a0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	43da      	mvns	r2, r3
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	4013      	ands	r3, r2
 8002692:	b29b      	uxth	r3, r3
 8002694:	2b00      	cmp	r3, #0
 8002696:	bf0c      	ite	eq
 8002698:	2301      	moveq	r3, #1
 800269a:	2300      	movne	r3, #0
 800269c:	b2db      	uxtb	r3, r3
 800269e:	461a      	mov	r2, r3
 80026a0:	79fb      	ldrb	r3, [r7, #7]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d116      	bne.n	80026d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2200      	movs	r2, #0
 80026aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2220      	movs	r2, #32
 80026b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c0:	f043 0220 	orr.w	r2, r3, #32
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e023      	b.n	800271c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	0c1b      	lsrs	r3, r3, #16
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d10d      	bne.n	80026fa <I2C_WaitOnFlagUntilTimeout+0xca>
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	695b      	ldr	r3, [r3, #20]
 80026e4:	43da      	mvns	r2, r3
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	4013      	ands	r3, r2
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	bf0c      	ite	eq
 80026f0:	2301      	moveq	r3, #1
 80026f2:	2300      	movne	r3, #0
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	461a      	mov	r2, r3
 80026f8:	e00c      	b.n	8002714 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	43da      	mvns	r2, r3
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	4013      	ands	r3, r2
 8002706:	b29b      	uxth	r3, r3
 8002708:	2b00      	cmp	r3, #0
 800270a:	bf0c      	ite	eq
 800270c:	2301      	moveq	r3, #1
 800270e:	2300      	movne	r3, #0
 8002710:	b2db      	uxtb	r3, r3
 8002712:	461a      	mov	r2, r3
 8002714:	79fb      	ldrb	r3, [r7, #7]
 8002716:	429a      	cmp	r2, r3
 8002718:	d093      	beq.n	8002642 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	3710      	adds	r7, #16
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
 8002730:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002732:	e071      	b.n	8002818 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800273e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002742:	d123      	bne.n	800278c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002752:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800275c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2200      	movs	r2, #0
 8002762:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2220      	movs	r2, #32
 8002768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002778:	f043 0204 	orr.w	r2, r3, #4
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e067      	b.n	800285c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002792:	d041      	beq.n	8002818 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002794:	f7ff f97e 	bl	8001a94 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d302      	bcc.n	80027aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d136      	bne.n	8002818 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	0c1b      	lsrs	r3, r3, #16
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d10c      	bne.n	80027ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	43da      	mvns	r2, r3
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	4013      	ands	r3, r2
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	bf14      	ite	ne
 80027c6:	2301      	movne	r3, #1
 80027c8:	2300      	moveq	r3, #0
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	e00b      	b.n	80027e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	699b      	ldr	r3, [r3, #24]
 80027d4:	43da      	mvns	r2, r3
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	4013      	ands	r3, r2
 80027da:	b29b      	uxth	r3, r3
 80027dc:	2b00      	cmp	r3, #0
 80027de:	bf14      	ite	ne
 80027e0:	2301      	movne	r3, #1
 80027e2:	2300      	moveq	r3, #0
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d016      	beq.n	8002818 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2200      	movs	r2, #0
 80027ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2220      	movs	r2, #32
 80027f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002804:	f043 0220 	orr.w	r2, r3, #32
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e021      	b.n	800285c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	0c1b      	lsrs	r3, r3, #16
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b01      	cmp	r3, #1
 8002820:	d10c      	bne.n	800283c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	695b      	ldr	r3, [r3, #20]
 8002828:	43da      	mvns	r2, r3
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	4013      	ands	r3, r2
 800282e:	b29b      	uxth	r3, r3
 8002830:	2b00      	cmp	r3, #0
 8002832:	bf14      	ite	ne
 8002834:	2301      	movne	r3, #1
 8002836:	2300      	moveq	r3, #0
 8002838:	b2db      	uxtb	r3, r3
 800283a:	e00b      	b.n	8002854 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	43da      	mvns	r2, r3
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	4013      	ands	r3, r2
 8002848:	b29b      	uxth	r3, r3
 800284a:	2b00      	cmp	r3, #0
 800284c:	bf14      	ite	ne
 800284e:	2301      	movne	r3, #1
 8002850:	2300      	moveq	r3, #0
 8002852:	b2db      	uxtb	r3, r3
 8002854:	2b00      	cmp	r3, #0
 8002856:	f47f af6d 	bne.w	8002734 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	3710      	adds	r7, #16
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002870:	e034      	b.n	80028dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	f000 f886 	bl	8002984 <I2C_IsAcknowledgeFailed>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e034      	b.n	80028ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002888:	d028      	beq.n	80028dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800288a:	f7ff f903 	bl	8001a94 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	68ba      	ldr	r2, [r7, #8]
 8002896:	429a      	cmp	r2, r3
 8002898:	d302      	bcc.n	80028a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d11d      	bne.n	80028dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028aa:	2b80      	cmp	r3, #128	@ 0x80
 80028ac:	d016      	beq.n	80028dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2200      	movs	r2, #0
 80028b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2220      	movs	r2, #32
 80028b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c8:	f043 0220 	orr.w	r2, r3, #32
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e007      	b.n	80028ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	695b      	ldr	r3, [r3, #20]
 80028e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028e6:	2b80      	cmp	r3, #128	@ 0x80
 80028e8:	d1c3      	bne.n	8002872 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3710      	adds	r7, #16
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002900:	e034      	b.n	800296c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002902:	68f8      	ldr	r0, [r7, #12]
 8002904:	f000 f83e 	bl	8002984 <I2C_IsAcknowledgeFailed>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e034      	b.n	800297c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002918:	d028      	beq.n	800296c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800291a:	f7ff f8bb 	bl	8001a94 <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	68ba      	ldr	r2, [r7, #8]
 8002926:	429a      	cmp	r2, r3
 8002928:	d302      	bcc.n	8002930 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d11d      	bne.n	800296c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	695b      	ldr	r3, [r3, #20]
 8002936:	f003 0304 	and.w	r3, r3, #4
 800293a:	2b04      	cmp	r3, #4
 800293c:	d016      	beq.n	800296c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2200      	movs	r2, #0
 8002942:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2220      	movs	r2, #32
 8002948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002958:	f043 0220 	orr.w	r2, r3, #32
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2200      	movs	r2, #0
 8002964:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e007      	b.n	800297c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	f003 0304 	and.w	r3, r3, #4
 8002976:	2b04      	cmp	r3, #4
 8002978:	d1c3      	bne.n	8002902 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800297a:	2300      	movs	r3, #0
}
 800297c:	4618      	mov	r0, r3
 800297e:	3710      	adds	r7, #16
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002996:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800299a:	d11b      	bne.n	80029d4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80029a4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2220      	movs	r2, #32
 80029b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c0:	f043 0204 	orr.w	r2, r3, #4
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e000      	b.n	80029d6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
	...

080029e4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b088      	sub	sp, #32
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d101      	bne.n	80029f6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e128      	b.n	8002c48 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d109      	bne.n	8002a16 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a90      	ldr	r2, [pc, #576]	@ (8002c50 <HAL_I2S_Init+0x26c>)
 8002a0e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f7fe fbe9 	bl	80011e8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2202      	movs	r2, #2
 8002a1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	69db      	ldr	r3, [r3, #28]
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	6812      	ldr	r2, [r2, #0]
 8002a28:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002a2c:	f023 030f 	bic.w	r3, r3, #15
 8002a30:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2202      	movs	r2, #2
 8002a38:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d060      	beq.n	8002b04 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d102      	bne.n	8002a50 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002a4a:	2310      	movs	r3, #16
 8002a4c:	617b      	str	r3, [r7, #20]
 8002a4e:	e001      	b.n	8002a54 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002a50:	2320      	movs	r3, #32
 8002a52:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	2b20      	cmp	r3, #32
 8002a5a:	d802      	bhi.n	8002a62 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002a62:	2001      	movs	r0, #1
 8002a64:	f002 fc24 	bl	80052b0 <HAL_RCCEx_GetPeriphCLKFreq>
 8002a68:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a72:	d125      	bne.n	8002ac0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d010      	beq.n	8002a9e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a86:	4613      	mov	r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	4413      	add	r3, r2
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	461a      	mov	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	695b      	ldr	r3, [r3, #20]
 8002a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a98:	3305      	adds	r3, #5
 8002a9a:	613b      	str	r3, [r7, #16]
 8002a9c:	e01f      	b.n	8002ade <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	00db      	lsls	r3, r3, #3
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	4413      	add	r3, r2
 8002aae:	005b      	lsls	r3, r3, #1
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	695b      	ldr	r3, [r3, #20]
 8002ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aba:	3305      	adds	r3, #5
 8002abc:	613b      	str	r3, [r7, #16]
 8002abe:	e00e      	b.n	8002ade <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002ac0:	68fa      	ldr	r2, [r7, #12]
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ac8:	4613      	mov	r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	4413      	add	r3, r2
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ada:	3305      	adds	r3, #5
 8002adc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	4a5c      	ldr	r2, [pc, #368]	@ (8002c54 <HAL_I2S_Init+0x270>)
 8002ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae6:	08db      	lsrs	r3, r3, #3
 8002ae8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	f003 0301 	and.w	r3, r3, #1
 8002af0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	085b      	lsrs	r3, r3, #1
 8002afa:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	021b      	lsls	r3, r3, #8
 8002b00:	61bb      	str	r3, [r7, #24]
 8002b02:	e003      	b.n	8002b0c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002b04:	2302      	movs	r3, #2
 8002b06:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d902      	bls.n	8002b18 <HAL_I2S_Init+0x134>
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	2bff      	cmp	r3, #255	@ 0xff
 8002b16:	d907      	bls.n	8002b28 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b1c:	f043 0210 	orr.w	r2, r3, #16
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e08f      	b.n	8002c48 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	691a      	ldr	r2, [r3, #16]
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	ea42 0103 	orr.w	r1, r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	69fa      	ldr	r2, [r7, #28]
 8002b38:	430a      	orrs	r2, r1
 8002b3a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	69db      	ldr	r3, [r3, #28]
 8002b42:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002b46:	f023 030f 	bic.w	r3, r3, #15
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	6851      	ldr	r1, [r2, #4]
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	6892      	ldr	r2, [r2, #8]
 8002b52:	4311      	orrs	r1, r2
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	68d2      	ldr	r2, [r2, #12]
 8002b58:	4311      	orrs	r1, r2
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	6992      	ldr	r2, [r2, #24]
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	431a      	orrs	r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b6a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a1b      	ldr	r3, [r3, #32]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d161      	bne.n	8002c38 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4a38      	ldr	r2, [pc, #224]	@ (8002c58 <HAL_I2S_Init+0x274>)
 8002b78:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a37      	ldr	r2, [pc, #220]	@ (8002c5c <HAL_I2S_Init+0x278>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d101      	bne.n	8002b88 <HAL_I2S_Init+0x1a4>
 8002b84:	4b36      	ldr	r3, [pc, #216]	@ (8002c60 <HAL_I2S_Init+0x27c>)
 8002b86:	e001      	b.n	8002b8c <HAL_I2S_Init+0x1a8>
 8002b88:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002b8c:	69db      	ldr	r3, [r3, #28]
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	6812      	ldr	r2, [r2, #0]
 8002b92:	4932      	ldr	r1, [pc, #200]	@ (8002c5c <HAL_I2S_Init+0x278>)
 8002b94:	428a      	cmp	r2, r1
 8002b96:	d101      	bne.n	8002b9c <HAL_I2S_Init+0x1b8>
 8002b98:	4a31      	ldr	r2, [pc, #196]	@ (8002c60 <HAL_I2S_Init+0x27c>)
 8002b9a:	e001      	b.n	8002ba0 <HAL_I2S_Init+0x1bc>
 8002b9c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8002ba0:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002ba4:	f023 030f 	bic.w	r3, r3, #15
 8002ba8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a2b      	ldr	r2, [pc, #172]	@ (8002c5c <HAL_I2S_Init+0x278>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d101      	bne.n	8002bb8 <HAL_I2S_Init+0x1d4>
 8002bb4:	4b2a      	ldr	r3, [pc, #168]	@ (8002c60 <HAL_I2S_Init+0x27c>)
 8002bb6:	e001      	b.n	8002bbc <HAL_I2S_Init+0x1d8>
 8002bb8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002bbc:	2202      	movs	r2, #2
 8002bbe:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a25      	ldr	r2, [pc, #148]	@ (8002c5c <HAL_I2S_Init+0x278>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d101      	bne.n	8002bce <HAL_I2S_Init+0x1ea>
 8002bca:	4b25      	ldr	r3, [pc, #148]	@ (8002c60 <HAL_I2S_Init+0x27c>)
 8002bcc:	e001      	b.n	8002bd2 <HAL_I2S_Init+0x1ee>
 8002bce:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002bd2:	69db      	ldr	r3, [r3, #28]
 8002bd4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002bde:	d003      	beq.n	8002be8 <HAL_I2S_Init+0x204>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d103      	bne.n	8002bf0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002be8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002bec:	613b      	str	r3, [r7, #16]
 8002bee:	e001      	b.n	8002bf4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002c12:	4313      	orrs	r3, r2
 8002c14:	b29a      	uxth	r2, r3
 8002c16:	897b      	ldrh	r3, [r7, #10]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002c20:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a0d      	ldr	r2, [pc, #52]	@ (8002c5c <HAL_I2S_Init+0x278>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d101      	bne.n	8002c30 <HAL_I2S_Init+0x24c>
 8002c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8002c60 <HAL_I2S_Init+0x27c>)
 8002c2e:	e001      	b.n	8002c34 <HAL_I2S_Init+0x250>
 8002c30:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002c34:	897a      	ldrh	r2, [r7, #10]
 8002c36:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2201      	movs	r2, #1
 8002c42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3720      	adds	r7, #32
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	08002d5b 	.word	0x08002d5b
 8002c54:	cccccccd 	.word	0xcccccccd
 8002c58:	08002e71 	.word	0x08002e71
 8002c5c:	40003800 	.word	0x40003800
 8002c60:	40003400 	.word	0x40003400

08002c64 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002c6c:	bf00      	nop
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002c94:	bf00      	nop
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cac:	881a      	ldrh	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb8:	1c9a      	adds	r2, r3, #2
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d10e      	bne.n	8002cf4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	685a      	ldr	r2, [r3, #4]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002ce4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f7ff ffb8 	bl	8002c64 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002cf4:	bf00      	nop
 8002cf6:	3708      	adds	r7, #8
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68da      	ldr	r2, [r3, #12]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d0e:	b292      	uxth	r2, r2
 8002d10:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d16:	1c9a      	adds	r2, r3, #2
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	3b01      	subs	r3, #1
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d10e      	bne.n	8002d52 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	685a      	ldr	r2, [r3, #4]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002d42:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f7ff ff93 	bl	8002c78 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002d52:	bf00      	nop
 8002d54:	3708      	adds	r7, #8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b086      	sub	sp, #24
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b04      	cmp	r3, #4
 8002d74:	d13a      	bne.n	8002dec <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	f003 0301 	and.w	r3, r3, #1
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d109      	bne.n	8002d94 <I2S_IRQHandler+0x3a>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d8a:	2b40      	cmp	r3, #64	@ 0x40
 8002d8c:	d102      	bne.n	8002d94 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f7ff ffb4 	bl	8002cfc <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d9a:	2b40      	cmp	r3, #64	@ 0x40
 8002d9c:	d126      	bne.n	8002dec <I2S_IRQHandler+0x92>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f003 0320 	and.w	r3, r3, #32
 8002da8:	2b20      	cmp	r3, #32
 8002daa:	d11f      	bne.n	8002dec <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	685a      	ldr	r2, [r3, #4]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002dba:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	613b      	str	r3, [r7, #16]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	613b      	str	r3, [r7, #16]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	613b      	str	r3, [r7, #16]
 8002dd0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dde:	f043 0202 	orr.w	r2, r3, #2
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f7ff ff50 	bl	8002c8c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	2b03      	cmp	r3, #3
 8002df6:	d136      	bne.n	8002e66 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d109      	bne.n	8002e16 <I2S_IRQHandler+0xbc>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e0c:	2b80      	cmp	r3, #128	@ 0x80
 8002e0e:	d102      	bne.n	8002e16 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f7ff ff45 	bl	8002ca0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	f003 0308 	and.w	r3, r3, #8
 8002e1c:	2b08      	cmp	r3, #8
 8002e1e:	d122      	bne.n	8002e66 <I2S_IRQHandler+0x10c>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f003 0320 	and.w	r3, r3, #32
 8002e2a:	2b20      	cmp	r3, #32
 8002e2c:	d11b      	bne.n	8002e66 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	685a      	ldr	r2, [r3, #4]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002e3c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002e3e:	2300      	movs	r3, #0
 8002e40:	60fb      	str	r3, [r7, #12]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	60fb      	str	r3, [r7, #12]
 8002e4a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e58:	f043 0204 	orr.w	r2, r3, #4
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f7ff ff13 	bl	8002c8c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002e66:	bf00      	nop
 8002e68:	3718      	adds	r7, #24
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
	...

08002e70 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b088      	sub	sp, #32
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a92      	ldr	r2, [pc, #584]	@ (80030d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d101      	bne.n	8002e8e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002e8a:	4b92      	ldr	r3, [pc, #584]	@ (80030d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002e8c:	e001      	b.n	8002e92 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002e8e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a8b      	ldr	r2, [pc, #556]	@ (80030d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d101      	bne.n	8002eac <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002ea8:	4b8a      	ldr	r3, [pc, #552]	@ (80030d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002eaa:	e001      	b.n	8002eb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002eac:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ebc:	d004      	beq.n	8002ec8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	f040 8099 	bne.w	8002ffa <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d107      	bne.n	8002ee2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d002      	beq.n	8002ee2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f000 f925 	bl	800312c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	f003 0301 	and.w	r3, r3, #1
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d107      	bne.n	8002efc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d002      	beq.n	8002efc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 f9c8 	bl	800328c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f02:	2b40      	cmp	r3, #64	@ 0x40
 8002f04:	d13a      	bne.n	8002f7c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	f003 0320 	and.w	r3, r3, #32
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d035      	beq.n	8002f7c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a6e      	ldr	r2, [pc, #440]	@ (80030d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d101      	bne.n	8002f1e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002f1a:	4b6e      	ldr	r3, [pc, #440]	@ (80030d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002f1c:	e001      	b.n	8002f22 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002f1e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002f22:	685a      	ldr	r2, [r3, #4]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4969      	ldr	r1, [pc, #420]	@ (80030d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002f2a:	428b      	cmp	r3, r1
 8002f2c:	d101      	bne.n	8002f32 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002f2e:	4b69      	ldr	r3, [pc, #420]	@ (80030d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002f30:	e001      	b.n	8002f36 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002f32:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002f36:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002f3a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	685a      	ldr	r2, [r3, #4]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002f4a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	60fb      	str	r3, [r7, #12]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	60fb      	str	r3, [r7, #12]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	60fb      	str	r3, [r7, #12]
 8002f60:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2201      	movs	r2, #1
 8002f66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f6e:	f043 0202 	orr.w	r2, r3, #2
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f7ff fe88 	bl	8002c8c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	f003 0308 	and.w	r3, r3, #8
 8002f82:	2b08      	cmp	r3, #8
 8002f84:	f040 80c3 	bne.w	800310e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	f003 0320 	and.w	r3, r3, #32
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	f000 80bd 	beq.w	800310e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	685a      	ldr	r2, [r3, #4]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002fa2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a49      	ldr	r2, [pc, #292]	@ (80030d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d101      	bne.n	8002fb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002fae:	4b49      	ldr	r3, [pc, #292]	@ (80030d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002fb0:	e001      	b.n	8002fb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002fb2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002fb6:	685a      	ldr	r2, [r3, #4]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4944      	ldr	r1, [pc, #272]	@ (80030d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002fbe:	428b      	cmp	r3, r1
 8002fc0:	d101      	bne.n	8002fc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002fc2:	4b44      	ldr	r3, [pc, #272]	@ (80030d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002fc4:	e001      	b.n	8002fca <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002fc6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002fca:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002fce:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	60bb      	str	r3, [r7, #8]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	60bb      	str	r3, [r7, #8]
 8002fdc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fea:	f043 0204 	orr.w	r2, r3, #4
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f7ff fe4a 	bl	8002c8c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002ff8:	e089      	b.n	800310e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	f003 0302 	and.w	r3, r3, #2
 8003000:	2b02      	cmp	r3, #2
 8003002:	d107      	bne.n	8003014 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800300a:	2b00      	cmp	r3, #0
 800300c:	d002      	beq.n	8003014 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 f8be 	bl	8003190 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	2b01      	cmp	r3, #1
 800301c:	d107      	bne.n	800302e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003024:	2b00      	cmp	r3, #0
 8003026:	d002      	beq.n	800302e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f000 f8fd 	bl	8003228 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003034:	2b40      	cmp	r3, #64	@ 0x40
 8003036:	d12f      	bne.n	8003098 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	f003 0320 	and.w	r3, r3, #32
 800303e:	2b00      	cmp	r3, #0
 8003040:	d02a      	beq.n	8003098 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	685a      	ldr	r2, [r3, #4]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003050:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a1e      	ldr	r2, [pc, #120]	@ (80030d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d101      	bne.n	8003060 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800305c:	4b1d      	ldr	r3, [pc, #116]	@ (80030d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800305e:	e001      	b.n	8003064 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003060:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003064:	685a      	ldr	r2, [r3, #4]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4919      	ldr	r1, [pc, #100]	@ (80030d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800306c:	428b      	cmp	r3, r1
 800306e:	d101      	bne.n	8003074 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003070:	4b18      	ldr	r3, [pc, #96]	@ (80030d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003072:	e001      	b.n	8003078 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003074:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003078:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800307c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2201      	movs	r2, #1
 8003082:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800308a:	f043 0202 	orr.w	r2, r3, #2
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f7ff fdfa 	bl	8002c8c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	f003 0308 	and.w	r3, r3, #8
 800309e:	2b08      	cmp	r3, #8
 80030a0:	d136      	bne.n	8003110 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	f003 0320 	and.w	r3, r3, #32
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d031      	beq.n	8003110 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a07      	ldr	r2, [pc, #28]	@ (80030d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d101      	bne.n	80030ba <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80030b6:	4b07      	ldr	r3, [pc, #28]	@ (80030d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80030b8:	e001      	b.n	80030be <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80030ba:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80030be:	685a      	ldr	r2, [r3, #4]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4902      	ldr	r1, [pc, #8]	@ (80030d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80030c6:	428b      	cmp	r3, r1
 80030c8:	d106      	bne.n	80030d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80030ca:	4b02      	ldr	r3, [pc, #8]	@ (80030d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80030cc:	e006      	b.n	80030dc <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80030ce:	bf00      	nop
 80030d0:	40003800 	.word	0x40003800
 80030d4:	40003400 	.word	0x40003400
 80030d8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80030dc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80030e0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	685a      	ldr	r2, [r3, #4]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80030f0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2201      	movs	r2, #1
 80030f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030fe:	f043 0204 	orr.w	r2, r3, #4
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f7ff fdc0 	bl	8002c8c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800310c:	e000      	b.n	8003110 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800310e:	bf00      	nop
}
 8003110:	bf00      	nop
 8003112:	3720      	adds	r7, #32
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003120:	bf00      	nop
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003138:	1c99      	adds	r1, r3, #2
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	6251      	str	r1, [r2, #36]	@ 0x24
 800313e:	881a      	ldrh	r2, [r3, #0]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800314a:	b29b      	uxth	r3, r3
 800314c:	3b01      	subs	r3, #1
 800314e:	b29a      	uxth	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003158:	b29b      	uxth	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	d113      	bne.n	8003186 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800316c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003172:	b29b      	uxth	r3, r3
 8003174:	2b00      	cmp	r3, #0
 8003176:	d106      	bne.n	8003186 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f7ff ffc9 	bl	8003118 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003186:	bf00      	nop
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
	...

08003190 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800319c:	1c99      	adds	r1, r3, #2
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	6251      	str	r1, [r2, #36]	@ 0x24
 80031a2:	8819      	ldrh	r1, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a1d      	ldr	r2, [pc, #116]	@ (8003220 <I2SEx_TxISR_I2SExt+0x90>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d101      	bne.n	80031b2 <I2SEx_TxISR_I2SExt+0x22>
 80031ae:	4b1d      	ldr	r3, [pc, #116]	@ (8003224 <I2SEx_TxISR_I2SExt+0x94>)
 80031b0:	e001      	b.n	80031b6 <I2SEx_TxISR_I2SExt+0x26>
 80031b2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80031b6:	460a      	mov	r2, r1
 80031b8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031be:	b29b      	uxth	r3, r3
 80031c0:	3b01      	subs	r3, #1
 80031c2:	b29a      	uxth	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d121      	bne.n	8003216 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a12      	ldr	r2, [pc, #72]	@ (8003220 <I2SEx_TxISR_I2SExt+0x90>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d101      	bne.n	80031e0 <I2SEx_TxISR_I2SExt+0x50>
 80031dc:	4b11      	ldr	r3, [pc, #68]	@ (8003224 <I2SEx_TxISR_I2SExt+0x94>)
 80031de:	e001      	b.n	80031e4 <I2SEx_TxISR_I2SExt+0x54>
 80031e0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80031e4:	685a      	ldr	r2, [r3, #4]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	490d      	ldr	r1, [pc, #52]	@ (8003220 <I2SEx_TxISR_I2SExt+0x90>)
 80031ec:	428b      	cmp	r3, r1
 80031ee:	d101      	bne.n	80031f4 <I2SEx_TxISR_I2SExt+0x64>
 80031f0:	4b0c      	ldr	r3, [pc, #48]	@ (8003224 <I2SEx_TxISR_I2SExt+0x94>)
 80031f2:	e001      	b.n	80031f8 <I2SEx_TxISR_I2SExt+0x68>
 80031f4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80031f8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80031fc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003202:	b29b      	uxth	r3, r3
 8003204:	2b00      	cmp	r3, #0
 8003206:	d106      	bne.n	8003216 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f7ff ff81 	bl	8003118 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003216:	bf00      	nop
 8003218:	3708      	adds	r7, #8
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	40003800 	.word	0x40003800
 8003224:	40003400 	.word	0x40003400

08003228 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68d8      	ldr	r0, [r3, #12]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800323a:	1c99      	adds	r1, r3, #2
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003240:	b282      	uxth	r2, r0
 8003242:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003248:	b29b      	uxth	r3, r3
 800324a:	3b01      	subs	r3, #1
 800324c:	b29a      	uxth	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003256:	b29b      	uxth	r3, r3
 8003258:	2b00      	cmp	r3, #0
 800325a:	d113      	bne.n	8003284 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	685a      	ldr	r2, [r3, #4]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800326a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003270:	b29b      	uxth	r3, r3
 8003272:	2b00      	cmp	r3, #0
 8003274:	d106      	bne.n	8003284 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2201      	movs	r2, #1
 800327a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f7ff ff4a 	bl	8003118 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003284:	bf00      	nop
 8003286:	3708      	adds	r7, #8
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a20      	ldr	r2, [pc, #128]	@ (800331c <I2SEx_RxISR_I2SExt+0x90>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d101      	bne.n	80032a2 <I2SEx_RxISR_I2SExt+0x16>
 800329e:	4b20      	ldr	r3, [pc, #128]	@ (8003320 <I2SEx_RxISR_I2SExt+0x94>)
 80032a0:	e001      	b.n	80032a6 <I2SEx_RxISR_I2SExt+0x1a>
 80032a2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80032a6:	68d8      	ldr	r0, [r3, #12]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ac:	1c99      	adds	r1, r3, #2
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80032b2:	b282      	uxth	r2, r0
 80032b4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	3b01      	subs	r3, #1
 80032be:	b29a      	uxth	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d121      	bne.n	8003312 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a12      	ldr	r2, [pc, #72]	@ (800331c <I2SEx_RxISR_I2SExt+0x90>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d101      	bne.n	80032dc <I2SEx_RxISR_I2SExt+0x50>
 80032d8:	4b11      	ldr	r3, [pc, #68]	@ (8003320 <I2SEx_RxISR_I2SExt+0x94>)
 80032da:	e001      	b.n	80032e0 <I2SEx_RxISR_I2SExt+0x54>
 80032dc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80032e0:	685a      	ldr	r2, [r3, #4]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	490d      	ldr	r1, [pc, #52]	@ (800331c <I2SEx_RxISR_I2SExt+0x90>)
 80032e8:	428b      	cmp	r3, r1
 80032ea:	d101      	bne.n	80032f0 <I2SEx_RxISR_I2SExt+0x64>
 80032ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003320 <I2SEx_RxISR_I2SExt+0x94>)
 80032ee:	e001      	b.n	80032f4 <I2SEx_RxISR_I2SExt+0x68>
 80032f0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80032f4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80032f8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032fe:	b29b      	uxth	r3, r3
 8003300:	2b00      	cmp	r3, #0
 8003302:	d106      	bne.n	8003312 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f7ff ff03 	bl	8003118 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003312:	bf00      	nop
 8003314:	3708      	adds	r7, #8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	40003800 	.word	0x40003800
 8003320:	40003400 	.word	0x40003400

08003324 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b086      	sub	sp, #24
 8003328:	af02      	add	r7, sp, #8
 800332a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e101      	b.n	800353a <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003342:	b2db      	uxtb	r3, r3
 8003344:	2b00      	cmp	r3, #0
 8003346:	d106      	bne.n	8003356 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f008 febf 	bl	800c0d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2203      	movs	r2, #3
 800335a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003364:	d102      	bne.n	800336c <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4618      	mov	r0, r3
 8003372:	f002 f9a0 	bl	80056b6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6818      	ldr	r0, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	7c1a      	ldrb	r2, [r3, #16]
 800337e:	f88d 2000 	strb.w	r2, [sp]
 8003382:	3304      	adds	r3, #4
 8003384:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003386:	f002 f87e 	bl	8005486 <USB_CoreInit>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d005      	beq.n	800339c <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2202      	movs	r2, #2
 8003394:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e0ce      	b.n	800353a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2100      	movs	r1, #0
 80033a2:	4618      	mov	r0, r3
 80033a4:	f002 f998 	bl	80056d8 <USB_SetCurrentMode>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d005      	beq.n	80033ba <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2202      	movs	r2, #2
 80033b2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e0bf      	b.n	800353a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033ba:	2300      	movs	r3, #0
 80033bc:	73fb      	strb	r3, [r7, #15]
 80033be:	e04a      	b.n	8003456 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80033c0:	7bfa      	ldrb	r2, [r7, #15]
 80033c2:	6879      	ldr	r1, [r7, #4]
 80033c4:	4613      	mov	r3, r2
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	4413      	add	r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	440b      	add	r3, r1
 80033ce:	3315      	adds	r3, #21
 80033d0:	2201      	movs	r2, #1
 80033d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80033d4:	7bfa      	ldrb	r2, [r7, #15]
 80033d6:	6879      	ldr	r1, [r7, #4]
 80033d8:	4613      	mov	r3, r2
 80033da:	00db      	lsls	r3, r3, #3
 80033dc:	4413      	add	r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	440b      	add	r3, r1
 80033e2:	3314      	adds	r3, #20
 80033e4:	7bfa      	ldrb	r2, [r7, #15]
 80033e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80033e8:	7bfa      	ldrb	r2, [r7, #15]
 80033ea:	7bfb      	ldrb	r3, [r7, #15]
 80033ec:	b298      	uxth	r0, r3
 80033ee:	6879      	ldr	r1, [r7, #4]
 80033f0:	4613      	mov	r3, r2
 80033f2:	00db      	lsls	r3, r3, #3
 80033f4:	4413      	add	r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	440b      	add	r3, r1
 80033fa:	332e      	adds	r3, #46	@ 0x2e
 80033fc:	4602      	mov	r2, r0
 80033fe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003400:	7bfa      	ldrb	r2, [r7, #15]
 8003402:	6879      	ldr	r1, [r7, #4]
 8003404:	4613      	mov	r3, r2
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	4413      	add	r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	440b      	add	r3, r1
 800340e:	3318      	adds	r3, #24
 8003410:	2200      	movs	r2, #0
 8003412:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003414:	7bfa      	ldrb	r2, [r7, #15]
 8003416:	6879      	ldr	r1, [r7, #4]
 8003418:	4613      	mov	r3, r2
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	4413      	add	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	440b      	add	r3, r1
 8003422:	331c      	adds	r3, #28
 8003424:	2200      	movs	r2, #0
 8003426:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003428:	7bfa      	ldrb	r2, [r7, #15]
 800342a:	6879      	ldr	r1, [r7, #4]
 800342c:	4613      	mov	r3, r2
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	4413      	add	r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	440b      	add	r3, r1
 8003436:	3320      	adds	r3, #32
 8003438:	2200      	movs	r2, #0
 800343a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800343c:	7bfa      	ldrb	r2, [r7, #15]
 800343e:	6879      	ldr	r1, [r7, #4]
 8003440:	4613      	mov	r3, r2
 8003442:	00db      	lsls	r3, r3, #3
 8003444:	4413      	add	r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	440b      	add	r3, r1
 800344a:	3324      	adds	r3, #36	@ 0x24
 800344c:	2200      	movs	r2, #0
 800344e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003450:	7bfb      	ldrb	r3, [r7, #15]
 8003452:	3301      	adds	r3, #1
 8003454:	73fb      	strb	r3, [r7, #15]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	791b      	ldrb	r3, [r3, #4]
 800345a:	7bfa      	ldrb	r2, [r7, #15]
 800345c:	429a      	cmp	r2, r3
 800345e:	d3af      	bcc.n	80033c0 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003460:	2300      	movs	r3, #0
 8003462:	73fb      	strb	r3, [r7, #15]
 8003464:	e044      	b.n	80034f0 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003466:	7bfa      	ldrb	r2, [r7, #15]
 8003468:	6879      	ldr	r1, [r7, #4]
 800346a:	4613      	mov	r3, r2
 800346c:	00db      	lsls	r3, r3, #3
 800346e:	4413      	add	r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	440b      	add	r3, r1
 8003474:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003478:	2200      	movs	r2, #0
 800347a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800347c:	7bfa      	ldrb	r2, [r7, #15]
 800347e:	6879      	ldr	r1, [r7, #4]
 8003480:	4613      	mov	r3, r2
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	4413      	add	r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	440b      	add	r3, r1
 800348a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800348e:	7bfa      	ldrb	r2, [r7, #15]
 8003490:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003492:	7bfa      	ldrb	r2, [r7, #15]
 8003494:	6879      	ldr	r1, [r7, #4]
 8003496:	4613      	mov	r3, r2
 8003498:	00db      	lsls	r3, r3, #3
 800349a:	4413      	add	r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	440b      	add	r3, r1
 80034a0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80034a4:	2200      	movs	r2, #0
 80034a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80034a8:	7bfa      	ldrb	r2, [r7, #15]
 80034aa:	6879      	ldr	r1, [r7, #4]
 80034ac:	4613      	mov	r3, r2
 80034ae:	00db      	lsls	r3, r3, #3
 80034b0:	4413      	add	r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	440b      	add	r3, r1
 80034b6:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80034ba:	2200      	movs	r2, #0
 80034bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80034be:	7bfa      	ldrb	r2, [r7, #15]
 80034c0:	6879      	ldr	r1, [r7, #4]
 80034c2:	4613      	mov	r3, r2
 80034c4:	00db      	lsls	r3, r3, #3
 80034c6:	4413      	add	r3, r2
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	440b      	add	r3, r1
 80034cc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80034d0:	2200      	movs	r2, #0
 80034d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80034d4:	7bfa      	ldrb	r2, [r7, #15]
 80034d6:	6879      	ldr	r1, [r7, #4]
 80034d8:	4613      	mov	r3, r2
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	4413      	add	r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	440b      	add	r3, r1
 80034e2:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80034e6:	2200      	movs	r2, #0
 80034e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034ea:	7bfb      	ldrb	r3, [r7, #15]
 80034ec:	3301      	adds	r3, #1
 80034ee:	73fb      	strb	r3, [r7, #15]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	791b      	ldrb	r3, [r3, #4]
 80034f4:	7bfa      	ldrb	r2, [r7, #15]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d3b5      	bcc.n	8003466 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6818      	ldr	r0, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	7c1a      	ldrb	r2, [r3, #16]
 8003502:	f88d 2000 	strb.w	r2, [sp]
 8003506:	3304      	adds	r3, #4
 8003508:	cb0e      	ldmia	r3, {r1, r2, r3}
 800350a:	f002 f931 	bl	8005770 <USB_DevInit>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d005      	beq.n	8003520 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2202      	movs	r2, #2
 8003518:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e00c      	b.n	800353a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2201      	movs	r2, #1
 800352a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4618      	mov	r0, r3
 8003534:	f003 f97b 	bl	800682e <USB_DevDisconnect>

  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3710      	adds	r7, #16
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003542:	b580      	push	{r7, lr}
 8003544:	b084      	sub	sp, #16
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003556:	2b01      	cmp	r3, #1
 8003558:	d101      	bne.n	800355e <HAL_PCD_Start+0x1c>
 800355a:	2302      	movs	r3, #2
 800355c:	e022      	b.n	80035a4 <HAL_PCD_Start+0x62>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2201      	movs	r2, #1
 8003562:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800356e:	2b00      	cmp	r3, #0
 8003570:	d009      	beq.n	8003586 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003576:	2b01      	cmp	r3, #1
 8003578:	d105      	bne.n	8003586 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800357e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4618      	mov	r0, r3
 800358c:	f002 f882 	bl	8005694 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4618      	mov	r0, r3
 8003596:	f003 f929 	bl	80067ec <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80035a2:	2300      	movs	r3, #0
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3710      	adds	r7, #16
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80035ac:	b590      	push	{r4, r7, lr}
 80035ae:	b08d      	sub	sp, #52	@ 0x34
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035ba:	6a3b      	ldr	r3, [r7, #32]
 80035bc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f003 f9e7 	bl	8006996 <USB_GetMode>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	f040 848c 	bne.w	8003ee8 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4618      	mov	r0, r3
 80035d6:	f003 f94b 	bl	8006870 <USB_ReadInterrupts>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	f000 8482 	beq.w	8003ee6 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	0a1b      	lsrs	r3, r3, #8
 80035ec:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f003 f938 	bl	8006870 <USB_ReadInterrupts>
 8003600:	4603      	mov	r3, r0
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b02      	cmp	r3, #2
 8003608:	d107      	bne.n	800361a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	695a      	ldr	r2, [r3, #20]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f002 0202 	and.w	r2, r2, #2
 8003618:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4618      	mov	r0, r3
 8003620:	f003 f926 	bl	8006870 <USB_ReadInterrupts>
 8003624:	4603      	mov	r3, r0
 8003626:	f003 0310 	and.w	r3, r3, #16
 800362a:	2b10      	cmp	r3, #16
 800362c:	d161      	bne.n	80036f2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	699a      	ldr	r2, [r3, #24]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f022 0210 	bic.w	r2, r2, #16
 800363c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800363e:	6a3b      	ldr	r3, [r7, #32]
 8003640:	6a1b      	ldr	r3, [r3, #32]
 8003642:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	f003 020f 	and.w	r2, r3, #15
 800364a:	4613      	mov	r3, r2
 800364c:	00db      	lsls	r3, r3, #3
 800364e:	4413      	add	r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	4413      	add	r3, r2
 800365a:	3304      	adds	r3, #4
 800365c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	0c5b      	lsrs	r3, r3, #17
 8003662:	f003 030f 	and.w	r3, r3, #15
 8003666:	2b02      	cmp	r3, #2
 8003668:	d124      	bne.n	80036b4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800366a:	69ba      	ldr	r2, [r7, #24]
 800366c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003670:	4013      	ands	r3, r2
 8003672:	2b00      	cmp	r3, #0
 8003674:	d035      	beq.n	80036e2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	091b      	lsrs	r3, r3, #4
 800367e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003680:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003684:	b29b      	uxth	r3, r3
 8003686:	461a      	mov	r2, r3
 8003688:	6a38      	ldr	r0, [r7, #32]
 800368a:	f002 ff5d 	bl	8006548 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	68da      	ldr	r2, [r3, #12]
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	091b      	lsrs	r3, r3, #4
 8003696:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800369a:	441a      	add	r2, r3
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	695a      	ldr	r2, [r3, #20]
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	091b      	lsrs	r3, r3, #4
 80036a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036ac:	441a      	add	r2, r3
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	615a      	str	r2, [r3, #20]
 80036b2:	e016      	b.n	80036e2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	0c5b      	lsrs	r3, r3, #17
 80036b8:	f003 030f 	and.w	r3, r3, #15
 80036bc:	2b06      	cmp	r3, #6
 80036be:	d110      	bne.n	80036e2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80036c6:	2208      	movs	r2, #8
 80036c8:	4619      	mov	r1, r3
 80036ca:	6a38      	ldr	r0, [r7, #32]
 80036cc:	f002 ff3c 	bl	8006548 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	695a      	ldr	r2, [r3, #20]
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	091b      	lsrs	r3, r3, #4
 80036d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036dc:	441a      	add	r2, r3
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	699a      	ldr	r2, [r3, #24]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f042 0210 	orr.w	r2, r2, #16
 80036f0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f003 f8ba 	bl	8006870 <USB_ReadInterrupts>
 80036fc:	4603      	mov	r3, r0
 80036fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003702:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003706:	f040 80a7 	bne.w	8003858 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800370a:	2300      	movs	r3, #0
 800370c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4618      	mov	r0, r3
 8003714:	f003 f8bf 	bl	8006896 <USB_ReadDevAllOutEpInterrupt>
 8003718:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800371a:	e099      	b.n	8003850 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800371c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	2b00      	cmp	r3, #0
 8003724:	f000 808e 	beq.w	8003844 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800372e:	b2d2      	uxtb	r2, r2
 8003730:	4611      	mov	r1, r2
 8003732:	4618      	mov	r0, r3
 8003734:	f003 f8e3 	bl	80068fe <USB_ReadDevOutEPInterrupt>
 8003738:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	f003 0301 	and.w	r3, r3, #1
 8003740:	2b00      	cmp	r3, #0
 8003742:	d00c      	beq.n	800375e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003746:	015a      	lsls	r2, r3, #5
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	4413      	add	r3, r2
 800374c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003750:	461a      	mov	r2, r3
 8003752:	2301      	movs	r3, #1
 8003754:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003756:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 fea3 	bl	80044a4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	f003 0308 	and.w	r3, r3, #8
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00c      	beq.n	8003782 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800376a:	015a      	lsls	r2, r3, #5
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	4413      	add	r3, r2
 8003770:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003774:	461a      	mov	r2, r3
 8003776:	2308      	movs	r3, #8
 8003778:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800377a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f000 ff79 	bl	8004674 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	f003 0310 	and.w	r3, r3, #16
 8003788:	2b00      	cmp	r3, #0
 800378a:	d008      	beq.n	800379e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800378c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800378e:	015a      	lsls	r2, r3, #5
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	4413      	add	r3, r2
 8003794:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003798:	461a      	mov	r2, r3
 800379a:	2310      	movs	r3, #16
 800379c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	f003 0302 	and.w	r3, r3, #2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d030      	beq.n	800380a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80037a8:	6a3b      	ldr	r3, [r7, #32]
 80037aa:	695b      	ldr	r3, [r3, #20]
 80037ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037b0:	2b80      	cmp	r3, #128	@ 0x80
 80037b2:	d109      	bne.n	80037c8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	69fa      	ldr	r2, [r7, #28]
 80037be:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80037c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80037c6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80037c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037ca:	4613      	mov	r3, r2
 80037cc:	00db      	lsls	r3, r3, #3
 80037ce:	4413      	add	r3, r2
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	4413      	add	r3, r2
 80037da:	3304      	adds	r3, #4
 80037dc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	78db      	ldrb	r3, [r3, #3]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d108      	bne.n	80037f8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	2200      	movs	r2, #0
 80037ea:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80037ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	4619      	mov	r1, r3
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f008 fd78 	bl	800c2e8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80037f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037fa:	015a      	lsls	r2, r3, #5
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	4413      	add	r3, r2
 8003800:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003804:	461a      	mov	r2, r3
 8003806:	2302      	movs	r3, #2
 8003808:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	f003 0320 	and.w	r3, r3, #32
 8003810:	2b00      	cmp	r3, #0
 8003812:	d008      	beq.n	8003826 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003816:	015a      	lsls	r2, r3, #5
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	4413      	add	r3, r2
 800381c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003820:	461a      	mov	r2, r3
 8003822:	2320      	movs	r3, #32
 8003824:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d009      	beq.n	8003844 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003832:	015a      	lsls	r2, r3, #5
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	4413      	add	r3, r2
 8003838:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800383c:	461a      	mov	r2, r3
 800383e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003842:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003846:	3301      	adds	r3, #1
 8003848:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800384a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800384c:	085b      	lsrs	r3, r3, #1
 800384e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003852:	2b00      	cmp	r3, #0
 8003854:	f47f af62 	bne.w	800371c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4618      	mov	r0, r3
 800385e:	f003 f807 	bl	8006870 <USB_ReadInterrupts>
 8003862:	4603      	mov	r3, r0
 8003864:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003868:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800386c:	f040 80db 	bne.w	8003a26 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4618      	mov	r0, r3
 8003876:	f003 f828 	bl	80068ca <USB_ReadDevAllInEpInterrupt>
 800387a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800387c:	2300      	movs	r3, #0
 800387e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003880:	e0cd      	b.n	8003a1e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003884:	f003 0301 	and.w	r3, r3, #1
 8003888:	2b00      	cmp	r3, #0
 800388a:	f000 80c2 	beq.w	8003a12 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003894:	b2d2      	uxtb	r2, r2
 8003896:	4611      	mov	r1, r2
 8003898:	4618      	mov	r0, r3
 800389a:	f003 f84e 	bl	800693a <USB_ReadDevInEPInterrupt>
 800389e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d057      	beq.n	800395a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80038aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ac:	f003 030f 	and.w	r3, r3, #15
 80038b0:	2201      	movs	r2, #1
 80038b2:	fa02 f303 	lsl.w	r3, r2, r3
 80038b6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	43db      	mvns	r3, r3
 80038c4:	69f9      	ldr	r1, [r7, #28]
 80038c6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80038ca:	4013      	ands	r3, r2
 80038cc:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80038ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d0:	015a      	lsls	r2, r3, #5
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	4413      	add	r3, r2
 80038d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038da:	461a      	mov	r2, r3
 80038dc:	2301      	movs	r3, #1
 80038de:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	799b      	ldrb	r3, [r3, #6]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d132      	bne.n	800394e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80038e8:	6879      	ldr	r1, [r7, #4]
 80038ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038ec:	4613      	mov	r3, r2
 80038ee:	00db      	lsls	r3, r3, #3
 80038f0:	4413      	add	r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	440b      	add	r3, r1
 80038f6:	3320      	adds	r3, #32
 80038f8:	6819      	ldr	r1, [r3, #0]
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038fe:	4613      	mov	r3, r2
 8003900:	00db      	lsls	r3, r3, #3
 8003902:	4413      	add	r3, r2
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	4403      	add	r3, r0
 8003908:	331c      	adds	r3, #28
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4419      	add	r1, r3
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003912:	4613      	mov	r3, r2
 8003914:	00db      	lsls	r3, r3, #3
 8003916:	4413      	add	r3, r2
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	4403      	add	r3, r0
 800391c:	3320      	adds	r3, #32
 800391e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003922:	2b00      	cmp	r3, #0
 8003924:	d113      	bne.n	800394e <HAL_PCD_IRQHandler+0x3a2>
 8003926:	6879      	ldr	r1, [r7, #4]
 8003928:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800392a:	4613      	mov	r3, r2
 800392c:	00db      	lsls	r3, r3, #3
 800392e:	4413      	add	r3, r2
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	440b      	add	r3, r1
 8003934:	3324      	adds	r3, #36	@ 0x24
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d108      	bne.n	800394e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6818      	ldr	r0, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003946:	461a      	mov	r2, r3
 8003948:	2101      	movs	r1, #1
 800394a:	f003 f855 	bl	80069f8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800394e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003950:	b2db      	uxtb	r3, r3
 8003952:	4619      	mov	r1, r3
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f008 fc4c 	bl	800c1f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	f003 0308 	and.w	r3, r3, #8
 8003960:	2b00      	cmp	r3, #0
 8003962:	d008      	beq.n	8003976 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003966:	015a      	lsls	r2, r3, #5
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	4413      	add	r3, r2
 800396c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003970:	461a      	mov	r2, r3
 8003972:	2308      	movs	r3, #8
 8003974:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	f003 0310 	and.w	r3, r3, #16
 800397c:	2b00      	cmp	r3, #0
 800397e:	d008      	beq.n	8003992 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003982:	015a      	lsls	r2, r3, #5
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	4413      	add	r3, r2
 8003988:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800398c:	461a      	mov	r2, r3
 800398e:	2310      	movs	r3, #16
 8003990:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003998:	2b00      	cmp	r3, #0
 800399a:	d008      	beq.n	80039ae <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800399c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800399e:	015a      	lsls	r2, r3, #5
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	4413      	add	r3, r2
 80039a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039a8:	461a      	mov	r2, r3
 80039aa:	2340      	movs	r3, #64	@ 0x40
 80039ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	f003 0302 	and.w	r3, r3, #2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d023      	beq.n	8003a00 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80039b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80039ba:	6a38      	ldr	r0, [r7, #32]
 80039bc:	f002 f83c 	bl	8005a38 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80039c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039c2:	4613      	mov	r3, r2
 80039c4:	00db      	lsls	r3, r3, #3
 80039c6:	4413      	add	r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	3310      	adds	r3, #16
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	4413      	add	r3, r2
 80039d0:	3304      	adds	r3, #4
 80039d2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	78db      	ldrb	r3, [r3, #3]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d108      	bne.n	80039ee <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	2200      	movs	r2, #0
 80039e0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80039e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	4619      	mov	r1, r3
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f008 fc8f 	bl	800c30c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80039ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f0:	015a      	lsls	r2, r3, #5
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	4413      	add	r3, r2
 80039f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039fa:	461a      	mov	r2, r3
 80039fc:	2302      	movs	r3, #2
 80039fe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d003      	beq.n	8003a12 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003a0a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 fcbd 	bl	800438c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a14:	3301      	adds	r3, #1
 8003a16:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a1a:	085b      	lsrs	r3, r3, #1
 8003a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f47f af2e 	bne.w	8003882 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f002 ff20 	bl	8006870 <USB_ReadInterrupts>
 8003a30:	4603      	mov	r3, r0
 8003a32:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003a36:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003a3a:	d122      	bne.n	8003a82 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	69fa      	ldr	r2, [r7, #28]
 8003a46:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a4a:	f023 0301 	bic.w	r3, r3, #1
 8003a4e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d108      	bne.n	8003a6c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003a62:	2100      	movs	r1, #0
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f000 fea3 	bl	80047b0 <HAL_PCDEx_LPM_Callback>
 8003a6a:	e002      	b.n	8003a72 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f008 fc2d 	bl	800c2cc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	695a      	ldr	r2, [r3, #20]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003a80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f002 fef2 	bl	8006870 <USB_ReadInterrupts>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a92:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a96:	d112      	bne.n	8003abe <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d102      	bne.n	8003aae <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f008 fbe9 	bl	800c280 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	695a      	ldr	r2, [r3, #20]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003abc:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f002 fed4 	bl	8006870 <USB_ReadInterrupts>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ace:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ad2:	f040 80b7 	bne.w	8003c44 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	69fa      	ldr	r2, [r7, #28]
 8003ae0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ae4:	f023 0301 	bic.w	r3, r3, #1
 8003ae8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2110      	movs	r1, #16
 8003af0:	4618      	mov	r0, r3
 8003af2:	f001 ffa1 	bl	8005a38 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003af6:	2300      	movs	r3, #0
 8003af8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003afa:	e046      	b.n	8003b8a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003afc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003afe:	015a      	lsls	r2, r3, #5
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	4413      	add	r3, r2
 8003b04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b08:	461a      	mov	r2, r3
 8003b0a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003b0e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003b10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b12:	015a      	lsls	r2, r3, #5
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	4413      	add	r3, r2
 8003b18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b20:	0151      	lsls	r1, r2, #5
 8003b22:	69fa      	ldr	r2, [r7, #28]
 8003b24:	440a      	add	r2, r1
 8003b26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003b2a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003b2e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003b30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b32:	015a      	lsls	r2, r3, #5
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	4413      	add	r3, r2
 8003b38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003b42:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003b44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b46:	015a      	lsls	r2, r3, #5
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b54:	0151      	lsls	r1, r2, #5
 8003b56:	69fa      	ldr	r2, [r7, #28]
 8003b58:	440a      	add	r2, r1
 8003b5a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003b5e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003b62:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b66:	015a      	lsls	r2, r3, #5
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b74:	0151      	lsls	r1, r2, #5
 8003b76:	69fa      	ldr	r2, [r7, #28]
 8003b78:	440a      	add	r2, r1
 8003b7a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003b7e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003b82:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b86:	3301      	adds	r3, #1
 8003b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	791b      	ldrb	r3, [r3, #4]
 8003b8e:	461a      	mov	r2, r3
 8003b90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d3b2      	bcc.n	8003afc <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b9c:	69db      	ldr	r3, [r3, #28]
 8003b9e:	69fa      	ldr	r2, [r7, #28]
 8003ba0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ba4:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003ba8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	7bdb      	ldrb	r3, [r3, #15]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d016      	beq.n	8003be0 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bbc:	69fa      	ldr	r2, [r7, #28]
 8003bbe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003bc2:	f043 030b 	orr.w	r3, r3, #11
 8003bc6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bd2:	69fa      	ldr	r2, [r7, #28]
 8003bd4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003bd8:	f043 030b 	orr.w	r3, r3, #11
 8003bdc:	6453      	str	r3, [r2, #68]	@ 0x44
 8003bde:	e015      	b.n	8003c0c <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003be6:	695b      	ldr	r3, [r3, #20]
 8003be8:	69fa      	ldr	r2, [r7, #28]
 8003bea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003bee:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003bf2:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003bf6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	69fa      	ldr	r2, [r7, #28]
 8003c02:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c06:	f043 030b 	orr.w	r3, r3, #11
 8003c0a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	69fa      	ldr	r2, [r7, #28]
 8003c16:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c1a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003c1e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6818      	ldr	r0, [r3, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003c2e:	461a      	mov	r2, r3
 8003c30:	f002 fee2 	bl	80069f8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	695a      	ldr	r2, [r3, #20]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003c42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f002 fe11 	bl	8006870 <USB_ReadInterrupts>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c58:	d123      	bne.n	8003ca2 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f002 fea7 	bl	80069b2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f001 ff5e 	bl	8005b2a <USB_GetDevSpeed>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	461a      	mov	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681c      	ldr	r4, [r3, #0]
 8003c7a:	f001 fa09 	bl	8005090 <HAL_RCC_GetHCLKFreq>
 8003c7e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003c84:	461a      	mov	r2, r3
 8003c86:	4620      	mov	r0, r4
 8003c88:	f001 fc62 	bl	8005550 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f008 fad8 	bl	800c242 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	695a      	ldr	r2, [r3, #20]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003ca0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f002 fde2 	bl	8006870 <USB_ReadInterrupts>
 8003cac:	4603      	mov	r3, r0
 8003cae:	f003 0308 	and.w	r3, r3, #8
 8003cb2:	2b08      	cmp	r3, #8
 8003cb4:	d10a      	bne.n	8003ccc <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f008 fab5 	bl	800c226 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	695a      	ldr	r2, [r3, #20]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f002 0208 	and.w	r2, r2, #8
 8003cca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f002 fdcd 	bl	8006870 <USB_ReadInterrupts>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cdc:	2b80      	cmp	r3, #128	@ 0x80
 8003cde:	d123      	bne.n	8003d28 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003ce0:	6a3b      	ldr	r3, [r7, #32]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003ce8:	6a3b      	ldr	r3, [r7, #32]
 8003cea:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003cec:	2301      	movs	r3, #1
 8003cee:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cf0:	e014      	b.n	8003d1c <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003cf2:	6879      	ldr	r1, [r7, #4]
 8003cf4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	00db      	lsls	r3, r3, #3
 8003cfa:	4413      	add	r3, r2
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	440b      	add	r3, r1
 8003d00:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d105      	bne.n	8003d16 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	4619      	mov	r1, r3
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f000 fb0a 	bl	800432a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d18:	3301      	adds	r3, #1
 8003d1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	791b      	ldrb	r3, [r3, #4]
 8003d20:	461a      	mov	r2, r3
 8003d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d3e4      	bcc.n	8003cf2 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f002 fd9f 	bl	8006870 <USB_ReadInterrupts>
 8003d32:	4603      	mov	r3, r0
 8003d34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d38:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d3c:	d13c      	bne.n	8003db8 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d3e:	2301      	movs	r3, #1
 8003d40:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d42:	e02b      	b.n	8003d9c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d46:	015a      	lsls	r2, r3, #5
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003d54:	6879      	ldr	r1, [r7, #4]
 8003d56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d58:	4613      	mov	r3, r2
 8003d5a:	00db      	lsls	r3, r3, #3
 8003d5c:	4413      	add	r3, r2
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	440b      	add	r3, r1
 8003d62:	3318      	adds	r3, #24
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d115      	bne.n	8003d96 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003d6a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	da12      	bge.n	8003d96 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003d70:	6879      	ldr	r1, [r7, #4]
 8003d72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d74:	4613      	mov	r3, r2
 8003d76:	00db      	lsls	r3, r3, #3
 8003d78:	4413      	add	r3, r2
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	440b      	add	r3, r1
 8003d7e:	3317      	adds	r3, #23
 8003d80:	2201      	movs	r2, #1
 8003d82:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	4619      	mov	r1, r3
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f000 faca 	bl	800432a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d98:	3301      	adds	r3, #1
 8003d9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	791b      	ldrb	r3, [r3, #4]
 8003da0:	461a      	mov	r2, r3
 8003da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d3cd      	bcc.n	8003d44 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	695a      	ldr	r2, [r3, #20]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003db6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f002 fd57 	bl	8006870 <USB_ReadInterrupts>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003dc8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003dcc:	d156      	bne.n	8003e7c <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003dce:	2301      	movs	r3, #1
 8003dd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dd2:	e045      	b.n	8003e60 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd6:	015a      	lsls	r2, r3, #5
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	4413      	add	r3, r2
 8003ddc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003de4:	6879      	ldr	r1, [r7, #4]
 8003de6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003de8:	4613      	mov	r3, r2
 8003dea:	00db      	lsls	r3, r3, #3
 8003dec:	4413      	add	r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	440b      	add	r3, r1
 8003df2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d12e      	bne.n	8003e5a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003dfc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	da2b      	bge.n	8003e5a <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	0c1a      	lsrs	r2, r3, #16
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003e0c:	4053      	eors	r3, r2
 8003e0e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d121      	bne.n	8003e5a <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003e16:	6879      	ldr	r1, [r7, #4]
 8003e18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	00db      	lsls	r3, r3, #3
 8003e1e:	4413      	add	r3, r2
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	440b      	add	r3, r1
 8003e24:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003e28:	2201      	movs	r2, #1
 8003e2a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003e2c:	6a3b      	ldr	r3, [r7, #32]
 8003e2e:	699b      	ldr	r3, [r3, #24]
 8003e30:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003e34:	6a3b      	ldr	r3, [r7, #32]
 8003e36:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003e38:	6a3b      	ldr	r3, [r7, #32]
 8003e3a:	695b      	ldr	r3, [r3, #20]
 8003e3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d10a      	bne.n	8003e5a <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	69fa      	ldr	r2, [r7, #28]
 8003e4e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e52:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003e56:	6053      	str	r3, [r2, #4]
            break;
 8003e58:	e008      	b.n	8003e6c <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	791b      	ldrb	r3, [r3, #4]
 8003e64:	461a      	mov	r2, r3
 8003e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d3b3      	bcc.n	8003dd4 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	695a      	ldr	r2, [r3, #20]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003e7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4618      	mov	r0, r3
 8003e82:	f002 fcf5 	bl	8006870 <USB_ReadInterrupts>
 8003e86:	4603      	mov	r3, r0
 8003e88:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e90:	d10a      	bne.n	8003ea8 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f008 fa4c 	bl	800c330 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	695a      	ldr	r2, [r3, #20]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003ea6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4618      	mov	r0, r3
 8003eae:	f002 fcdf 	bl	8006870 <USB_ReadInterrupts>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	f003 0304 	and.w	r3, r3, #4
 8003eb8:	2b04      	cmp	r3, #4
 8003eba:	d115      	bne.n	8003ee8 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	f003 0304 	and.w	r3, r3, #4
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d002      	beq.n	8003ed4 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f008 fa3c 	bl	800c34c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	6859      	ldr	r1, [r3, #4]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	69ba      	ldr	r2, [r7, #24]
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	605a      	str	r2, [r3, #4]
 8003ee4:	e000      	b.n	8003ee8 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003ee6:	bf00      	nop
    }
  }
}
 8003ee8:	3734      	adds	r7, #52	@ 0x34
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd90      	pop	{r4, r7, pc}

08003eee <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003eee:	b580      	push	{r7, lr}
 8003ef0:	b082      	sub	sp, #8
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
 8003ef6:	460b      	mov	r3, r1
 8003ef8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d101      	bne.n	8003f08 <HAL_PCD_SetAddress+0x1a>
 8003f04:	2302      	movs	r3, #2
 8003f06:	e012      	b.n	8003f2e <HAL_PCD_SetAddress+0x40>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	78fa      	ldrb	r2, [r7, #3]
 8003f14:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	78fa      	ldrb	r2, [r7, #3]
 8003f1c:	4611      	mov	r1, r2
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f002 fc3e 	bl	80067a0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3708      	adds	r7, #8
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}

08003f36 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003f36:	b580      	push	{r7, lr}
 8003f38:	b084      	sub	sp, #16
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6078      	str	r0, [r7, #4]
 8003f3e:	4608      	mov	r0, r1
 8003f40:	4611      	mov	r1, r2
 8003f42:	461a      	mov	r2, r3
 8003f44:	4603      	mov	r3, r0
 8003f46:	70fb      	strb	r3, [r7, #3]
 8003f48:	460b      	mov	r3, r1
 8003f4a:	803b      	strh	r3, [r7, #0]
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003f50:	2300      	movs	r3, #0
 8003f52:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003f54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	da0f      	bge.n	8003f7c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f5c:	78fb      	ldrb	r3, [r7, #3]
 8003f5e:	f003 020f 	and.w	r2, r3, #15
 8003f62:	4613      	mov	r3, r2
 8003f64:	00db      	lsls	r3, r3, #3
 8003f66:	4413      	add	r3, r2
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	3310      	adds	r3, #16
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	4413      	add	r3, r2
 8003f70:	3304      	adds	r3, #4
 8003f72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2201      	movs	r2, #1
 8003f78:	705a      	strb	r2, [r3, #1]
 8003f7a:	e00f      	b.n	8003f9c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f7c:	78fb      	ldrb	r3, [r7, #3]
 8003f7e:	f003 020f 	and.w	r2, r3, #15
 8003f82:	4613      	mov	r3, r2
 8003f84:	00db      	lsls	r3, r3, #3
 8003f86:	4413      	add	r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	4413      	add	r3, r2
 8003f92:	3304      	adds	r3, #4
 8003f94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003f9c:	78fb      	ldrb	r3, [r7, #3]
 8003f9e:	f003 030f 	and.w	r3, r3, #15
 8003fa2:	b2da      	uxtb	r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003fa8:	883b      	ldrh	r3, [r7, #0]
 8003faa:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	78ba      	ldrb	r2, [r7, #2]
 8003fb6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	785b      	ldrb	r3, [r3, #1]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d004      	beq.n	8003fca <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003fca:	78bb      	ldrb	r3, [r7, #2]
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d102      	bne.n	8003fd6 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d101      	bne.n	8003fe4 <HAL_PCD_EP_Open+0xae>
 8003fe0:	2302      	movs	r3, #2
 8003fe2:	e00e      	b.n	8004002 <HAL_PCD_EP_Open+0xcc>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68f9      	ldr	r1, [r7, #12]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f001 fdbe 	bl	8005b74 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8004000:	7afb      	ldrb	r3, [r7, #11]
}
 8004002:	4618      	mov	r0, r3
 8004004:	3710      	adds	r7, #16
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}

0800400a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800400a:	b580      	push	{r7, lr}
 800400c:	b084      	sub	sp, #16
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
 8004012:	460b      	mov	r3, r1
 8004014:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004016:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800401a:	2b00      	cmp	r3, #0
 800401c:	da0f      	bge.n	800403e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800401e:	78fb      	ldrb	r3, [r7, #3]
 8004020:	f003 020f 	and.w	r2, r3, #15
 8004024:	4613      	mov	r3, r2
 8004026:	00db      	lsls	r3, r3, #3
 8004028:	4413      	add	r3, r2
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	3310      	adds	r3, #16
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	4413      	add	r3, r2
 8004032:	3304      	adds	r3, #4
 8004034:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2201      	movs	r2, #1
 800403a:	705a      	strb	r2, [r3, #1]
 800403c:	e00f      	b.n	800405e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800403e:	78fb      	ldrb	r3, [r7, #3]
 8004040:	f003 020f 	and.w	r2, r3, #15
 8004044:	4613      	mov	r3, r2
 8004046:	00db      	lsls	r3, r3, #3
 8004048:	4413      	add	r3, r2
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	4413      	add	r3, r2
 8004054:	3304      	adds	r3, #4
 8004056:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2200      	movs	r2, #0
 800405c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800405e:	78fb      	ldrb	r3, [r7, #3]
 8004060:	f003 030f 	and.w	r3, r3, #15
 8004064:	b2da      	uxtb	r2, r3
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004070:	2b01      	cmp	r3, #1
 8004072:	d101      	bne.n	8004078 <HAL_PCD_EP_Close+0x6e>
 8004074:	2302      	movs	r3, #2
 8004076:	e00e      	b.n	8004096 <HAL_PCD_EP_Close+0x8c>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68f9      	ldr	r1, [r7, #12]
 8004086:	4618      	mov	r0, r3
 8004088:	f001 fdfc 	bl	8005c84 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3710      	adds	r7, #16
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}

0800409e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800409e:	b580      	push	{r7, lr}
 80040a0:	b086      	sub	sp, #24
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	60f8      	str	r0, [r7, #12]
 80040a6:	607a      	str	r2, [r7, #4]
 80040a8:	603b      	str	r3, [r7, #0]
 80040aa:	460b      	mov	r3, r1
 80040ac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040ae:	7afb      	ldrb	r3, [r7, #11]
 80040b0:	f003 020f 	and.w	r2, r3, #15
 80040b4:	4613      	mov	r3, r2
 80040b6:	00db      	lsls	r3, r3, #3
 80040b8:	4413      	add	r3, r2
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	4413      	add	r3, r2
 80040c4:	3304      	adds	r3, #4
 80040c6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	683a      	ldr	r2, [r7, #0]
 80040d2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	2200      	movs	r2, #0
 80040d8:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	2200      	movs	r2, #0
 80040de:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040e0:	7afb      	ldrb	r3, [r7, #11]
 80040e2:	f003 030f 	and.w	r3, r3, #15
 80040e6:	b2da      	uxtb	r2, r3
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	799b      	ldrb	r3, [r3, #6]
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d102      	bne.n	80040fa <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6818      	ldr	r0, [r3, #0]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	799b      	ldrb	r3, [r3, #6]
 8004102:	461a      	mov	r2, r3
 8004104:	6979      	ldr	r1, [r7, #20]
 8004106:	f001 fe99 	bl	8005e3c <USB_EPStartXfer>

  return HAL_OK;
 800410a:	2300      	movs	r3, #0
}
 800410c:	4618      	mov	r0, r3
 800410e:	3718      	adds	r7, #24
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	460b      	mov	r3, r1
 800411e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004120:	78fb      	ldrb	r3, [r7, #3]
 8004122:	f003 020f 	and.w	r2, r3, #15
 8004126:	6879      	ldr	r1, [r7, #4]
 8004128:	4613      	mov	r3, r2
 800412a:	00db      	lsls	r3, r3, #3
 800412c:	4413      	add	r3, r2
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	440b      	add	r3, r1
 8004132:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8004136:	681b      	ldr	r3, [r3, #0]
}
 8004138:	4618      	mov	r0, r3
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	607a      	str	r2, [r7, #4]
 800414e:	603b      	str	r3, [r7, #0]
 8004150:	460b      	mov	r3, r1
 8004152:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004154:	7afb      	ldrb	r3, [r7, #11]
 8004156:	f003 020f 	and.w	r2, r3, #15
 800415a:	4613      	mov	r3, r2
 800415c:	00db      	lsls	r3, r3, #3
 800415e:	4413      	add	r3, r2
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	3310      	adds	r3, #16
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	4413      	add	r3, r2
 8004168:	3304      	adds	r3, #4
 800416a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	683a      	ldr	r2, [r7, #0]
 8004176:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	2200      	movs	r2, #0
 800417c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	2201      	movs	r2, #1
 8004182:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004184:	7afb      	ldrb	r3, [r7, #11]
 8004186:	f003 030f 	and.w	r3, r3, #15
 800418a:	b2da      	uxtb	r2, r3
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	799b      	ldrb	r3, [r3, #6]
 8004194:	2b01      	cmp	r3, #1
 8004196:	d102      	bne.n	800419e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6818      	ldr	r0, [r3, #0]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	799b      	ldrb	r3, [r3, #6]
 80041a6:	461a      	mov	r2, r3
 80041a8:	6979      	ldr	r1, [r7, #20]
 80041aa:	f001 fe47 	bl	8005e3c <USB_EPStartXfer>

  return HAL_OK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3718      	adds	r7, #24
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	460b      	mov	r3, r1
 80041c2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80041c4:	78fb      	ldrb	r3, [r7, #3]
 80041c6:	f003 030f 	and.w	r3, r3, #15
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	7912      	ldrb	r2, [r2, #4]
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d901      	bls.n	80041d6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e04f      	b.n	8004276 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80041d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	da0f      	bge.n	80041fe <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041de:	78fb      	ldrb	r3, [r7, #3]
 80041e0:	f003 020f 	and.w	r2, r3, #15
 80041e4:	4613      	mov	r3, r2
 80041e6:	00db      	lsls	r3, r3, #3
 80041e8:	4413      	add	r3, r2
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	3310      	adds	r3, #16
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	4413      	add	r3, r2
 80041f2:	3304      	adds	r3, #4
 80041f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2201      	movs	r2, #1
 80041fa:	705a      	strb	r2, [r3, #1]
 80041fc:	e00d      	b.n	800421a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80041fe:	78fa      	ldrb	r2, [r7, #3]
 8004200:	4613      	mov	r3, r2
 8004202:	00db      	lsls	r3, r3, #3
 8004204:	4413      	add	r3, r2
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	4413      	add	r3, r2
 8004210:	3304      	adds	r3, #4
 8004212:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2200      	movs	r2, #0
 8004218:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2201      	movs	r2, #1
 800421e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004220:	78fb      	ldrb	r3, [r7, #3]
 8004222:	f003 030f 	and.w	r3, r3, #15
 8004226:	b2da      	uxtb	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004232:	2b01      	cmp	r3, #1
 8004234:	d101      	bne.n	800423a <HAL_PCD_EP_SetStall+0x82>
 8004236:	2302      	movs	r3, #2
 8004238:	e01d      	b.n	8004276 <HAL_PCD_EP_SetStall+0xbe>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2201      	movs	r2, #1
 800423e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68f9      	ldr	r1, [r7, #12]
 8004248:	4618      	mov	r0, r3
 800424a:	f002 f9d5 	bl	80065f8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800424e:	78fb      	ldrb	r3, [r7, #3]
 8004250:	f003 030f 	and.w	r3, r3, #15
 8004254:	2b00      	cmp	r3, #0
 8004256:	d109      	bne.n	800426c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6818      	ldr	r0, [r3, #0]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	7999      	ldrb	r1, [r3, #6]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004266:	461a      	mov	r2, r3
 8004268:	f002 fbc6 	bl	80069f8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3710      	adds	r7, #16
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}

0800427e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800427e:	b580      	push	{r7, lr}
 8004280:	b084      	sub	sp, #16
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
 8004286:	460b      	mov	r3, r1
 8004288:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800428a:	78fb      	ldrb	r3, [r7, #3]
 800428c:	f003 030f 	and.w	r3, r3, #15
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	7912      	ldrb	r2, [r2, #4]
 8004294:	4293      	cmp	r3, r2
 8004296:	d901      	bls.n	800429c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e042      	b.n	8004322 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800429c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	da0f      	bge.n	80042c4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042a4:	78fb      	ldrb	r3, [r7, #3]
 80042a6:	f003 020f 	and.w	r2, r3, #15
 80042aa:	4613      	mov	r3, r2
 80042ac:	00db      	lsls	r3, r3, #3
 80042ae:	4413      	add	r3, r2
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	3310      	adds	r3, #16
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	4413      	add	r3, r2
 80042b8:	3304      	adds	r3, #4
 80042ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2201      	movs	r2, #1
 80042c0:	705a      	strb	r2, [r3, #1]
 80042c2:	e00f      	b.n	80042e4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042c4:	78fb      	ldrb	r3, [r7, #3]
 80042c6:	f003 020f 	and.w	r2, r3, #15
 80042ca:	4613      	mov	r3, r2
 80042cc:	00db      	lsls	r3, r3, #3
 80042ce:	4413      	add	r3, r2
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	4413      	add	r3, r2
 80042da:	3304      	adds	r3, #4
 80042dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2200      	movs	r2, #0
 80042e8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042ea:	78fb      	ldrb	r3, [r7, #3]
 80042ec:	f003 030f 	and.w	r3, r3, #15
 80042f0:	b2da      	uxtb	r2, r3
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d101      	bne.n	8004304 <HAL_PCD_EP_ClrStall+0x86>
 8004300:	2302      	movs	r3, #2
 8004302:	e00e      	b.n	8004322 <HAL_PCD_EP_ClrStall+0xa4>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68f9      	ldr	r1, [r7, #12]
 8004312:	4618      	mov	r0, r3
 8004314:	f002 f9de 	bl	80066d4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3710      	adds	r7, #16
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}

0800432a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800432a:	b580      	push	{r7, lr}
 800432c:	b084      	sub	sp, #16
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
 8004332:	460b      	mov	r3, r1
 8004334:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004336:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800433a:	2b00      	cmp	r3, #0
 800433c:	da0c      	bge.n	8004358 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800433e:	78fb      	ldrb	r3, [r7, #3]
 8004340:	f003 020f 	and.w	r2, r3, #15
 8004344:	4613      	mov	r3, r2
 8004346:	00db      	lsls	r3, r3, #3
 8004348:	4413      	add	r3, r2
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	3310      	adds	r3, #16
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	4413      	add	r3, r2
 8004352:	3304      	adds	r3, #4
 8004354:	60fb      	str	r3, [r7, #12]
 8004356:	e00c      	b.n	8004372 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004358:	78fb      	ldrb	r3, [r7, #3]
 800435a:	f003 020f 	and.w	r2, r3, #15
 800435e:	4613      	mov	r3, r2
 8004360:	00db      	lsls	r3, r3, #3
 8004362:	4413      	add	r3, r2
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	4413      	add	r3, r2
 800436e:	3304      	adds	r3, #4
 8004370:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68f9      	ldr	r1, [r7, #12]
 8004378:	4618      	mov	r0, r3
 800437a:	f001 fffd 	bl	8006378 <USB_EPStopXfer>
 800437e:	4603      	mov	r3, r0
 8004380:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004382:	7afb      	ldrb	r3, [r7, #11]
}
 8004384:	4618      	mov	r0, r3
 8004386:	3710      	adds	r7, #16
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b08a      	sub	sp, #40	@ 0x28
 8004390:	af02      	add	r7, sp, #8
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80043a0:	683a      	ldr	r2, [r7, #0]
 80043a2:	4613      	mov	r3, r2
 80043a4:	00db      	lsls	r3, r3, #3
 80043a6:	4413      	add	r3, r2
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	3310      	adds	r3, #16
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	4413      	add	r3, r2
 80043b0:	3304      	adds	r3, #4
 80043b2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	695a      	ldr	r2, [r3, #20]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d901      	bls.n	80043c4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e06b      	b.n	800449c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	691a      	ldr	r2, [r3, #16]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	695b      	ldr	r3, [r3, #20]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	69fa      	ldr	r2, [r7, #28]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d902      	bls.n	80043e0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	3303      	adds	r3, #3
 80043e4:	089b      	lsrs	r3, r3, #2
 80043e6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80043e8:	e02a      	b.n	8004440 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	691a      	ldr	r2, [r3, #16]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	69fa      	ldr	r2, [r7, #28]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d902      	bls.n	8004406 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	3303      	adds	r3, #3
 800440a:	089b      	lsrs	r3, r3, #2
 800440c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	68d9      	ldr	r1, [r3, #12]
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	b2da      	uxtb	r2, r3
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800441e:	9300      	str	r3, [sp, #0]
 8004420:	4603      	mov	r3, r0
 8004422:	6978      	ldr	r0, [r7, #20]
 8004424:	f002 f852 	bl	80064cc <USB_WritePacket>

    ep->xfer_buff  += len;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	68da      	ldr	r2, [r3, #12]
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	441a      	add	r2, r3
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	695a      	ldr	r2, [r3, #20]
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	441a      	add	r2, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	015a      	lsls	r2, r3, #5
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	4413      	add	r3, r2
 8004448:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004450:	69ba      	ldr	r2, [r7, #24]
 8004452:	429a      	cmp	r2, r3
 8004454:	d809      	bhi.n	800446a <PCD_WriteEmptyTxFifo+0xde>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	695a      	ldr	r2, [r3, #20]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800445e:	429a      	cmp	r2, r3
 8004460:	d203      	bcs.n	800446a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d1bf      	bne.n	80043ea <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	691a      	ldr	r2, [r3, #16]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	695b      	ldr	r3, [r3, #20]
 8004472:	429a      	cmp	r2, r3
 8004474:	d811      	bhi.n	800449a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	f003 030f 	and.w	r3, r3, #15
 800447c:	2201      	movs	r2, #1
 800447e:	fa02 f303 	lsl.w	r3, r2, r3
 8004482:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800448a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	43db      	mvns	r3, r3
 8004490:	6939      	ldr	r1, [r7, #16]
 8004492:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004496:	4013      	ands	r3, r2
 8004498:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	3720      	adds	r7, #32
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b088      	sub	sp, #32
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	333c      	adds	r3, #60	@ 0x3c
 80044bc:	3304      	adds	r3, #4
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	015a      	lsls	r2, r3, #5
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	4413      	add	r3, r2
 80044ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	799b      	ldrb	r3, [r3, #6]
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d17b      	bne.n	80045d2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	f003 0308 	and.w	r3, r3, #8
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d015      	beq.n	8004510 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	4a61      	ldr	r2, [pc, #388]	@ (800466c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	f240 80b9 	bls.w	8004660 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f000 80b3 	beq.w	8004660 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	015a      	lsls	r2, r3, #5
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	4413      	add	r3, r2
 8004502:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004506:	461a      	mov	r2, r3
 8004508:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800450c:	6093      	str	r3, [r2, #8]
 800450e:	e0a7      	b.n	8004660 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	f003 0320 	and.w	r3, r3, #32
 8004516:	2b00      	cmp	r3, #0
 8004518:	d009      	beq.n	800452e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	015a      	lsls	r2, r3, #5
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	4413      	add	r3, r2
 8004522:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004526:	461a      	mov	r2, r3
 8004528:	2320      	movs	r3, #32
 800452a:	6093      	str	r3, [r2, #8]
 800452c:	e098      	b.n	8004660 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004534:	2b00      	cmp	r3, #0
 8004536:	f040 8093 	bne.w	8004660 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	4a4b      	ldr	r2, [pc, #300]	@ (800466c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d90f      	bls.n	8004562 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004548:	2b00      	cmp	r3, #0
 800454a:	d00a      	beq.n	8004562 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	015a      	lsls	r2, r3, #5
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	4413      	add	r3, r2
 8004554:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004558:	461a      	mov	r2, r3
 800455a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800455e:	6093      	str	r3, [r2, #8]
 8004560:	e07e      	b.n	8004660 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004562:	683a      	ldr	r2, [r7, #0]
 8004564:	4613      	mov	r3, r2
 8004566:	00db      	lsls	r3, r3, #3
 8004568:	4413      	add	r3, r2
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	4413      	add	r3, r2
 8004574:	3304      	adds	r3, #4
 8004576:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6a1a      	ldr	r2, [r3, #32]
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	0159      	lsls	r1, r3, #5
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	440b      	add	r3, r1
 8004584:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800458e:	1ad2      	subs	r2, r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d114      	bne.n	80045c4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d109      	bne.n	80045b6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6818      	ldr	r0, [r3, #0]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80045ac:	461a      	mov	r2, r3
 80045ae:	2101      	movs	r1, #1
 80045b0:	f002 fa22 	bl	80069f8 <USB_EP0_OutStart>
 80045b4:	e006      	b.n	80045c4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	68da      	ldr	r2, [r3, #12]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	441a      	add	r2, r3
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	4619      	mov	r1, r3
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f007 fdf6 	bl	800c1bc <HAL_PCD_DataOutStageCallback>
 80045d0:	e046      	b.n	8004660 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	4a26      	ldr	r2, [pc, #152]	@ (8004670 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d124      	bne.n	8004624 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d00a      	beq.n	80045fa <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	015a      	lsls	r2, r3, #5
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	4413      	add	r3, r2
 80045ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045f0:	461a      	mov	r2, r3
 80045f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045f6:	6093      	str	r3, [r2, #8]
 80045f8:	e032      	b.n	8004660 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	f003 0320 	and.w	r3, r3, #32
 8004600:	2b00      	cmp	r3, #0
 8004602:	d008      	beq.n	8004616 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	015a      	lsls	r2, r3, #5
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	4413      	add	r3, r2
 800460c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004610:	461a      	mov	r2, r3
 8004612:	2320      	movs	r3, #32
 8004614:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	b2db      	uxtb	r3, r3
 800461a:	4619      	mov	r1, r3
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f007 fdcd 	bl	800c1bc <HAL_PCD_DataOutStageCallback>
 8004622:	e01d      	b.n	8004660 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d114      	bne.n	8004654 <PCD_EP_OutXfrComplete_int+0x1b0>
 800462a:	6879      	ldr	r1, [r7, #4]
 800462c:	683a      	ldr	r2, [r7, #0]
 800462e:	4613      	mov	r3, r2
 8004630:	00db      	lsls	r3, r3, #3
 8004632:	4413      	add	r3, r2
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	440b      	add	r3, r1
 8004638:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d108      	bne.n	8004654 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6818      	ldr	r0, [r3, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800464c:	461a      	mov	r2, r3
 800464e:	2100      	movs	r1, #0
 8004650:	f002 f9d2 	bl	80069f8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	b2db      	uxtb	r3, r3
 8004658:	4619      	mov	r1, r3
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f007 fdae 	bl	800c1bc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3720      	adds	r7, #32
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	4f54300a 	.word	0x4f54300a
 8004670:	4f54310a 	.word	0x4f54310a

08004674 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b086      	sub	sp, #24
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	333c      	adds	r3, #60	@ 0x3c
 800468c:	3304      	adds	r3, #4
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	015a      	lsls	r2, r3, #5
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	4413      	add	r3, r2
 800469a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	4a15      	ldr	r2, [pc, #84]	@ (80046fc <PCD_EP_OutSetupPacket_int+0x88>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d90e      	bls.n	80046c8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d009      	beq.n	80046c8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	015a      	lsls	r2, r3, #5
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	4413      	add	r3, r2
 80046bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046c0:	461a      	mov	r2, r3
 80046c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046c6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f007 fd65 	bl	800c198 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	4a0a      	ldr	r2, [pc, #40]	@ (80046fc <PCD_EP_OutSetupPacket_int+0x88>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d90c      	bls.n	80046f0 <PCD_EP_OutSetupPacket_int+0x7c>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	799b      	ldrb	r3, [r3, #6]
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d108      	bne.n	80046f0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6818      	ldr	r0, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80046e8:	461a      	mov	r2, r3
 80046ea:	2101      	movs	r1, #1
 80046ec:	f002 f984 	bl	80069f8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3718      	adds	r7, #24
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	4f54300a 	.word	0x4f54300a

08004700 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004700:	b480      	push	{r7}
 8004702:	b085      	sub	sp, #20
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	460b      	mov	r3, r1
 800470a:	70fb      	strb	r3, [r7, #3]
 800470c:	4613      	mov	r3, r2
 800470e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004716:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004718:	78fb      	ldrb	r3, [r7, #3]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d107      	bne.n	800472e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800471e:	883b      	ldrh	r3, [r7, #0]
 8004720:	0419      	lsls	r1, r3, #16
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	68ba      	ldr	r2, [r7, #8]
 8004728:	430a      	orrs	r2, r1
 800472a:	629a      	str	r2, [r3, #40]	@ 0x28
 800472c:	e028      	b.n	8004780 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004734:	0c1b      	lsrs	r3, r3, #16
 8004736:	68ba      	ldr	r2, [r7, #8]
 8004738:	4413      	add	r3, r2
 800473a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800473c:	2300      	movs	r3, #0
 800473e:	73fb      	strb	r3, [r7, #15]
 8004740:	e00d      	b.n	800475e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	7bfb      	ldrb	r3, [r7, #15]
 8004748:	3340      	adds	r3, #64	@ 0x40
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	4413      	add	r3, r2
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	0c1b      	lsrs	r3, r3, #16
 8004752:	68ba      	ldr	r2, [r7, #8]
 8004754:	4413      	add	r3, r2
 8004756:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004758:	7bfb      	ldrb	r3, [r7, #15]
 800475a:	3301      	adds	r3, #1
 800475c:	73fb      	strb	r3, [r7, #15]
 800475e:	7bfa      	ldrb	r2, [r7, #15]
 8004760:	78fb      	ldrb	r3, [r7, #3]
 8004762:	3b01      	subs	r3, #1
 8004764:	429a      	cmp	r2, r3
 8004766:	d3ec      	bcc.n	8004742 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004768:	883b      	ldrh	r3, [r7, #0]
 800476a:	0418      	lsls	r0, r3, #16
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6819      	ldr	r1, [r3, #0]
 8004770:	78fb      	ldrb	r3, [r7, #3]
 8004772:	3b01      	subs	r3, #1
 8004774:	68ba      	ldr	r2, [r7, #8]
 8004776:	4302      	orrs	r2, r0
 8004778:	3340      	adds	r3, #64	@ 0x40
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	440b      	add	r3, r1
 800477e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3714      	adds	r7, #20
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr

0800478e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800478e:	b480      	push	{r7}
 8004790:	b083      	sub	sp, #12
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
 8004796:	460b      	mov	r3, r1
 8004798:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	887a      	ldrh	r2, [r7, #2]
 80047a0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80047a2:	2300      	movs	r3, #0
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	460b      	mov	r3, r1
 80047ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80047bc:	bf00      	nop
 80047be:	370c      	adds	r7, #12
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b086      	sub	sp, #24
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d101      	bne.n	80047da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e267      	b.n	8004caa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0301 	and.w	r3, r3, #1
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d075      	beq.n	80048d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80047e6:	4b88      	ldr	r3, [pc, #544]	@ (8004a08 <HAL_RCC_OscConfig+0x240>)
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f003 030c 	and.w	r3, r3, #12
 80047ee:	2b04      	cmp	r3, #4
 80047f0:	d00c      	beq.n	800480c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047f2:	4b85      	ldr	r3, [pc, #532]	@ (8004a08 <HAL_RCC_OscConfig+0x240>)
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80047fa:	2b08      	cmp	r3, #8
 80047fc:	d112      	bne.n	8004824 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047fe:	4b82      	ldr	r3, [pc, #520]	@ (8004a08 <HAL_RCC_OscConfig+0x240>)
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004806:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800480a:	d10b      	bne.n	8004824 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800480c:	4b7e      	ldr	r3, [pc, #504]	@ (8004a08 <HAL_RCC_OscConfig+0x240>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004814:	2b00      	cmp	r3, #0
 8004816:	d05b      	beq.n	80048d0 <HAL_RCC_OscConfig+0x108>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d157      	bne.n	80048d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e242      	b.n	8004caa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800482c:	d106      	bne.n	800483c <HAL_RCC_OscConfig+0x74>
 800482e:	4b76      	ldr	r3, [pc, #472]	@ (8004a08 <HAL_RCC_OscConfig+0x240>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a75      	ldr	r2, [pc, #468]	@ (8004a08 <HAL_RCC_OscConfig+0x240>)
 8004834:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004838:	6013      	str	r3, [r2, #0]
 800483a:	e01d      	b.n	8004878 <HAL_RCC_OscConfig+0xb0>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004844:	d10c      	bne.n	8004860 <HAL_RCC_OscConfig+0x98>
 8004846:	4b70      	ldr	r3, [pc, #448]	@ (8004a08 <HAL_RCC_OscConfig+0x240>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a6f      	ldr	r2, [pc, #444]	@ (8004a08 <HAL_RCC_OscConfig+0x240>)
 800484c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004850:	6013      	str	r3, [r2, #0]
 8004852:	4b6d      	ldr	r3, [pc, #436]	@ (8004a08 <HAL_RCC_OscConfig+0x240>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a6c      	ldr	r2, [pc, #432]	@ (8004a08 <HAL_RCC_OscConfig+0x240>)
 8004858:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800485c:	6013      	str	r3, [r2, #0]
 800485e:	e00b      	b.n	8004878 <HAL_RCC_OscConfig+0xb0>
 8004860:	4b69      	ldr	r3, [pc, #420]	@ (8004a08 <HAL_RCC_OscConfig+0x240>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a68      	ldr	r2, [pc, #416]	@ (8004a08 <HAL_RCC_OscConfig+0x240>)
 8004866:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800486a:	6013      	str	r3, [r2, #0]
 800486c:	4b66      	ldr	r3, [pc, #408]	@ (8004a08 <HAL_RCC_OscConfig+0x240>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a65      	ldr	r2, [pc, #404]	@ (8004a08 <HAL_RCC_OscConfig+0x240>)
 8004872:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004876:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d013      	beq.n	80048a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004880:	f7fd f908 	bl	8001a94 <HAL_GetTick>
 8004884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004886:	e008      	b.n	800489a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004888:	f7fd f904 	bl	8001a94 <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	2b64      	cmp	r3, #100	@ 0x64
 8004894:	d901      	bls.n	800489a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e207      	b.n	8004caa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800489a:	4b5b      	ldr	r3, [pc, #364]	@ (8004a08 <HAL_RCC_OscConfig+0x240>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d0f0      	beq.n	8004888 <HAL_RCC_OscConfig+0xc0>
 80048a6:	e014      	b.n	80048d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048a8:	f7fd f8f4 	bl	8001a94 <HAL_GetTick>
 80048ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048ae:	e008      	b.n	80048c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048b0:	f7fd f8f0 	bl	8001a94 <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	2b64      	cmp	r3, #100	@ 0x64
 80048bc:	d901      	bls.n	80048c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e1f3      	b.n	8004caa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048c2:	4b51      	ldr	r3, [pc, #324]	@ (8004a08 <HAL_RCC_OscConfig+0x240>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1f0      	bne.n	80048b0 <HAL_RCC_OscConfig+0xe8>
 80048ce:	e000      	b.n	80048d2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0302 	and.w	r3, r3, #2
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d063      	beq.n	80049a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80048de:	4b4a      	ldr	r3, [pc, #296]	@ (8004a08 <HAL_RCC_OscConfig+0x240>)
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f003 030c 	and.w	r3, r3, #12
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00b      	beq.n	8004902 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048ea:	4b47      	ldr	r3, [pc, #284]	@ (8004a08 <HAL_RCC_OscConfig+0x240>)
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80048f2:	2b08      	cmp	r3, #8
 80048f4:	d11c      	bne.n	8004930 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048f6:	4b44      	ldr	r3, [pc, #272]	@ (8004a08 <HAL_RCC_OscConfig+0x240>)
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d116      	bne.n	8004930 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004902:	4b41      	ldr	r3, [pc, #260]	@ (8004a08 <HAL_RCC_OscConfig+0x240>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0302 	and.w	r3, r3, #2
 800490a:	2b00      	cmp	r3, #0
 800490c:	d005      	beq.n	800491a <HAL_RCC_OscConfig+0x152>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	2b01      	cmp	r3, #1
 8004914:	d001      	beq.n	800491a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e1c7      	b.n	8004caa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800491a:	4b3b      	ldr	r3, [pc, #236]	@ (8004a08 <HAL_RCC_OscConfig+0x240>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	00db      	lsls	r3, r3, #3
 8004928:	4937      	ldr	r1, [pc, #220]	@ (8004a08 <HAL_RCC_OscConfig+0x240>)
 800492a:	4313      	orrs	r3, r2
 800492c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800492e:	e03a      	b.n	80049a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d020      	beq.n	800497a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004938:	4b34      	ldr	r3, [pc, #208]	@ (8004a0c <HAL_RCC_OscConfig+0x244>)
 800493a:	2201      	movs	r2, #1
 800493c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800493e:	f7fd f8a9 	bl	8001a94 <HAL_GetTick>
 8004942:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004944:	e008      	b.n	8004958 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004946:	f7fd f8a5 	bl	8001a94 <HAL_GetTick>
 800494a:	4602      	mov	r2, r0
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	2b02      	cmp	r3, #2
 8004952:	d901      	bls.n	8004958 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e1a8      	b.n	8004caa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004958:	4b2b      	ldr	r3, [pc, #172]	@ (8004a08 <HAL_RCC_OscConfig+0x240>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0302 	and.w	r3, r3, #2
 8004960:	2b00      	cmp	r3, #0
 8004962:	d0f0      	beq.n	8004946 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004964:	4b28      	ldr	r3, [pc, #160]	@ (8004a08 <HAL_RCC_OscConfig+0x240>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	00db      	lsls	r3, r3, #3
 8004972:	4925      	ldr	r1, [pc, #148]	@ (8004a08 <HAL_RCC_OscConfig+0x240>)
 8004974:	4313      	orrs	r3, r2
 8004976:	600b      	str	r3, [r1, #0]
 8004978:	e015      	b.n	80049a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800497a:	4b24      	ldr	r3, [pc, #144]	@ (8004a0c <HAL_RCC_OscConfig+0x244>)
 800497c:	2200      	movs	r2, #0
 800497e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004980:	f7fd f888 	bl	8001a94 <HAL_GetTick>
 8004984:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004986:	e008      	b.n	800499a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004988:	f7fd f884 	bl	8001a94 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	2b02      	cmp	r3, #2
 8004994:	d901      	bls.n	800499a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e187      	b.n	8004caa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800499a:	4b1b      	ldr	r3, [pc, #108]	@ (8004a08 <HAL_RCC_OscConfig+0x240>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0302 	and.w	r3, r3, #2
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d1f0      	bne.n	8004988 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0308 	and.w	r3, r3, #8
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d036      	beq.n	8004a20 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	695b      	ldr	r3, [r3, #20]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d016      	beq.n	80049e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049ba:	4b15      	ldr	r3, [pc, #84]	@ (8004a10 <HAL_RCC_OscConfig+0x248>)
 80049bc:	2201      	movs	r2, #1
 80049be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049c0:	f7fd f868 	bl	8001a94 <HAL_GetTick>
 80049c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049c6:	e008      	b.n	80049da <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049c8:	f7fd f864 	bl	8001a94 <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d901      	bls.n	80049da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e167      	b.n	8004caa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049da:	4b0b      	ldr	r3, [pc, #44]	@ (8004a08 <HAL_RCC_OscConfig+0x240>)
 80049dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049de:	f003 0302 	and.w	r3, r3, #2
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d0f0      	beq.n	80049c8 <HAL_RCC_OscConfig+0x200>
 80049e6:	e01b      	b.n	8004a20 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049e8:	4b09      	ldr	r3, [pc, #36]	@ (8004a10 <HAL_RCC_OscConfig+0x248>)
 80049ea:	2200      	movs	r2, #0
 80049ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049ee:	f7fd f851 	bl	8001a94 <HAL_GetTick>
 80049f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049f4:	e00e      	b.n	8004a14 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049f6:	f7fd f84d 	bl	8001a94 <HAL_GetTick>
 80049fa:	4602      	mov	r2, r0
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	d907      	bls.n	8004a14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	e150      	b.n	8004caa <HAL_RCC_OscConfig+0x4e2>
 8004a08:	40023800 	.word	0x40023800
 8004a0c:	42470000 	.word	0x42470000
 8004a10:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a14:	4b88      	ldr	r3, [pc, #544]	@ (8004c38 <HAL_RCC_OscConfig+0x470>)
 8004a16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a18:	f003 0302 	and.w	r3, r3, #2
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d1ea      	bne.n	80049f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0304 	and.w	r3, r3, #4
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	f000 8097 	beq.w	8004b5c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a32:	4b81      	ldr	r3, [pc, #516]	@ (8004c38 <HAL_RCC_OscConfig+0x470>)
 8004a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d10f      	bne.n	8004a5e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a3e:	2300      	movs	r3, #0
 8004a40:	60bb      	str	r3, [r7, #8]
 8004a42:	4b7d      	ldr	r3, [pc, #500]	@ (8004c38 <HAL_RCC_OscConfig+0x470>)
 8004a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a46:	4a7c      	ldr	r2, [pc, #496]	@ (8004c38 <HAL_RCC_OscConfig+0x470>)
 8004a48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a4e:	4b7a      	ldr	r3, [pc, #488]	@ (8004c38 <HAL_RCC_OscConfig+0x470>)
 8004a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a56:	60bb      	str	r3, [r7, #8]
 8004a58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a5e:	4b77      	ldr	r3, [pc, #476]	@ (8004c3c <HAL_RCC_OscConfig+0x474>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d118      	bne.n	8004a9c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a6a:	4b74      	ldr	r3, [pc, #464]	@ (8004c3c <HAL_RCC_OscConfig+0x474>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a73      	ldr	r2, [pc, #460]	@ (8004c3c <HAL_RCC_OscConfig+0x474>)
 8004a70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a76:	f7fd f80d 	bl	8001a94 <HAL_GetTick>
 8004a7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a7c:	e008      	b.n	8004a90 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a7e:	f7fd f809 	bl	8001a94 <HAL_GetTick>
 8004a82:	4602      	mov	r2, r0
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d901      	bls.n	8004a90 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	e10c      	b.n	8004caa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a90:	4b6a      	ldr	r3, [pc, #424]	@ (8004c3c <HAL_RCC_OscConfig+0x474>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d0f0      	beq.n	8004a7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d106      	bne.n	8004ab2 <HAL_RCC_OscConfig+0x2ea>
 8004aa4:	4b64      	ldr	r3, [pc, #400]	@ (8004c38 <HAL_RCC_OscConfig+0x470>)
 8004aa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aa8:	4a63      	ldr	r2, [pc, #396]	@ (8004c38 <HAL_RCC_OscConfig+0x470>)
 8004aaa:	f043 0301 	orr.w	r3, r3, #1
 8004aae:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ab0:	e01c      	b.n	8004aec <HAL_RCC_OscConfig+0x324>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	2b05      	cmp	r3, #5
 8004ab8:	d10c      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x30c>
 8004aba:	4b5f      	ldr	r3, [pc, #380]	@ (8004c38 <HAL_RCC_OscConfig+0x470>)
 8004abc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004abe:	4a5e      	ldr	r2, [pc, #376]	@ (8004c38 <HAL_RCC_OscConfig+0x470>)
 8004ac0:	f043 0304 	orr.w	r3, r3, #4
 8004ac4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ac6:	4b5c      	ldr	r3, [pc, #368]	@ (8004c38 <HAL_RCC_OscConfig+0x470>)
 8004ac8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aca:	4a5b      	ldr	r2, [pc, #364]	@ (8004c38 <HAL_RCC_OscConfig+0x470>)
 8004acc:	f043 0301 	orr.w	r3, r3, #1
 8004ad0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ad2:	e00b      	b.n	8004aec <HAL_RCC_OscConfig+0x324>
 8004ad4:	4b58      	ldr	r3, [pc, #352]	@ (8004c38 <HAL_RCC_OscConfig+0x470>)
 8004ad6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ad8:	4a57      	ldr	r2, [pc, #348]	@ (8004c38 <HAL_RCC_OscConfig+0x470>)
 8004ada:	f023 0301 	bic.w	r3, r3, #1
 8004ade:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ae0:	4b55      	ldr	r3, [pc, #340]	@ (8004c38 <HAL_RCC_OscConfig+0x470>)
 8004ae2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ae4:	4a54      	ldr	r2, [pc, #336]	@ (8004c38 <HAL_RCC_OscConfig+0x470>)
 8004ae6:	f023 0304 	bic.w	r3, r3, #4
 8004aea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d015      	beq.n	8004b20 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004af4:	f7fc ffce 	bl	8001a94 <HAL_GetTick>
 8004af8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004afa:	e00a      	b.n	8004b12 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004afc:	f7fc ffca 	bl	8001a94 <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d901      	bls.n	8004b12 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e0cb      	b.n	8004caa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b12:	4b49      	ldr	r3, [pc, #292]	@ (8004c38 <HAL_RCC_OscConfig+0x470>)
 8004b14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b16:	f003 0302 	and.w	r3, r3, #2
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d0ee      	beq.n	8004afc <HAL_RCC_OscConfig+0x334>
 8004b1e:	e014      	b.n	8004b4a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b20:	f7fc ffb8 	bl	8001a94 <HAL_GetTick>
 8004b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b26:	e00a      	b.n	8004b3e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b28:	f7fc ffb4 	bl	8001a94 <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d901      	bls.n	8004b3e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e0b5      	b.n	8004caa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b3e:	4b3e      	ldr	r3, [pc, #248]	@ (8004c38 <HAL_RCC_OscConfig+0x470>)
 8004b40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b42:	f003 0302 	and.w	r3, r3, #2
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1ee      	bne.n	8004b28 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004b4a:	7dfb      	ldrb	r3, [r7, #23]
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d105      	bne.n	8004b5c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b50:	4b39      	ldr	r3, [pc, #228]	@ (8004c38 <HAL_RCC_OscConfig+0x470>)
 8004b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b54:	4a38      	ldr	r2, [pc, #224]	@ (8004c38 <HAL_RCC_OscConfig+0x470>)
 8004b56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b5a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	699b      	ldr	r3, [r3, #24]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	f000 80a1 	beq.w	8004ca8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b66:	4b34      	ldr	r3, [pc, #208]	@ (8004c38 <HAL_RCC_OscConfig+0x470>)
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	f003 030c 	and.w	r3, r3, #12
 8004b6e:	2b08      	cmp	r3, #8
 8004b70:	d05c      	beq.n	8004c2c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	699b      	ldr	r3, [r3, #24]
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d141      	bne.n	8004bfe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b7a:	4b31      	ldr	r3, [pc, #196]	@ (8004c40 <HAL_RCC_OscConfig+0x478>)
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b80:	f7fc ff88 	bl	8001a94 <HAL_GetTick>
 8004b84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b86:	e008      	b.n	8004b9a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b88:	f7fc ff84 	bl	8001a94 <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d901      	bls.n	8004b9a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e087      	b.n	8004caa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b9a:	4b27      	ldr	r3, [pc, #156]	@ (8004c38 <HAL_RCC_OscConfig+0x470>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d1f0      	bne.n	8004b88 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	69da      	ldr	r2, [r3, #28]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a1b      	ldr	r3, [r3, #32]
 8004bae:	431a      	orrs	r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb4:	019b      	lsls	r3, r3, #6
 8004bb6:	431a      	orrs	r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bbc:	085b      	lsrs	r3, r3, #1
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	041b      	lsls	r3, r3, #16
 8004bc2:	431a      	orrs	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bc8:	061b      	lsls	r3, r3, #24
 8004bca:	491b      	ldr	r1, [pc, #108]	@ (8004c38 <HAL_RCC_OscConfig+0x470>)
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bd0:	4b1b      	ldr	r3, [pc, #108]	@ (8004c40 <HAL_RCC_OscConfig+0x478>)
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bd6:	f7fc ff5d 	bl	8001a94 <HAL_GetTick>
 8004bda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bdc:	e008      	b.n	8004bf0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bde:	f7fc ff59 	bl	8001a94 <HAL_GetTick>
 8004be2:	4602      	mov	r2, r0
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d901      	bls.n	8004bf0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	e05c      	b.n	8004caa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bf0:	4b11      	ldr	r3, [pc, #68]	@ (8004c38 <HAL_RCC_OscConfig+0x470>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d0f0      	beq.n	8004bde <HAL_RCC_OscConfig+0x416>
 8004bfc:	e054      	b.n	8004ca8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bfe:	4b10      	ldr	r3, [pc, #64]	@ (8004c40 <HAL_RCC_OscConfig+0x478>)
 8004c00:	2200      	movs	r2, #0
 8004c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c04:	f7fc ff46 	bl	8001a94 <HAL_GetTick>
 8004c08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c0a:	e008      	b.n	8004c1e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c0c:	f7fc ff42 	bl	8001a94 <HAL_GetTick>
 8004c10:	4602      	mov	r2, r0
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d901      	bls.n	8004c1e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e045      	b.n	8004caa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c1e:	4b06      	ldr	r3, [pc, #24]	@ (8004c38 <HAL_RCC_OscConfig+0x470>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d1f0      	bne.n	8004c0c <HAL_RCC_OscConfig+0x444>
 8004c2a:	e03d      	b.n	8004ca8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	699b      	ldr	r3, [r3, #24]
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d107      	bne.n	8004c44 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e038      	b.n	8004caa <HAL_RCC_OscConfig+0x4e2>
 8004c38:	40023800 	.word	0x40023800
 8004c3c:	40007000 	.word	0x40007000
 8004c40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c44:	4b1b      	ldr	r3, [pc, #108]	@ (8004cb4 <HAL_RCC_OscConfig+0x4ec>)
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	699b      	ldr	r3, [r3, #24]
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d028      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d121      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d11a      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004c74:	4013      	ands	r3, r2
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004c7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d111      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c8a:	085b      	lsrs	r3, r3, #1
 8004c8c:	3b01      	subs	r3, #1
 8004c8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d107      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d001      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e000      	b.n	8004caa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3718      	adds	r7, #24
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	40023800 	.word	0x40023800

08004cb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d101      	bne.n	8004ccc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e0cc      	b.n	8004e66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ccc:	4b68      	ldr	r3, [pc, #416]	@ (8004e70 <HAL_RCC_ClockConfig+0x1b8>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0307 	and.w	r3, r3, #7
 8004cd4:	683a      	ldr	r2, [r7, #0]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d90c      	bls.n	8004cf4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cda:	4b65      	ldr	r3, [pc, #404]	@ (8004e70 <HAL_RCC_ClockConfig+0x1b8>)
 8004cdc:	683a      	ldr	r2, [r7, #0]
 8004cde:	b2d2      	uxtb	r2, r2
 8004ce0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ce2:	4b63      	ldr	r3, [pc, #396]	@ (8004e70 <HAL_RCC_ClockConfig+0x1b8>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0307 	and.w	r3, r3, #7
 8004cea:	683a      	ldr	r2, [r7, #0]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d001      	beq.n	8004cf4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e0b8      	b.n	8004e66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0302 	and.w	r3, r3, #2
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d020      	beq.n	8004d42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 0304 	and.w	r3, r3, #4
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d005      	beq.n	8004d18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d0c:	4b59      	ldr	r3, [pc, #356]	@ (8004e74 <HAL_RCC_ClockConfig+0x1bc>)
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	4a58      	ldr	r2, [pc, #352]	@ (8004e74 <HAL_RCC_ClockConfig+0x1bc>)
 8004d12:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004d16:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0308 	and.w	r3, r3, #8
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d005      	beq.n	8004d30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d24:	4b53      	ldr	r3, [pc, #332]	@ (8004e74 <HAL_RCC_ClockConfig+0x1bc>)
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	4a52      	ldr	r2, [pc, #328]	@ (8004e74 <HAL_RCC_ClockConfig+0x1bc>)
 8004d2a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004d2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d30:	4b50      	ldr	r3, [pc, #320]	@ (8004e74 <HAL_RCC_ClockConfig+0x1bc>)
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	494d      	ldr	r1, [pc, #308]	@ (8004e74 <HAL_RCC_ClockConfig+0x1bc>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0301 	and.w	r3, r3, #1
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d044      	beq.n	8004dd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d107      	bne.n	8004d66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d56:	4b47      	ldr	r3, [pc, #284]	@ (8004e74 <HAL_RCC_ClockConfig+0x1bc>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d119      	bne.n	8004d96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e07f      	b.n	8004e66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d003      	beq.n	8004d76 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d72:	2b03      	cmp	r3, #3
 8004d74:	d107      	bne.n	8004d86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d76:	4b3f      	ldr	r3, [pc, #252]	@ (8004e74 <HAL_RCC_ClockConfig+0x1bc>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d109      	bne.n	8004d96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e06f      	b.n	8004e66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d86:	4b3b      	ldr	r3, [pc, #236]	@ (8004e74 <HAL_RCC_ClockConfig+0x1bc>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 0302 	and.w	r3, r3, #2
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d101      	bne.n	8004d96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e067      	b.n	8004e66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d96:	4b37      	ldr	r3, [pc, #220]	@ (8004e74 <HAL_RCC_ClockConfig+0x1bc>)
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f023 0203 	bic.w	r2, r3, #3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	4934      	ldr	r1, [pc, #208]	@ (8004e74 <HAL_RCC_ClockConfig+0x1bc>)
 8004da4:	4313      	orrs	r3, r2
 8004da6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004da8:	f7fc fe74 	bl	8001a94 <HAL_GetTick>
 8004dac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dae:	e00a      	b.n	8004dc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004db0:	f7fc fe70 	bl	8001a94 <HAL_GetTick>
 8004db4:	4602      	mov	r2, r0
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d901      	bls.n	8004dc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e04f      	b.n	8004e66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dc6:	4b2b      	ldr	r3, [pc, #172]	@ (8004e74 <HAL_RCC_ClockConfig+0x1bc>)
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	f003 020c 	and.w	r2, r3, #12
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d1eb      	bne.n	8004db0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004dd8:	4b25      	ldr	r3, [pc, #148]	@ (8004e70 <HAL_RCC_ClockConfig+0x1b8>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0307 	and.w	r3, r3, #7
 8004de0:	683a      	ldr	r2, [r7, #0]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d20c      	bcs.n	8004e00 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004de6:	4b22      	ldr	r3, [pc, #136]	@ (8004e70 <HAL_RCC_ClockConfig+0x1b8>)
 8004de8:	683a      	ldr	r2, [r7, #0]
 8004dea:	b2d2      	uxtb	r2, r2
 8004dec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dee:	4b20      	ldr	r3, [pc, #128]	@ (8004e70 <HAL_RCC_ClockConfig+0x1b8>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 0307 	and.w	r3, r3, #7
 8004df6:	683a      	ldr	r2, [r7, #0]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d001      	beq.n	8004e00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e032      	b.n	8004e66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0304 	and.w	r3, r3, #4
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d008      	beq.n	8004e1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e0c:	4b19      	ldr	r3, [pc, #100]	@ (8004e74 <HAL_RCC_ClockConfig+0x1bc>)
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	4916      	ldr	r1, [pc, #88]	@ (8004e74 <HAL_RCC_ClockConfig+0x1bc>)
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0308 	and.w	r3, r3, #8
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d009      	beq.n	8004e3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e2a:	4b12      	ldr	r3, [pc, #72]	@ (8004e74 <HAL_RCC_ClockConfig+0x1bc>)
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	00db      	lsls	r3, r3, #3
 8004e38:	490e      	ldr	r1, [pc, #56]	@ (8004e74 <HAL_RCC_ClockConfig+0x1bc>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004e3e:	f000 f821 	bl	8004e84 <HAL_RCC_GetSysClockFreq>
 8004e42:	4602      	mov	r2, r0
 8004e44:	4b0b      	ldr	r3, [pc, #44]	@ (8004e74 <HAL_RCC_ClockConfig+0x1bc>)
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	091b      	lsrs	r3, r3, #4
 8004e4a:	f003 030f 	and.w	r3, r3, #15
 8004e4e:	490a      	ldr	r1, [pc, #40]	@ (8004e78 <HAL_RCC_ClockConfig+0x1c0>)
 8004e50:	5ccb      	ldrb	r3, [r1, r3]
 8004e52:	fa22 f303 	lsr.w	r3, r2, r3
 8004e56:	4a09      	ldr	r2, [pc, #36]	@ (8004e7c <HAL_RCC_ClockConfig+0x1c4>)
 8004e58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004e5a:	4b09      	ldr	r3, [pc, #36]	@ (8004e80 <HAL_RCC_ClockConfig+0x1c8>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f7fc fdd4 	bl	8001a0c <HAL_InitTick>

  return HAL_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3710      	adds	r7, #16
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	40023c00 	.word	0x40023c00
 8004e74:	40023800 	.word	0x40023800
 8004e78:	0800dc60 	.word	0x0800dc60
 8004e7c:	20000000 	.word	0x20000000
 8004e80:	20000004 	.word	0x20000004

08004e84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e88:	b094      	sub	sp, #80	@ 0x50
 8004e8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004e90:	2300      	movs	r3, #0
 8004e92:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004e94:	2300      	movs	r3, #0
 8004e96:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e9c:	4b79      	ldr	r3, [pc, #484]	@ (8005084 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	f003 030c 	and.w	r3, r3, #12
 8004ea4:	2b08      	cmp	r3, #8
 8004ea6:	d00d      	beq.n	8004ec4 <HAL_RCC_GetSysClockFreq+0x40>
 8004ea8:	2b08      	cmp	r3, #8
 8004eaa:	f200 80e1 	bhi.w	8005070 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d002      	beq.n	8004eb8 <HAL_RCC_GetSysClockFreq+0x34>
 8004eb2:	2b04      	cmp	r3, #4
 8004eb4:	d003      	beq.n	8004ebe <HAL_RCC_GetSysClockFreq+0x3a>
 8004eb6:	e0db      	b.n	8005070 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004eb8:	4b73      	ldr	r3, [pc, #460]	@ (8005088 <HAL_RCC_GetSysClockFreq+0x204>)
 8004eba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004ebc:	e0db      	b.n	8005076 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ebe:	4b73      	ldr	r3, [pc, #460]	@ (800508c <HAL_RCC_GetSysClockFreq+0x208>)
 8004ec0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004ec2:	e0d8      	b.n	8005076 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ec4:	4b6f      	ldr	r3, [pc, #444]	@ (8005084 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ecc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ece:	4b6d      	ldr	r3, [pc, #436]	@ (8005084 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d063      	beq.n	8004fa2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004eda:	4b6a      	ldr	r3, [pc, #424]	@ (8005084 <HAL_RCC_GetSysClockFreq+0x200>)
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	099b      	lsrs	r3, r3, #6
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ee4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ee8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eec:	633b      	str	r3, [r7, #48]	@ 0x30
 8004eee:	2300      	movs	r3, #0
 8004ef0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ef2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004ef6:	4622      	mov	r2, r4
 8004ef8:	462b      	mov	r3, r5
 8004efa:	f04f 0000 	mov.w	r0, #0
 8004efe:	f04f 0100 	mov.w	r1, #0
 8004f02:	0159      	lsls	r1, r3, #5
 8004f04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f08:	0150      	lsls	r0, r2, #5
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	460b      	mov	r3, r1
 8004f0e:	4621      	mov	r1, r4
 8004f10:	1a51      	subs	r1, r2, r1
 8004f12:	6139      	str	r1, [r7, #16]
 8004f14:	4629      	mov	r1, r5
 8004f16:	eb63 0301 	sbc.w	r3, r3, r1
 8004f1a:	617b      	str	r3, [r7, #20]
 8004f1c:	f04f 0200 	mov.w	r2, #0
 8004f20:	f04f 0300 	mov.w	r3, #0
 8004f24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f28:	4659      	mov	r1, fp
 8004f2a:	018b      	lsls	r3, r1, #6
 8004f2c:	4651      	mov	r1, sl
 8004f2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f32:	4651      	mov	r1, sl
 8004f34:	018a      	lsls	r2, r1, #6
 8004f36:	4651      	mov	r1, sl
 8004f38:	ebb2 0801 	subs.w	r8, r2, r1
 8004f3c:	4659      	mov	r1, fp
 8004f3e:	eb63 0901 	sbc.w	r9, r3, r1
 8004f42:	f04f 0200 	mov.w	r2, #0
 8004f46:	f04f 0300 	mov.w	r3, #0
 8004f4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f56:	4690      	mov	r8, r2
 8004f58:	4699      	mov	r9, r3
 8004f5a:	4623      	mov	r3, r4
 8004f5c:	eb18 0303 	adds.w	r3, r8, r3
 8004f60:	60bb      	str	r3, [r7, #8]
 8004f62:	462b      	mov	r3, r5
 8004f64:	eb49 0303 	adc.w	r3, r9, r3
 8004f68:	60fb      	str	r3, [r7, #12]
 8004f6a:	f04f 0200 	mov.w	r2, #0
 8004f6e:	f04f 0300 	mov.w	r3, #0
 8004f72:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004f76:	4629      	mov	r1, r5
 8004f78:	024b      	lsls	r3, r1, #9
 8004f7a:	4621      	mov	r1, r4
 8004f7c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004f80:	4621      	mov	r1, r4
 8004f82:	024a      	lsls	r2, r1, #9
 8004f84:	4610      	mov	r0, r2
 8004f86:	4619      	mov	r1, r3
 8004f88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f90:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004f94:	f7fb f98c 	bl	80002b0 <__aeabi_uldivmod>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	460b      	mov	r3, r1
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004fa0:	e058      	b.n	8005054 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fa2:	4b38      	ldr	r3, [pc, #224]	@ (8005084 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	099b      	lsrs	r3, r3, #6
 8004fa8:	2200      	movs	r2, #0
 8004faa:	4618      	mov	r0, r3
 8004fac:	4611      	mov	r1, r2
 8004fae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004fb2:	623b      	str	r3, [r7, #32]
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fb8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004fbc:	4642      	mov	r2, r8
 8004fbe:	464b      	mov	r3, r9
 8004fc0:	f04f 0000 	mov.w	r0, #0
 8004fc4:	f04f 0100 	mov.w	r1, #0
 8004fc8:	0159      	lsls	r1, r3, #5
 8004fca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fce:	0150      	lsls	r0, r2, #5
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	460b      	mov	r3, r1
 8004fd4:	4641      	mov	r1, r8
 8004fd6:	ebb2 0a01 	subs.w	sl, r2, r1
 8004fda:	4649      	mov	r1, r9
 8004fdc:	eb63 0b01 	sbc.w	fp, r3, r1
 8004fe0:	f04f 0200 	mov.w	r2, #0
 8004fe4:	f04f 0300 	mov.w	r3, #0
 8004fe8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004fec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ff0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ff4:	ebb2 040a 	subs.w	r4, r2, sl
 8004ff8:	eb63 050b 	sbc.w	r5, r3, fp
 8004ffc:	f04f 0200 	mov.w	r2, #0
 8005000:	f04f 0300 	mov.w	r3, #0
 8005004:	00eb      	lsls	r3, r5, #3
 8005006:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800500a:	00e2      	lsls	r2, r4, #3
 800500c:	4614      	mov	r4, r2
 800500e:	461d      	mov	r5, r3
 8005010:	4643      	mov	r3, r8
 8005012:	18e3      	adds	r3, r4, r3
 8005014:	603b      	str	r3, [r7, #0]
 8005016:	464b      	mov	r3, r9
 8005018:	eb45 0303 	adc.w	r3, r5, r3
 800501c:	607b      	str	r3, [r7, #4]
 800501e:	f04f 0200 	mov.w	r2, #0
 8005022:	f04f 0300 	mov.w	r3, #0
 8005026:	e9d7 4500 	ldrd	r4, r5, [r7]
 800502a:	4629      	mov	r1, r5
 800502c:	028b      	lsls	r3, r1, #10
 800502e:	4621      	mov	r1, r4
 8005030:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005034:	4621      	mov	r1, r4
 8005036:	028a      	lsls	r2, r1, #10
 8005038:	4610      	mov	r0, r2
 800503a:	4619      	mov	r1, r3
 800503c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800503e:	2200      	movs	r2, #0
 8005040:	61bb      	str	r3, [r7, #24]
 8005042:	61fa      	str	r2, [r7, #28]
 8005044:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005048:	f7fb f932 	bl	80002b0 <__aeabi_uldivmod>
 800504c:	4602      	mov	r2, r0
 800504e:	460b      	mov	r3, r1
 8005050:	4613      	mov	r3, r2
 8005052:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005054:	4b0b      	ldr	r3, [pc, #44]	@ (8005084 <HAL_RCC_GetSysClockFreq+0x200>)
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	0c1b      	lsrs	r3, r3, #16
 800505a:	f003 0303 	and.w	r3, r3, #3
 800505e:	3301      	adds	r3, #1
 8005060:	005b      	lsls	r3, r3, #1
 8005062:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005064:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005066:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005068:	fbb2 f3f3 	udiv	r3, r2, r3
 800506c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800506e:	e002      	b.n	8005076 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005070:	4b05      	ldr	r3, [pc, #20]	@ (8005088 <HAL_RCC_GetSysClockFreq+0x204>)
 8005072:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005074:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005076:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005078:	4618      	mov	r0, r3
 800507a:	3750      	adds	r7, #80	@ 0x50
 800507c:	46bd      	mov	sp, r7
 800507e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005082:	bf00      	nop
 8005084:	40023800 	.word	0x40023800
 8005088:	00f42400 	.word	0x00f42400
 800508c:	007a1200 	.word	0x007a1200

08005090 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005090:	b480      	push	{r7}
 8005092:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005094:	4b03      	ldr	r3, [pc, #12]	@ (80050a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005096:	681b      	ldr	r3, [r3, #0]
}
 8005098:	4618      	mov	r0, r3
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr
 80050a2:	bf00      	nop
 80050a4:	20000000 	.word	0x20000000

080050a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80050ac:	f7ff fff0 	bl	8005090 <HAL_RCC_GetHCLKFreq>
 80050b0:	4602      	mov	r2, r0
 80050b2:	4b05      	ldr	r3, [pc, #20]	@ (80050c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	0a9b      	lsrs	r3, r3, #10
 80050b8:	f003 0307 	and.w	r3, r3, #7
 80050bc:	4903      	ldr	r1, [pc, #12]	@ (80050cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80050be:	5ccb      	ldrb	r3, [r1, r3]
 80050c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	40023800 	.word	0x40023800
 80050cc:	0800dc70 	.word	0x0800dc70

080050d0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b086      	sub	sp, #24
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80050d8:	2300      	movs	r3, #0
 80050da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80050dc:	2300      	movs	r3, #0
 80050de:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0301 	and.w	r3, r3, #1
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d105      	bne.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d038      	beq.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80050f8:	4b68      	ldr	r3, [pc, #416]	@ (800529c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80050fa:	2200      	movs	r2, #0
 80050fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80050fe:	f7fc fcc9 	bl	8001a94 <HAL_GetTick>
 8005102:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005104:	e008      	b.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005106:	f7fc fcc5 	bl	8001a94 <HAL_GetTick>
 800510a:	4602      	mov	r2, r0
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	2b02      	cmp	r3, #2
 8005112:	d901      	bls.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005114:	2303      	movs	r3, #3
 8005116:	e0bd      	b.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005118:	4b61      	ldr	r3, [pc, #388]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005120:	2b00      	cmp	r3, #0
 8005122:	d1f0      	bne.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685a      	ldr	r2, [r3, #4]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	019b      	lsls	r3, r3, #6
 800512e:	431a      	orrs	r2, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	071b      	lsls	r3, r3, #28
 8005136:	495a      	ldr	r1, [pc, #360]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005138:	4313      	orrs	r3, r2
 800513a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800513e:	4b57      	ldr	r3, [pc, #348]	@ (800529c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005140:	2201      	movs	r2, #1
 8005142:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005144:	f7fc fca6 	bl	8001a94 <HAL_GetTick>
 8005148:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800514a:	e008      	b.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800514c:	f7fc fca2 	bl	8001a94 <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	2b02      	cmp	r3, #2
 8005158:	d901      	bls.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e09a      	b.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800515e:	4b50      	ldr	r3, [pc, #320]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005166:	2b00      	cmp	r3, #0
 8005168:	d0f0      	beq.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 0302 	and.w	r3, r3, #2
 8005172:	2b00      	cmp	r3, #0
 8005174:	f000 8083 	beq.w	800527e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005178:	2300      	movs	r3, #0
 800517a:	60fb      	str	r3, [r7, #12]
 800517c:	4b48      	ldr	r3, [pc, #288]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800517e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005180:	4a47      	ldr	r2, [pc, #284]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005182:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005186:	6413      	str	r3, [r2, #64]	@ 0x40
 8005188:	4b45      	ldr	r3, [pc, #276]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800518a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800518c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005190:	60fb      	str	r3, [r7, #12]
 8005192:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005194:	4b43      	ldr	r3, [pc, #268]	@ (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a42      	ldr	r2, [pc, #264]	@ (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800519a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800519e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80051a0:	f7fc fc78 	bl	8001a94 <HAL_GetTick>
 80051a4:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80051a6:	e008      	b.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051a8:	f7fc fc74 	bl	8001a94 <HAL_GetTick>
 80051ac:	4602      	mov	r2, r0
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	2b02      	cmp	r3, #2
 80051b4:	d901      	bls.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e06c      	b.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80051ba:	4b3a      	ldr	r3, [pc, #232]	@ (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d0f0      	beq.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80051c6:	4b36      	ldr	r3, [pc, #216]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051ce:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d02f      	beq.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051de:	693a      	ldr	r2, [r7, #16]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d028      	beq.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80051e4:	4b2e      	ldr	r3, [pc, #184]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051ec:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80051ee:	4b2e      	ldr	r3, [pc, #184]	@ (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80051f0:	2201      	movs	r2, #1
 80051f2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80051f4:	4b2c      	ldr	r3, [pc, #176]	@ (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80051f6:	2200      	movs	r2, #0
 80051f8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80051fa:	4a29      	ldr	r2, [pc, #164]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005200:	4b27      	ldr	r3, [pc, #156]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005202:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005204:	f003 0301 	and.w	r3, r3, #1
 8005208:	2b01      	cmp	r3, #1
 800520a:	d114      	bne.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800520c:	f7fc fc42 	bl	8001a94 <HAL_GetTick>
 8005210:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005212:	e00a      	b.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005214:	f7fc fc3e 	bl	8001a94 <HAL_GetTick>
 8005218:	4602      	mov	r2, r0
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005222:	4293      	cmp	r3, r2
 8005224:	d901      	bls.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005226:	2303      	movs	r3, #3
 8005228:	e034      	b.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800522a:	4b1d      	ldr	r3, [pc, #116]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800522c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800522e:	f003 0302 	and.w	r3, r3, #2
 8005232:	2b00      	cmp	r3, #0
 8005234:	d0ee      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800523e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005242:	d10d      	bne.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8005244:	4b16      	ldr	r3, [pc, #88]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	691b      	ldr	r3, [r3, #16]
 8005250:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005254:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005258:	4911      	ldr	r1, [pc, #68]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800525a:	4313      	orrs	r3, r2
 800525c:	608b      	str	r3, [r1, #8]
 800525e:	e005      	b.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8005260:	4b0f      	ldr	r3, [pc, #60]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	4a0e      	ldr	r2, [pc, #56]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005266:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800526a:	6093      	str	r3, [r2, #8]
 800526c:	4b0c      	ldr	r3, [pc, #48]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800526e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	691b      	ldr	r3, [r3, #16]
 8005274:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005278:	4909      	ldr	r1, [pc, #36]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800527a:	4313      	orrs	r3, r2
 800527c:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0308 	and.w	r3, r3, #8
 8005286:	2b00      	cmp	r3, #0
 8005288:	d003      	beq.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	7d1a      	ldrb	r2, [r3, #20]
 800528e:	4b07      	ldr	r3, [pc, #28]	@ (80052ac <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8005290:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005292:	2300      	movs	r3, #0
}
 8005294:	4618      	mov	r0, r3
 8005296:	3718      	adds	r7, #24
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}
 800529c:	42470068 	.word	0x42470068
 80052a0:	40023800 	.word	0x40023800
 80052a4:	40007000 	.word	0x40007000
 80052a8:	42470e40 	.word	0x42470e40
 80052ac:	424711e0 	.word	0x424711e0

080052b0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b087      	sub	sp, #28
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80052b8:	2300      	movs	r3, #0
 80052ba:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80052bc:	2300      	movs	r3, #0
 80052be:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80052c0:	2300      	movs	r3, #0
 80052c2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80052c4:	2300      	movs	r3, #0
 80052c6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d141      	bne.n	8005352 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80052ce:	4b25      	ldr	r3, [pc, #148]	@ (8005364 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80052d6:	60fb      	str	r3, [r7, #12]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d006      	beq.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80052e4:	d131      	bne.n	800534a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80052e6:	4b20      	ldr	r3, [pc, #128]	@ (8005368 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80052e8:	617b      	str	r3, [r7, #20]
          break;
 80052ea:	e031      	b.n	8005350 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80052ec:	4b1d      	ldr	r3, [pc, #116]	@ (8005364 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80052f8:	d109      	bne.n	800530e <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80052fa:	4b1a      	ldr	r3, [pc, #104]	@ (8005364 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80052fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005300:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005304:	4a19      	ldr	r2, [pc, #100]	@ (800536c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005306:	fbb2 f3f3 	udiv	r3, r2, r3
 800530a:	613b      	str	r3, [r7, #16]
 800530c:	e008      	b.n	8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800530e:	4b15      	ldr	r3, [pc, #84]	@ (8005364 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005310:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005314:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005318:	4a15      	ldr	r2, [pc, #84]	@ (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 800531a:	fbb2 f3f3 	udiv	r3, r2, r3
 800531e:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005320:	4b10      	ldr	r3, [pc, #64]	@ (8005364 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005322:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005326:	099b      	lsrs	r3, r3, #6
 8005328:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	fb02 f303 	mul.w	r3, r2, r3
 8005332:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005334:	4b0b      	ldr	r3, [pc, #44]	@ (8005364 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005336:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800533a:	0f1b      	lsrs	r3, r3, #28
 800533c:	f003 0307 	and.w	r3, r3, #7
 8005340:	68ba      	ldr	r2, [r7, #8]
 8005342:	fbb2 f3f3 	udiv	r3, r2, r3
 8005346:	617b      	str	r3, [r7, #20]
          break;
 8005348:	e002      	b.n	8005350 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 800534a:	2300      	movs	r3, #0
 800534c:	617b      	str	r3, [r7, #20]
          break;
 800534e:	bf00      	nop
        }
      }
      break;
 8005350:	e000      	b.n	8005354 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
    default:
    {
      break;
 8005352:	bf00      	nop
    }
  }
  return frequency;
 8005354:	697b      	ldr	r3, [r7, #20]
}
 8005356:	4618      	mov	r0, r3
 8005358:	371c      	adds	r7, #28
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	40023800 	.word	0x40023800
 8005368:	00bb8000 	.word	0x00bb8000
 800536c:	007a1200 	.word	0x007a1200
 8005370:	00f42400 	.word	0x00f42400

08005374 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b082      	sub	sp, #8
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d101      	bne.n	8005386 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e07b      	b.n	800547e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800538a:	2b00      	cmp	r3, #0
 800538c:	d108      	bne.n	80053a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005396:	d009      	beq.n	80053ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	61da      	str	r2, [r3, #28]
 800539e:	e005      	b.n	80053ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d106      	bne.n	80053cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f7fb ffdc 	bl	8001384 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2202      	movs	r2, #2
 80053d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80053e2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80053f4:	431a      	orrs	r2, r3
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053fe:	431a      	orrs	r2, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	f003 0302 	and.w	r3, r3, #2
 8005408:	431a      	orrs	r2, r3
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	695b      	ldr	r3, [r3, #20]
 800540e:	f003 0301 	and.w	r3, r3, #1
 8005412:	431a      	orrs	r2, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	699b      	ldr	r3, [r3, #24]
 8005418:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800541c:	431a      	orrs	r2, r3
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	69db      	ldr	r3, [r3, #28]
 8005422:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005426:	431a      	orrs	r2, r3
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6a1b      	ldr	r3, [r3, #32]
 800542c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005430:	ea42 0103 	orr.w	r1, r2, r3
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005438:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	430a      	orrs	r2, r1
 8005442:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	699b      	ldr	r3, [r3, #24]
 8005448:	0c1b      	lsrs	r3, r3, #16
 800544a:	f003 0104 	and.w	r1, r3, #4
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005452:	f003 0210 	and.w	r2, r3, #16
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	430a      	orrs	r2, r1
 800545c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	69da      	ldr	r2, [r3, #28]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800546c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	3708      	adds	r7, #8
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}

08005486 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005486:	b084      	sub	sp, #16
 8005488:	b580      	push	{r7, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	f107 001c 	add.w	r0, r7, #28
 8005494:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005498:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800549c:	2b01      	cmp	r3, #1
 800549e:	d123      	bne.n	80054e8 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054a4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80054b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80054c8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d105      	bne.n	80054dc <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f001 fae9 	bl	8006ab4 <USB_CoreReset>
 80054e2:	4603      	mov	r3, r0
 80054e4:	73fb      	strb	r3, [r7, #15]
 80054e6:	e01b      	b.n	8005520 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f001 fadd 	bl	8006ab4 <USB_CoreReset>
 80054fa:	4603      	mov	r3, r0
 80054fc:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80054fe:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005502:	2b00      	cmp	r3, #0
 8005504:	d106      	bne.n	8005514 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800550a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	639a      	str	r2, [r3, #56]	@ 0x38
 8005512:	e005      	b.n	8005520 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005518:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005520:	7fbb      	ldrb	r3, [r7, #30]
 8005522:	2b01      	cmp	r3, #1
 8005524:	d10b      	bne.n	800553e <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	f043 0206 	orr.w	r2, r3, #6
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	f043 0220 	orr.w	r2, r3, #32
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800553e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005540:	4618      	mov	r0, r3
 8005542:	3710      	adds	r7, #16
 8005544:	46bd      	mov	sp, r7
 8005546:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800554a:	b004      	add	sp, #16
 800554c:	4770      	bx	lr
	...

08005550 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005550:	b480      	push	{r7}
 8005552:	b087      	sub	sp, #28
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	4613      	mov	r3, r2
 800555c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800555e:	79fb      	ldrb	r3, [r7, #7]
 8005560:	2b02      	cmp	r3, #2
 8005562:	d165      	bne.n	8005630 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	4a41      	ldr	r2, [pc, #260]	@ (800566c <USB_SetTurnaroundTime+0x11c>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d906      	bls.n	800557a <USB_SetTurnaroundTime+0x2a>
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	4a40      	ldr	r2, [pc, #256]	@ (8005670 <USB_SetTurnaroundTime+0x120>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d202      	bcs.n	800557a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005574:	230f      	movs	r3, #15
 8005576:	617b      	str	r3, [r7, #20]
 8005578:	e062      	b.n	8005640 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	4a3c      	ldr	r2, [pc, #240]	@ (8005670 <USB_SetTurnaroundTime+0x120>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d306      	bcc.n	8005590 <USB_SetTurnaroundTime+0x40>
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	4a3b      	ldr	r2, [pc, #236]	@ (8005674 <USB_SetTurnaroundTime+0x124>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d202      	bcs.n	8005590 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800558a:	230e      	movs	r3, #14
 800558c:	617b      	str	r3, [r7, #20]
 800558e:	e057      	b.n	8005640 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	4a38      	ldr	r2, [pc, #224]	@ (8005674 <USB_SetTurnaroundTime+0x124>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d306      	bcc.n	80055a6 <USB_SetTurnaroundTime+0x56>
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	4a37      	ldr	r2, [pc, #220]	@ (8005678 <USB_SetTurnaroundTime+0x128>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d202      	bcs.n	80055a6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80055a0:	230d      	movs	r3, #13
 80055a2:	617b      	str	r3, [r7, #20]
 80055a4:	e04c      	b.n	8005640 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	4a33      	ldr	r2, [pc, #204]	@ (8005678 <USB_SetTurnaroundTime+0x128>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d306      	bcc.n	80055bc <USB_SetTurnaroundTime+0x6c>
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	4a32      	ldr	r2, [pc, #200]	@ (800567c <USB_SetTurnaroundTime+0x12c>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d802      	bhi.n	80055bc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80055b6:	230c      	movs	r3, #12
 80055b8:	617b      	str	r3, [r7, #20]
 80055ba:	e041      	b.n	8005640 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	4a2f      	ldr	r2, [pc, #188]	@ (800567c <USB_SetTurnaroundTime+0x12c>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d906      	bls.n	80055d2 <USB_SetTurnaroundTime+0x82>
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	4a2e      	ldr	r2, [pc, #184]	@ (8005680 <USB_SetTurnaroundTime+0x130>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d802      	bhi.n	80055d2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80055cc:	230b      	movs	r3, #11
 80055ce:	617b      	str	r3, [r7, #20]
 80055d0:	e036      	b.n	8005640 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	4a2a      	ldr	r2, [pc, #168]	@ (8005680 <USB_SetTurnaroundTime+0x130>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d906      	bls.n	80055e8 <USB_SetTurnaroundTime+0x98>
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	4a29      	ldr	r2, [pc, #164]	@ (8005684 <USB_SetTurnaroundTime+0x134>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d802      	bhi.n	80055e8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80055e2:	230a      	movs	r3, #10
 80055e4:	617b      	str	r3, [r7, #20]
 80055e6:	e02b      	b.n	8005640 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	4a26      	ldr	r2, [pc, #152]	@ (8005684 <USB_SetTurnaroundTime+0x134>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d906      	bls.n	80055fe <USB_SetTurnaroundTime+0xae>
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	4a25      	ldr	r2, [pc, #148]	@ (8005688 <USB_SetTurnaroundTime+0x138>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d202      	bcs.n	80055fe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80055f8:	2309      	movs	r3, #9
 80055fa:	617b      	str	r3, [r7, #20]
 80055fc:	e020      	b.n	8005640 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	4a21      	ldr	r2, [pc, #132]	@ (8005688 <USB_SetTurnaroundTime+0x138>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d306      	bcc.n	8005614 <USB_SetTurnaroundTime+0xc4>
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	4a20      	ldr	r2, [pc, #128]	@ (800568c <USB_SetTurnaroundTime+0x13c>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d802      	bhi.n	8005614 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800560e:	2308      	movs	r3, #8
 8005610:	617b      	str	r3, [r7, #20]
 8005612:	e015      	b.n	8005640 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	4a1d      	ldr	r2, [pc, #116]	@ (800568c <USB_SetTurnaroundTime+0x13c>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d906      	bls.n	800562a <USB_SetTurnaroundTime+0xda>
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	4a1c      	ldr	r2, [pc, #112]	@ (8005690 <USB_SetTurnaroundTime+0x140>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d202      	bcs.n	800562a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005624:	2307      	movs	r3, #7
 8005626:	617b      	str	r3, [r7, #20]
 8005628:	e00a      	b.n	8005640 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800562a:	2306      	movs	r3, #6
 800562c:	617b      	str	r3, [r7, #20]
 800562e:	e007      	b.n	8005640 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005630:	79fb      	ldrb	r3, [r7, #7]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d102      	bne.n	800563c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005636:	2309      	movs	r3, #9
 8005638:	617b      	str	r3, [r7, #20]
 800563a:	e001      	b.n	8005640 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800563c:	2309      	movs	r3, #9
 800563e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	68da      	ldr	r2, [r3, #12]
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	029b      	lsls	r3, r3, #10
 8005654:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005658:	431a      	orrs	r2, r3
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800565e:	2300      	movs	r3, #0
}
 8005660:	4618      	mov	r0, r3
 8005662:	371c      	adds	r7, #28
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr
 800566c:	00d8acbf 	.word	0x00d8acbf
 8005670:	00e4e1c0 	.word	0x00e4e1c0
 8005674:	00f42400 	.word	0x00f42400
 8005678:	01067380 	.word	0x01067380
 800567c:	011a499f 	.word	0x011a499f
 8005680:	01312cff 	.word	0x01312cff
 8005684:	014ca43f 	.word	0x014ca43f
 8005688:	016e3600 	.word	0x016e3600
 800568c:	01a6ab1f 	.word	0x01a6ab1f
 8005690:	01e84800 	.word	0x01e84800

08005694 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	f043 0201 	orr.w	r2, r3, #1
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	370c      	adds	r7, #12
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr

080056b6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80056b6:	b480      	push	{r7}
 80056b8:	b083      	sub	sp, #12
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f023 0201 	bic.w	r2, r3, #1
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80056ca:	2300      	movs	r3, #0
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	460b      	mov	r3, r1
 80056e2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80056e4:	2300      	movs	r3, #0
 80056e6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80056f4:	78fb      	ldrb	r3, [r7, #3]
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d115      	bne.n	8005726 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005706:	200a      	movs	r0, #10
 8005708:	f7fc f9d0 	bl	8001aac <HAL_Delay>
      ms += 10U;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	330a      	adds	r3, #10
 8005710:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f001 f93f 	bl	8006996 <USB_GetMode>
 8005718:	4603      	mov	r3, r0
 800571a:	2b01      	cmp	r3, #1
 800571c:	d01e      	beq.n	800575c <USB_SetCurrentMode+0x84>
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2bc7      	cmp	r3, #199	@ 0xc7
 8005722:	d9f0      	bls.n	8005706 <USB_SetCurrentMode+0x2e>
 8005724:	e01a      	b.n	800575c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005726:	78fb      	ldrb	r3, [r7, #3]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d115      	bne.n	8005758 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005738:	200a      	movs	r0, #10
 800573a:	f7fc f9b7 	bl	8001aac <HAL_Delay>
      ms += 10U;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	330a      	adds	r3, #10
 8005742:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f001 f926 	bl	8006996 <USB_GetMode>
 800574a:	4603      	mov	r3, r0
 800574c:	2b00      	cmp	r3, #0
 800574e:	d005      	beq.n	800575c <USB_SetCurrentMode+0x84>
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2bc7      	cmp	r3, #199	@ 0xc7
 8005754:	d9f0      	bls.n	8005738 <USB_SetCurrentMode+0x60>
 8005756:	e001      	b.n	800575c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	e005      	b.n	8005768 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2bc8      	cmp	r3, #200	@ 0xc8
 8005760:	d101      	bne.n	8005766 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e000      	b.n	8005768 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005766:	2300      	movs	r3, #0
}
 8005768:	4618      	mov	r0, r3
 800576a:	3710      	adds	r7, #16
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}

08005770 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005770:	b084      	sub	sp, #16
 8005772:	b580      	push	{r7, lr}
 8005774:	b086      	sub	sp, #24
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
 800577a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800577e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005782:	2300      	movs	r3, #0
 8005784:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800578a:	2300      	movs	r3, #0
 800578c:	613b      	str	r3, [r7, #16]
 800578e:	e009      	b.n	80057a4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	3340      	adds	r3, #64	@ 0x40
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	4413      	add	r3, r2
 800579a:	2200      	movs	r2, #0
 800579c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	3301      	adds	r3, #1
 80057a2:	613b      	str	r3, [r7, #16]
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	2b0e      	cmp	r3, #14
 80057a8:	d9f2      	bls.n	8005790 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80057aa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d11c      	bne.n	80057ec <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80057c0:	f043 0302 	orr.w	r3, r3, #2
 80057c4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057ca:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057d6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057e2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	639a      	str	r2, [r3, #56]	@ 0x38
 80057ea:	e00b      	b.n	8005804 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057f0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057fc:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800580a:	461a      	mov	r2, r3
 800580c:	2300      	movs	r3, #0
 800580e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005810:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005814:	2b01      	cmp	r3, #1
 8005816:	d10d      	bne.n	8005834 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005818:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800581c:	2b00      	cmp	r3, #0
 800581e:	d104      	bne.n	800582a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005820:	2100      	movs	r1, #0
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 f968 	bl	8005af8 <USB_SetDevSpeed>
 8005828:	e008      	b.n	800583c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800582a:	2101      	movs	r1, #1
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f000 f963 	bl	8005af8 <USB_SetDevSpeed>
 8005832:	e003      	b.n	800583c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005834:	2103      	movs	r1, #3
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f000 f95e 	bl	8005af8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800583c:	2110      	movs	r1, #16
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 f8fa 	bl	8005a38 <USB_FlushTxFifo>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d001      	beq.n	800584e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 f924 	bl	8005a9c <USB_FlushRxFifo>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d001      	beq.n	800585e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005864:	461a      	mov	r2, r3
 8005866:	2300      	movs	r3, #0
 8005868:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005870:	461a      	mov	r2, r3
 8005872:	2300      	movs	r3, #0
 8005874:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800587c:	461a      	mov	r2, r3
 800587e:	2300      	movs	r3, #0
 8005880:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005882:	2300      	movs	r3, #0
 8005884:	613b      	str	r3, [r7, #16]
 8005886:	e043      	b.n	8005910 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	015a      	lsls	r2, r3, #5
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	4413      	add	r3, r2
 8005890:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800589a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800589e:	d118      	bne.n	80058d2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d10a      	bne.n	80058bc <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	015a      	lsls	r2, r3, #5
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	4413      	add	r3, r2
 80058ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058b2:	461a      	mov	r2, r3
 80058b4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80058b8:	6013      	str	r3, [r2, #0]
 80058ba:	e013      	b.n	80058e4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	015a      	lsls	r2, r3, #5
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	4413      	add	r3, r2
 80058c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058c8:	461a      	mov	r2, r3
 80058ca:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80058ce:	6013      	str	r3, [r2, #0]
 80058d0:	e008      	b.n	80058e4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	015a      	lsls	r2, r3, #5
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	4413      	add	r3, r2
 80058da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058de:	461a      	mov	r2, r3
 80058e0:	2300      	movs	r3, #0
 80058e2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	015a      	lsls	r2, r3, #5
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	4413      	add	r3, r2
 80058ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058f0:	461a      	mov	r2, r3
 80058f2:	2300      	movs	r3, #0
 80058f4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	015a      	lsls	r2, r3, #5
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	4413      	add	r3, r2
 80058fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005902:	461a      	mov	r2, r3
 8005904:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005908:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	3301      	adds	r3, #1
 800590e:	613b      	str	r3, [r7, #16]
 8005910:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005914:	461a      	mov	r2, r3
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	4293      	cmp	r3, r2
 800591a:	d3b5      	bcc.n	8005888 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800591c:	2300      	movs	r3, #0
 800591e:	613b      	str	r3, [r7, #16]
 8005920:	e043      	b.n	80059aa <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	015a      	lsls	r2, r3, #5
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	4413      	add	r3, r2
 800592a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005934:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005938:	d118      	bne.n	800596c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d10a      	bne.n	8005956 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	015a      	lsls	r2, r3, #5
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	4413      	add	r3, r2
 8005948:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800594c:	461a      	mov	r2, r3
 800594e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005952:	6013      	str	r3, [r2, #0]
 8005954:	e013      	b.n	800597e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	015a      	lsls	r2, r3, #5
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	4413      	add	r3, r2
 800595e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005962:	461a      	mov	r2, r3
 8005964:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005968:	6013      	str	r3, [r2, #0]
 800596a:	e008      	b.n	800597e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	015a      	lsls	r2, r3, #5
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	4413      	add	r3, r2
 8005974:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005978:	461a      	mov	r2, r3
 800597a:	2300      	movs	r3, #0
 800597c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	015a      	lsls	r2, r3, #5
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	4413      	add	r3, r2
 8005986:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800598a:	461a      	mov	r2, r3
 800598c:	2300      	movs	r3, #0
 800598e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	015a      	lsls	r2, r3, #5
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	4413      	add	r3, r2
 8005998:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800599c:	461a      	mov	r2, r3
 800599e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80059a2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	3301      	adds	r3, #1
 80059a8:	613b      	str	r3, [r7, #16]
 80059aa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80059ae:	461a      	mov	r2, r3
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d3b5      	bcc.n	8005922 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	68fa      	ldr	r2, [r7, #12]
 80059c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80059c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80059c8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80059d6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80059d8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d105      	bne.n	80059ec <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	699b      	ldr	r3, [r3, #24]
 80059e4:	f043 0210 	orr.w	r2, r3, #16
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	699a      	ldr	r2, [r3, #24]
 80059f0:	4b10      	ldr	r3, [pc, #64]	@ (8005a34 <USB_DevInit+0x2c4>)
 80059f2:	4313      	orrs	r3, r2
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80059f8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d005      	beq.n	8005a0c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	699b      	ldr	r3, [r3, #24]
 8005a04:	f043 0208 	orr.w	r2, r3, #8
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005a0c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d107      	bne.n	8005a24 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	699b      	ldr	r3, [r3, #24]
 8005a18:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005a1c:	f043 0304 	orr.w	r3, r3, #4
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005a24:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3718      	adds	r7, #24
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a30:	b004      	add	sp, #16
 8005a32:	4770      	bx	lr
 8005a34:	803c3800 	.word	0x803c3800

08005a38 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b085      	sub	sp, #20
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005a42:	2300      	movs	r3, #0
 8005a44:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	3301      	adds	r3, #1
 8005a4a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005a52:	d901      	bls.n	8005a58 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005a54:	2303      	movs	r3, #3
 8005a56:	e01b      	b.n	8005a90 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	691b      	ldr	r3, [r3, #16]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	daf2      	bge.n	8005a46 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005a60:	2300      	movs	r3, #0
 8005a62:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	019b      	lsls	r3, r3, #6
 8005a68:	f043 0220 	orr.w	r2, r3, #32
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	3301      	adds	r3, #1
 8005a74:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005a7c:	d901      	bls.n	8005a82 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	e006      	b.n	8005a90 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	f003 0320 	and.w	r3, r3, #32
 8005a8a:	2b20      	cmp	r3, #32
 8005a8c:	d0f0      	beq.n	8005a70 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005a8e:	2300      	movs	r3, #0
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3714      	adds	r7, #20
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b085      	sub	sp, #20
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	3301      	adds	r3, #1
 8005aac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005ab4:	d901      	bls.n	8005aba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	e018      	b.n	8005aec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	691b      	ldr	r3, [r3, #16]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	daf2      	bge.n	8005aa8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2210      	movs	r2, #16
 8005aca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	3301      	adds	r3, #1
 8005ad0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005ad8:	d901      	bls.n	8005ade <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005ada:	2303      	movs	r3, #3
 8005adc:	e006      	b.n	8005aec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	f003 0310 	and.w	r3, r3, #16
 8005ae6:	2b10      	cmp	r3, #16
 8005ae8:	d0f0      	beq.n	8005acc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005aea:	2300      	movs	r3, #0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3714      	adds	r7, #20
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr

08005af8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b085      	sub	sp, #20
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	460b      	mov	r3, r1
 8005b02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	78fb      	ldrb	r3, [r7, #3]
 8005b12:	68f9      	ldr	r1, [r7, #12]
 8005b14:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3714      	adds	r7, #20
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr

08005b2a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005b2a:	b480      	push	{r7}
 8005b2c:	b087      	sub	sp, #28
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	f003 0306 	and.w	r3, r3, #6
 8005b42:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d102      	bne.n	8005b50 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	75fb      	strb	r3, [r7, #23]
 8005b4e:	e00a      	b.n	8005b66 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2b02      	cmp	r3, #2
 8005b54:	d002      	beq.n	8005b5c <USB_GetDevSpeed+0x32>
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2b06      	cmp	r3, #6
 8005b5a:	d102      	bne.n	8005b62 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005b5c:	2302      	movs	r3, #2
 8005b5e:	75fb      	strb	r3, [r7, #23]
 8005b60:	e001      	b.n	8005b66 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005b62:	230f      	movs	r3, #15
 8005b64:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005b66:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	371c      	adds	r7, #28
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b085      	sub	sp, #20
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	785b      	ldrb	r3, [r3, #1]
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d13a      	bne.n	8005c06 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b96:	69da      	ldr	r2, [r3, #28]
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	f003 030f 	and.w	r3, r3, #15
 8005ba0:	2101      	movs	r1, #1
 8005ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	68f9      	ldr	r1, [r7, #12]
 8005baa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	015a      	lsls	r2, r3, #5
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	4413      	add	r3, r2
 8005bba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d155      	bne.n	8005c74 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	015a      	lsls	r2, r3, #5
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	4413      	add	r3, r2
 8005bd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	791b      	ldrb	r3, [r3, #4]
 8005be2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005be4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	059b      	lsls	r3, r3, #22
 8005bea:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005bec:	4313      	orrs	r3, r2
 8005bee:	68ba      	ldr	r2, [r7, #8]
 8005bf0:	0151      	lsls	r1, r2, #5
 8005bf2:	68fa      	ldr	r2, [r7, #12]
 8005bf4:	440a      	add	r2, r1
 8005bf6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005bfa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005bfe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c02:	6013      	str	r3, [r2, #0]
 8005c04:	e036      	b.n	8005c74 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c0c:	69da      	ldr	r2, [r3, #28]
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	f003 030f 	and.w	r3, r3, #15
 8005c16:	2101      	movs	r1, #1
 8005c18:	fa01 f303 	lsl.w	r3, r1, r3
 8005c1c:	041b      	lsls	r3, r3, #16
 8005c1e:	68f9      	ldr	r1, [r7, #12]
 8005c20:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005c24:	4313      	orrs	r3, r2
 8005c26:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	015a      	lsls	r2, r3, #5
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	4413      	add	r3, r2
 8005c30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d11a      	bne.n	8005c74 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	015a      	lsls	r2, r3, #5
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	4413      	add	r3, r2
 8005c46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	791b      	ldrb	r3, [r3, #4]
 8005c58:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005c5a:	430b      	orrs	r3, r1
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	68ba      	ldr	r2, [r7, #8]
 8005c60:	0151      	lsls	r1, r2, #5
 8005c62:	68fa      	ldr	r2, [r7, #12]
 8005c64:	440a      	add	r2, r1
 8005c66:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c72:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3714      	adds	r7, #20
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr
	...

08005c84 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b085      	sub	sp, #20
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	785b      	ldrb	r3, [r3, #1]
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d161      	bne.n	8005d64 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	015a      	lsls	r2, r3, #5
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005cb2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005cb6:	d11f      	bne.n	8005cf8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	015a      	lsls	r2, r3, #5
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	4413      	add	r3, r2
 8005cc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	68ba      	ldr	r2, [r7, #8]
 8005cc8:	0151      	lsls	r1, r2, #5
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	440a      	add	r2, r1
 8005cce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005cd2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005cd6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	015a      	lsls	r2, r3, #5
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	4413      	add	r3, r2
 8005ce0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	68ba      	ldr	r2, [r7, #8]
 8005ce8:	0151      	lsls	r1, r2, #5
 8005cea:	68fa      	ldr	r2, [r7, #12]
 8005cec:	440a      	add	r2, r1
 8005cee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005cf2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005cf6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cfe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	f003 030f 	and.w	r3, r3, #15
 8005d08:	2101      	movs	r1, #1
 8005d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	43db      	mvns	r3, r3
 8005d12:	68f9      	ldr	r1, [r7, #12]
 8005d14:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005d18:	4013      	ands	r3, r2
 8005d1a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d22:	69da      	ldr	r2, [r3, #28]
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	f003 030f 	and.w	r3, r3, #15
 8005d2c:	2101      	movs	r1, #1
 8005d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	43db      	mvns	r3, r3
 8005d36:	68f9      	ldr	r1, [r7, #12]
 8005d38:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	015a      	lsls	r2, r3, #5
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	4413      	add	r3, r2
 8005d48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	0159      	lsls	r1, r3, #5
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	440b      	add	r3, r1
 8005d56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d5a:	4619      	mov	r1, r3
 8005d5c:	4b35      	ldr	r3, [pc, #212]	@ (8005e34 <USB_DeactivateEndpoint+0x1b0>)
 8005d5e:	4013      	ands	r3, r2
 8005d60:	600b      	str	r3, [r1, #0]
 8005d62:	e060      	b.n	8005e26 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	015a      	lsls	r2, r3, #5
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005d76:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005d7a:	d11f      	bne.n	8005dbc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	015a      	lsls	r2, r3, #5
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	4413      	add	r3, r2
 8005d84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	68ba      	ldr	r2, [r7, #8]
 8005d8c:	0151      	lsls	r1, r2, #5
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	440a      	add	r2, r1
 8005d92:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d96:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005d9a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	015a      	lsls	r2, r3, #5
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	4413      	add	r3, r2
 8005da4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	68ba      	ldr	r2, [r7, #8]
 8005dac:	0151      	lsls	r1, r2, #5
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	440a      	add	r2, r1
 8005db2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005db6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005dba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005dc2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	f003 030f 	and.w	r3, r3, #15
 8005dcc:	2101      	movs	r1, #1
 8005dce:	fa01 f303 	lsl.w	r3, r1, r3
 8005dd2:	041b      	lsls	r3, r3, #16
 8005dd4:	43db      	mvns	r3, r3
 8005dd6:	68f9      	ldr	r1, [r7, #12]
 8005dd8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005ddc:	4013      	ands	r3, r2
 8005dde:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005de6:	69da      	ldr	r2, [r3, #28]
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	f003 030f 	and.w	r3, r3, #15
 8005df0:	2101      	movs	r1, #1
 8005df2:	fa01 f303 	lsl.w	r3, r1, r3
 8005df6:	041b      	lsls	r3, r3, #16
 8005df8:	43db      	mvns	r3, r3
 8005dfa:	68f9      	ldr	r1, [r7, #12]
 8005dfc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005e00:	4013      	ands	r3, r2
 8005e02:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	015a      	lsls	r2, r3, #5
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	4413      	add	r3, r2
 8005e0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	0159      	lsls	r1, r3, #5
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	440b      	add	r3, r1
 8005e1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e1e:	4619      	mov	r1, r3
 8005e20:	4b05      	ldr	r3, [pc, #20]	@ (8005e38 <USB_DeactivateEndpoint+0x1b4>)
 8005e22:	4013      	ands	r3, r2
 8005e24:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005e26:	2300      	movs	r3, #0
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3714      	adds	r7, #20
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr
 8005e34:	ec337800 	.word	0xec337800
 8005e38:	eff37800 	.word	0xeff37800

08005e3c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b08a      	sub	sp, #40	@ 0x28
 8005e40:	af02      	add	r7, sp, #8
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	60b9      	str	r1, [r7, #8]
 8005e46:	4613      	mov	r3, r2
 8005e48:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	785b      	ldrb	r3, [r3, #1]
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	f040 817f 	bne.w	800615c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d132      	bne.n	8005ecc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	015a      	lsls	r2, r3, #5
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	4413      	add	r3, r2
 8005e6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e72:	691b      	ldr	r3, [r3, #16]
 8005e74:	69ba      	ldr	r2, [r7, #24]
 8005e76:	0151      	lsls	r1, r2, #5
 8005e78:	69fa      	ldr	r2, [r7, #28]
 8005e7a:	440a      	add	r2, r1
 8005e7c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e80:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005e84:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005e88:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	015a      	lsls	r2, r3, #5
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	4413      	add	r3, r2
 8005e92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e96:	691b      	ldr	r3, [r3, #16]
 8005e98:	69ba      	ldr	r2, [r7, #24]
 8005e9a:	0151      	lsls	r1, r2, #5
 8005e9c:	69fa      	ldr	r2, [r7, #28]
 8005e9e:	440a      	add	r2, r1
 8005ea0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ea4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005ea8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	015a      	lsls	r2, r3, #5
 8005eae:	69fb      	ldr	r3, [r7, #28]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005eb6:	691b      	ldr	r3, [r3, #16]
 8005eb8:	69ba      	ldr	r2, [r7, #24]
 8005eba:	0151      	lsls	r1, r2, #5
 8005ebc:	69fa      	ldr	r2, [r7, #28]
 8005ebe:	440a      	add	r2, r1
 8005ec0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ec4:	0cdb      	lsrs	r3, r3, #19
 8005ec6:	04db      	lsls	r3, r3, #19
 8005ec8:	6113      	str	r3, [r2, #16]
 8005eca:	e097      	b.n	8005ffc <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ecc:	69bb      	ldr	r3, [r7, #24]
 8005ece:	015a      	lsls	r2, r3, #5
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	4413      	add	r3, r2
 8005ed4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	69ba      	ldr	r2, [r7, #24]
 8005edc:	0151      	lsls	r1, r2, #5
 8005ede:	69fa      	ldr	r2, [r7, #28]
 8005ee0:	440a      	add	r2, r1
 8005ee2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ee6:	0cdb      	lsrs	r3, r3, #19
 8005ee8:	04db      	lsls	r3, r3, #19
 8005eea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005eec:	69bb      	ldr	r3, [r7, #24]
 8005eee:	015a      	lsls	r2, r3, #5
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	4413      	add	r3, r2
 8005ef4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ef8:	691b      	ldr	r3, [r3, #16]
 8005efa:	69ba      	ldr	r2, [r7, #24]
 8005efc:	0151      	lsls	r1, r2, #5
 8005efe:	69fa      	ldr	r2, [r7, #28]
 8005f00:	440a      	add	r2, r1
 8005f02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f06:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005f0a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005f0e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005f10:	69bb      	ldr	r3, [r7, #24]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d11a      	bne.n	8005f4c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	691a      	ldr	r2, [r3, #16]
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d903      	bls.n	8005f2a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	689a      	ldr	r2, [r3, #8]
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005f2a:	69bb      	ldr	r3, [r7, #24]
 8005f2c:	015a      	lsls	r2, r3, #5
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	4413      	add	r3, r2
 8005f32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f36:	691b      	ldr	r3, [r3, #16]
 8005f38:	69ba      	ldr	r2, [r7, #24]
 8005f3a:	0151      	lsls	r1, r2, #5
 8005f3c:	69fa      	ldr	r2, [r7, #28]
 8005f3e:	440a      	add	r2, r1
 8005f40:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f44:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005f48:	6113      	str	r3, [r2, #16]
 8005f4a:	e044      	b.n	8005fd6 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	691a      	ldr	r2, [r3, #16]
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	4413      	add	r3, r2
 8005f56:	1e5a      	subs	r2, r3, #1
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f60:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	015a      	lsls	r2, r3, #5
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	4413      	add	r3, r2
 8005f6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f6e:	691a      	ldr	r2, [r3, #16]
 8005f70:	8afb      	ldrh	r3, [r7, #22]
 8005f72:	04d9      	lsls	r1, r3, #19
 8005f74:	4ba4      	ldr	r3, [pc, #656]	@ (8006208 <USB_EPStartXfer+0x3cc>)
 8005f76:	400b      	ands	r3, r1
 8005f78:	69b9      	ldr	r1, [r7, #24]
 8005f7a:	0148      	lsls	r0, r1, #5
 8005f7c:	69f9      	ldr	r1, [r7, #28]
 8005f7e:	4401      	add	r1, r0
 8005f80:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005f84:	4313      	orrs	r3, r2
 8005f86:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	791b      	ldrb	r3, [r3, #4]
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d122      	bne.n	8005fd6 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005f90:	69bb      	ldr	r3, [r7, #24]
 8005f92:	015a      	lsls	r2, r3, #5
 8005f94:	69fb      	ldr	r3, [r7, #28]
 8005f96:	4413      	add	r3, r2
 8005f98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f9c:	691b      	ldr	r3, [r3, #16]
 8005f9e:	69ba      	ldr	r2, [r7, #24]
 8005fa0:	0151      	lsls	r1, r2, #5
 8005fa2:	69fa      	ldr	r2, [r7, #28]
 8005fa4:	440a      	add	r2, r1
 8005fa6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005faa:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005fae:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8005fb0:	69bb      	ldr	r3, [r7, #24]
 8005fb2:	015a      	lsls	r2, r3, #5
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fbc:	691a      	ldr	r2, [r3, #16]
 8005fbe:	8afb      	ldrh	r3, [r7, #22]
 8005fc0:	075b      	lsls	r3, r3, #29
 8005fc2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8005fc6:	69b9      	ldr	r1, [r7, #24]
 8005fc8:	0148      	lsls	r0, r1, #5
 8005fca:	69f9      	ldr	r1, [r7, #28]
 8005fcc:	4401      	add	r1, r0
 8005fce:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	015a      	lsls	r2, r3, #5
 8005fda:	69fb      	ldr	r3, [r7, #28]
 8005fdc:	4413      	add	r3, r2
 8005fde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fe2:	691a      	ldr	r2, [r3, #16]
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	691b      	ldr	r3, [r3, #16]
 8005fe8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fec:	69b9      	ldr	r1, [r7, #24]
 8005fee:	0148      	lsls	r0, r1, #5
 8005ff0:	69f9      	ldr	r1, [r7, #28]
 8005ff2:	4401      	add	r1, r0
 8005ff4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005ffc:	79fb      	ldrb	r3, [r7, #7]
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d14b      	bne.n	800609a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	69db      	ldr	r3, [r3, #28]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d009      	beq.n	800601e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	015a      	lsls	r2, r3, #5
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	4413      	add	r3, r2
 8006012:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006016:	461a      	mov	r2, r3
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	69db      	ldr	r3, [r3, #28]
 800601c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	791b      	ldrb	r3, [r3, #4]
 8006022:	2b01      	cmp	r3, #1
 8006024:	d128      	bne.n	8006078 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006026:	69fb      	ldr	r3, [r7, #28]
 8006028:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006032:	2b00      	cmp	r3, #0
 8006034:	d110      	bne.n	8006058 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	015a      	lsls	r2, r3, #5
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	4413      	add	r3, r2
 800603e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	69ba      	ldr	r2, [r7, #24]
 8006046:	0151      	lsls	r1, r2, #5
 8006048:	69fa      	ldr	r2, [r7, #28]
 800604a:	440a      	add	r2, r1
 800604c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006050:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006054:	6013      	str	r3, [r2, #0]
 8006056:	e00f      	b.n	8006078 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006058:	69bb      	ldr	r3, [r7, #24]
 800605a:	015a      	lsls	r2, r3, #5
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	4413      	add	r3, r2
 8006060:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	69ba      	ldr	r2, [r7, #24]
 8006068:	0151      	lsls	r1, r2, #5
 800606a:	69fa      	ldr	r2, [r7, #28]
 800606c:	440a      	add	r2, r1
 800606e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006072:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006076:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006078:	69bb      	ldr	r3, [r7, #24]
 800607a:	015a      	lsls	r2, r3, #5
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	4413      	add	r3, r2
 8006080:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	69ba      	ldr	r2, [r7, #24]
 8006088:	0151      	lsls	r1, r2, #5
 800608a:	69fa      	ldr	r2, [r7, #28]
 800608c:	440a      	add	r2, r1
 800608e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006092:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006096:	6013      	str	r3, [r2, #0]
 8006098:	e166      	b.n	8006368 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	015a      	lsls	r2, r3, #5
 800609e:	69fb      	ldr	r3, [r7, #28]
 80060a0:	4413      	add	r3, r2
 80060a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	69ba      	ldr	r2, [r7, #24]
 80060aa:	0151      	lsls	r1, r2, #5
 80060ac:	69fa      	ldr	r2, [r7, #28]
 80060ae:	440a      	add	r2, r1
 80060b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060b4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80060b8:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	791b      	ldrb	r3, [r3, #4]
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d015      	beq.n	80060ee <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	f000 814e 	beq.w	8006368 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	f003 030f 	and.w	r3, r3, #15
 80060dc:	2101      	movs	r1, #1
 80060de:	fa01 f303 	lsl.w	r3, r1, r3
 80060e2:	69f9      	ldr	r1, [r7, #28]
 80060e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80060e8:	4313      	orrs	r3, r2
 80060ea:	634b      	str	r3, [r1, #52]	@ 0x34
 80060ec:	e13c      	b.n	8006368 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d110      	bne.n	8006120 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	015a      	lsls	r2, r3, #5
 8006102:	69fb      	ldr	r3, [r7, #28]
 8006104:	4413      	add	r3, r2
 8006106:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	69ba      	ldr	r2, [r7, #24]
 800610e:	0151      	lsls	r1, r2, #5
 8006110:	69fa      	ldr	r2, [r7, #28]
 8006112:	440a      	add	r2, r1
 8006114:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006118:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800611c:	6013      	str	r3, [r2, #0]
 800611e:	e00f      	b.n	8006140 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	015a      	lsls	r2, r3, #5
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	4413      	add	r3, r2
 8006128:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	69ba      	ldr	r2, [r7, #24]
 8006130:	0151      	lsls	r1, r2, #5
 8006132:	69fa      	ldr	r2, [r7, #28]
 8006134:	440a      	add	r2, r1
 8006136:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800613a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800613e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	68d9      	ldr	r1, [r3, #12]
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	781a      	ldrb	r2, [r3, #0]
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	691b      	ldr	r3, [r3, #16]
 800614c:	b298      	uxth	r0, r3
 800614e:	79fb      	ldrb	r3, [r7, #7]
 8006150:	9300      	str	r3, [sp, #0]
 8006152:	4603      	mov	r3, r0
 8006154:	68f8      	ldr	r0, [r7, #12]
 8006156:	f000 f9b9 	bl	80064cc <USB_WritePacket>
 800615a:	e105      	b.n	8006368 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800615c:	69bb      	ldr	r3, [r7, #24]
 800615e:	015a      	lsls	r2, r3, #5
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	4413      	add	r3, r2
 8006164:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	69ba      	ldr	r2, [r7, #24]
 800616c:	0151      	lsls	r1, r2, #5
 800616e:	69fa      	ldr	r2, [r7, #28]
 8006170:	440a      	add	r2, r1
 8006172:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006176:	0cdb      	lsrs	r3, r3, #19
 8006178:	04db      	lsls	r3, r3, #19
 800617a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800617c:	69bb      	ldr	r3, [r7, #24]
 800617e:	015a      	lsls	r2, r3, #5
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	4413      	add	r3, r2
 8006184:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	69ba      	ldr	r2, [r7, #24]
 800618c:	0151      	lsls	r1, r2, #5
 800618e:	69fa      	ldr	r2, [r7, #28]
 8006190:	440a      	add	r2, r1
 8006192:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006196:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800619a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800619e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80061a0:	69bb      	ldr	r3, [r7, #24]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d132      	bne.n	800620c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	691b      	ldr	r3, [r3, #16]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d003      	beq.n	80061b6 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	689a      	ldr	r2, [r3, #8]
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	689a      	ldr	r2, [r3, #8]
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80061be:	69bb      	ldr	r3, [r7, #24]
 80061c0:	015a      	lsls	r2, r3, #5
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	4413      	add	r3, r2
 80061c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061ca:	691a      	ldr	r2, [r3, #16]
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	6a1b      	ldr	r3, [r3, #32]
 80061d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061d4:	69b9      	ldr	r1, [r7, #24]
 80061d6:	0148      	lsls	r0, r1, #5
 80061d8:	69f9      	ldr	r1, [r7, #28]
 80061da:	4401      	add	r1, r0
 80061dc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80061e0:	4313      	orrs	r3, r2
 80061e2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80061e4:	69bb      	ldr	r3, [r7, #24]
 80061e6:	015a      	lsls	r2, r3, #5
 80061e8:	69fb      	ldr	r3, [r7, #28]
 80061ea:	4413      	add	r3, r2
 80061ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061f0:	691b      	ldr	r3, [r3, #16]
 80061f2:	69ba      	ldr	r2, [r7, #24]
 80061f4:	0151      	lsls	r1, r2, #5
 80061f6:	69fa      	ldr	r2, [r7, #28]
 80061f8:	440a      	add	r2, r1
 80061fa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80061fe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006202:	6113      	str	r3, [r2, #16]
 8006204:	e062      	b.n	80062cc <USB_EPStartXfer+0x490>
 8006206:	bf00      	nop
 8006208:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	691b      	ldr	r3, [r3, #16]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d123      	bne.n	800625c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006214:	69bb      	ldr	r3, [r7, #24]
 8006216:	015a      	lsls	r2, r3, #5
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	4413      	add	r3, r2
 800621c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006220:	691a      	ldr	r2, [r3, #16]
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800622a:	69b9      	ldr	r1, [r7, #24]
 800622c:	0148      	lsls	r0, r1, #5
 800622e:	69f9      	ldr	r1, [r7, #28]
 8006230:	4401      	add	r1, r0
 8006232:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006236:	4313      	orrs	r3, r2
 8006238:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	015a      	lsls	r2, r3, #5
 800623e:	69fb      	ldr	r3, [r7, #28]
 8006240:	4413      	add	r3, r2
 8006242:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006246:	691b      	ldr	r3, [r3, #16]
 8006248:	69ba      	ldr	r2, [r7, #24]
 800624a:	0151      	lsls	r1, r2, #5
 800624c:	69fa      	ldr	r2, [r7, #28]
 800624e:	440a      	add	r2, r1
 8006250:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006254:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006258:	6113      	str	r3, [r2, #16]
 800625a:	e037      	b.n	80062cc <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	691a      	ldr	r2, [r3, #16]
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	4413      	add	r3, r2
 8006266:	1e5a      	subs	r2, r3, #1
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006270:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	8afa      	ldrh	r2, [r7, #22]
 8006278:	fb03 f202 	mul.w	r2, r3, r2
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	015a      	lsls	r2, r3, #5
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	4413      	add	r3, r2
 8006288:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800628c:	691a      	ldr	r2, [r3, #16]
 800628e:	8afb      	ldrh	r3, [r7, #22]
 8006290:	04d9      	lsls	r1, r3, #19
 8006292:	4b38      	ldr	r3, [pc, #224]	@ (8006374 <USB_EPStartXfer+0x538>)
 8006294:	400b      	ands	r3, r1
 8006296:	69b9      	ldr	r1, [r7, #24]
 8006298:	0148      	lsls	r0, r1, #5
 800629a:	69f9      	ldr	r1, [r7, #28]
 800629c:	4401      	add	r1, r0
 800629e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80062a2:	4313      	orrs	r3, r2
 80062a4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	015a      	lsls	r2, r3, #5
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	4413      	add	r3, r2
 80062ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062b2:	691a      	ldr	r2, [r3, #16]
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	6a1b      	ldr	r3, [r3, #32]
 80062b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062bc:	69b9      	ldr	r1, [r7, #24]
 80062be:	0148      	lsls	r0, r1, #5
 80062c0:	69f9      	ldr	r1, [r7, #28]
 80062c2:	4401      	add	r1, r0
 80062c4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80062c8:	4313      	orrs	r3, r2
 80062ca:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80062cc:	79fb      	ldrb	r3, [r7, #7]
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d10d      	bne.n	80062ee <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	68db      	ldr	r3, [r3, #12]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d009      	beq.n	80062ee <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	68d9      	ldr	r1, [r3, #12]
 80062de:	69bb      	ldr	r3, [r7, #24]
 80062e0:	015a      	lsls	r2, r3, #5
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	4413      	add	r3, r2
 80062e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062ea:	460a      	mov	r2, r1
 80062ec:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	791b      	ldrb	r3, [r3, #4]
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d128      	bne.n	8006348 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006302:	2b00      	cmp	r3, #0
 8006304:	d110      	bne.n	8006328 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	015a      	lsls	r2, r3, #5
 800630a:	69fb      	ldr	r3, [r7, #28]
 800630c:	4413      	add	r3, r2
 800630e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	69ba      	ldr	r2, [r7, #24]
 8006316:	0151      	lsls	r1, r2, #5
 8006318:	69fa      	ldr	r2, [r7, #28]
 800631a:	440a      	add	r2, r1
 800631c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006320:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006324:	6013      	str	r3, [r2, #0]
 8006326:	e00f      	b.n	8006348 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006328:	69bb      	ldr	r3, [r7, #24]
 800632a:	015a      	lsls	r2, r3, #5
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	4413      	add	r3, r2
 8006330:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	69ba      	ldr	r2, [r7, #24]
 8006338:	0151      	lsls	r1, r2, #5
 800633a:	69fa      	ldr	r2, [r7, #28]
 800633c:	440a      	add	r2, r1
 800633e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006342:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006346:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006348:	69bb      	ldr	r3, [r7, #24]
 800634a:	015a      	lsls	r2, r3, #5
 800634c:	69fb      	ldr	r3, [r7, #28]
 800634e:	4413      	add	r3, r2
 8006350:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	69ba      	ldr	r2, [r7, #24]
 8006358:	0151      	lsls	r1, r2, #5
 800635a:	69fa      	ldr	r2, [r7, #28]
 800635c:	440a      	add	r2, r1
 800635e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006362:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006366:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006368:	2300      	movs	r3, #0
}
 800636a:	4618      	mov	r0, r3
 800636c:	3720      	adds	r7, #32
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	1ff80000 	.word	0x1ff80000

08006378 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006378:	b480      	push	{r7}
 800637a:	b087      	sub	sp, #28
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006382:	2300      	movs	r3, #0
 8006384:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006386:	2300      	movs	r3, #0
 8006388:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	785b      	ldrb	r3, [r3, #1]
 8006392:	2b01      	cmp	r3, #1
 8006394:	d14a      	bne.n	800642c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	781b      	ldrb	r3, [r3, #0]
 800639a:	015a      	lsls	r2, r3, #5
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	4413      	add	r3, r2
 80063a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80063aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80063ae:	f040 8086 	bne.w	80064be <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	015a      	lsls	r2, r3, #5
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	4413      	add	r3, r2
 80063bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	683a      	ldr	r2, [r7, #0]
 80063c4:	7812      	ldrb	r2, [r2, #0]
 80063c6:	0151      	lsls	r1, r2, #5
 80063c8:	693a      	ldr	r2, [r7, #16]
 80063ca:	440a      	add	r2, r1
 80063cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063d0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80063d4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	015a      	lsls	r2, r3, #5
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	4413      	add	r3, r2
 80063e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	683a      	ldr	r2, [r7, #0]
 80063e8:	7812      	ldrb	r2, [r2, #0]
 80063ea:	0151      	lsls	r1, r2, #5
 80063ec:	693a      	ldr	r2, [r7, #16]
 80063ee:	440a      	add	r2, r1
 80063f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063f4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80063f8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	3301      	adds	r3, #1
 80063fe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006406:	4293      	cmp	r3, r2
 8006408:	d902      	bls.n	8006410 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	75fb      	strb	r3, [r7, #23]
          break;
 800640e:	e056      	b.n	80064be <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	015a      	lsls	r2, r3, #5
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	4413      	add	r3, r2
 800641a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006424:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006428:	d0e7      	beq.n	80063fa <USB_EPStopXfer+0x82>
 800642a:	e048      	b.n	80064be <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	015a      	lsls	r2, r3, #5
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	4413      	add	r3, r2
 8006436:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006440:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006444:	d13b      	bne.n	80064be <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	015a      	lsls	r2, r3, #5
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	4413      	add	r3, r2
 8006450:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	683a      	ldr	r2, [r7, #0]
 8006458:	7812      	ldrb	r2, [r2, #0]
 800645a:	0151      	lsls	r1, r2, #5
 800645c:	693a      	ldr	r2, [r7, #16]
 800645e:	440a      	add	r2, r1
 8006460:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006464:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006468:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	015a      	lsls	r2, r3, #5
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	4413      	add	r3, r2
 8006474:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	683a      	ldr	r2, [r7, #0]
 800647c:	7812      	ldrb	r2, [r2, #0]
 800647e:	0151      	lsls	r1, r2, #5
 8006480:	693a      	ldr	r2, [r7, #16]
 8006482:	440a      	add	r2, r1
 8006484:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006488:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800648c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	3301      	adds	r3, #1
 8006492:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f242 7210 	movw	r2, #10000	@ 0x2710
 800649a:	4293      	cmp	r3, r2
 800649c:	d902      	bls.n	80064a4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	75fb      	strb	r3, [r7, #23]
          break;
 80064a2:	e00c      	b.n	80064be <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	015a      	lsls	r2, r3, #5
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	4413      	add	r3, r2
 80064ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80064b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80064bc:	d0e7      	beq.n	800648e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80064be:	7dfb      	ldrb	r3, [r7, #23]
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	371c      	adds	r7, #28
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b089      	sub	sp, #36	@ 0x24
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	60f8      	str	r0, [r7, #12]
 80064d4:	60b9      	str	r1, [r7, #8]
 80064d6:	4611      	mov	r1, r2
 80064d8:	461a      	mov	r2, r3
 80064da:	460b      	mov	r3, r1
 80064dc:	71fb      	strb	r3, [r7, #7]
 80064de:	4613      	mov	r3, r2
 80064e0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80064ea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d123      	bne.n	800653a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80064f2:	88bb      	ldrh	r3, [r7, #4]
 80064f4:	3303      	adds	r3, #3
 80064f6:	089b      	lsrs	r3, r3, #2
 80064f8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80064fa:	2300      	movs	r3, #0
 80064fc:	61bb      	str	r3, [r7, #24]
 80064fe:	e018      	b.n	8006532 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006500:	79fb      	ldrb	r3, [r7, #7]
 8006502:	031a      	lsls	r2, r3, #12
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	4413      	add	r3, r2
 8006508:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800650c:	461a      	mov	r2, r3
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	3301      	adds	r3, #1
 8006518:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800651a:	69fb      	ldr	r3, [r7, #28]
 800651c:	3301      	adds	r3, #1
 800651e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	3301      	adds	r3, #1
 8006524:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006526:	69fb      	ldr	r3, [r7, #28]
 8006528:	3301      	adds	r3, #1
 800652a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800652c:	69bb      	ldr	r3, [r7, #24]
 800652e:	3301      	adds	r3, #1
 8006530:	61bb      	str	r3, [r7, #24]
 8006532:	69ba      	ldr	r2, [r7, #24]
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	429a      	cmp	r2, r3
 8006538:	d3e2      	bcc.n	8006500 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800653a:	2300      	movs	r3, #0
}
 800653c:	4618      	mov	r0, r3
 800653e:	3724      	adds	r7, #36	@ 0x24
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006548:	b480      	push	{r7}
 800654a:	b08b      	sub	sp, #44	@ 0x2c
 800654c:	af00      	add	r7, sp, #0
 800654e:	60f8      	str	r0, [r7, #12]
 8006550:	60b9      	str	r1, [r7, #8]
 8006552:	4613      	mov	r3, r2
 8006554:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800655e:	88fb      	ldrh	r3, [r7, #6]
 8006560:	089b      	lsrs	r3, r3, #2
 8006562:	b29b      	uxth	r3, r3
 8006564:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006566:	88fb      	ldrh	r3, [r7, #6]
 8006568:	f003 0303 	and.w	r3, r3, #3
 800656c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800656e:	2300      	movs	r3, #0
 8006570:	623b      	str	r3, [r7, #32]
 8006572:	e014      	b.n	800659e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006574:	69bb      	ldr	r3, [r7, #24]
 8006576:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800657e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006582:	3301      	adds	r3, #1
 8006584:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006588:	3301      	adds	r3, #1
 800658a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800658c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800658e:	3301      	adds	r3, #1
 8006590:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006594:	3301      	adds	r3, #1
 8006596:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006598:	6a3b      	ldr	r3, [r7, #32]
 800659a:	3301      	adds	r3, #1
 800659c:	623b      	str	r3, [r7, #32]
 800659e:	6a3a      	ldr	r2, [r7, #32]
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d3e6      	bcc.n	8006574 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80065a6:	8bfb      	ldrh	r3, [r7, #30]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d01e      	beq.n	80065ea <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80065ac:	2300      	movs	r3, #0
 80065ae:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80065b0:	69bb      	ldr	r3, [r7, #24]
 80065b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80065b6:	461a      	mov	r2, r3
 80065b8:	f107 0310 	add.w	r3, r7, #16
 80065bc:	6812      	ldr	r2, [r2, #0]
 80065be:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80065c0:	693a      	ldr	r2, [r7, #16]
 80065c2:	6a3b      	ldr	r3, [r7, #32]
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	00db      	lsls	r3, r3, #3
 80065c8:	fa22 f303 	lsr.w	r3, r2, r3
 80065cc:	b2da      	uxtb	r2, r3
 80065ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065d0:	701a      	strb	r2, [r3, #0]
      i++;
 80065d2:	6a3b      	ldr	r3, [r7, #32]
 80065d4:	3301      	adds	r3, #1
 80065d6:	623b      	str	r3, [r7, #32]
      pDest++;
 80065d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065da:	3301      	adds	r3, #1
 80065dc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80065de:	8bfb      	ldrh	r3, [r7, #30]
 80065e0:	3b01      	subs	r3, #1
 80065e2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80065e4:	8bfb      	ldrh	r3, [r7, #30]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d1ea      	bne.n	80065c0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80065ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	372c      	adds	r7, #44	@ 0x2c
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr

080065f8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b085      	sub	sp, #20
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	781b      	ldrb	r3, [r3, #0]
 800660a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	785b      	ldrb	r3, [r3, #1]
 8006610:	2b01      	cmp	r3, #1
 8006612:	d12c      	bne.n	800666e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	015a      	lsls	r2, r3, #5
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	4413      	add	r3, r2
 800661c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	2b00      	cmp	r3, #0
 8006624:	db12      	blt.n	800664c <USB_EPSetStall+0x54>
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d00f      	beq.n	800664c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	015a      	lsls	r2, r3, #5
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	4413      	add	r3, r2
 8006634:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	68ba      	ldr	r2, [r7, #8]
 800663c:	0151      	lsls	r1, r2, #5
 800663e:	68fa      	ldr	r2, [r7, #12]
 8006640:	440a      	add	r2, r1
 8006642:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006646:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800664a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	015a      	lsls	r2, r3, #5
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	4413      	add	r3, r2
 8006654:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	68ba      	ldr	r2, [r7, #8]
 800665c:	0151      	lsls	r1, r2, #5
 800665e:	68fa      	ldr	r2, [r7, #12]
 8006660:	440a      	add	r2, r1
 8006662:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006666:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800666a:	6013      	str	r3, [r2, #0]
 800666c:	e02b      	b.n	80066c6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	015a      	lsls	r2, r3, #5
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	4413      	add	r3, r2
 8006676:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	2b00      	cmp	r3, #0
 800667e:	db12      	blt.n	80066a6 <USB_EPSetStall+0xae>
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d00f      	beq.n	80066a6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	015a      	lsls	r2, r3, #5
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	4413      	add	r3, r2
 800668e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	68ba      	ldr	r2, [r7, #8]
 8006696:	0151      	lsls	r1, r2, #5
 8006698:	68fa      	ldr	r2, [r7, #12]
 800669a:	440a      	add	r2, r1
 800669c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066a0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80066a4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	015a      	lsls	r2, r3, #5
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	4413      	add	r3, r2
 80066ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	68ba      	ldr	r2, [r7, #8]
 80066b6:	0151      	lsls	r1, r2, #5
 80066b8:	68fa      	ldr	r2, [r7, #12]
 80066ba:	440a      	add	r2, r1
 80066bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80066c4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80066c6:	2300      	movs	r3, #0
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3714      	adds	r7, #20
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b085      	sub	sp, #20
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	785b      	ldrb	r3, [r3, #1]
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d128      	bne.n	8006742 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	015a      	lsls	r2, r3, #5
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	4413      	add	r3, r2
 80066f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	68ba      	ldr	r2, [r7, #8]
 8006700:	0151      	lsls	r1, r2, #5
 8006702:	68fa      	ldr	r2, [r7, #12]
 8006704:	440a      	add	r2, r1
 8006706:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800670a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800670e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	791b      	ldrb	r3, [r3, #4]
 8006714:	2b03      	cmp	r3, #3
 8006716:	d003      	beq.n	8006720 <USB_EPClearStall+0x4c>
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	791b      	ldrb	r3, [r3, #4]
 800671c:	2b02      	cmp	r3, #2
 800671e:	d138      	bne.n	8006792 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	015a      	lsls	r2, r3, #5
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	4413      	add	r3, r2
 8006728:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	68ba      	ldr	r2, [r7, #8]
 8006730:	0151      	lsls	r1, r2, #5
 8006732:	68fa      	ldr	r2, [r7, #12]
 8006734:	440a      	add	r2, r1
 8006736:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800673a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800673e:	6013      	str	r3, [r2, #0]
 8006740:	e027      	b.n	8006792 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	015a      	lsls	r2, r3, #5
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	4413      	add	r3, r2
 800674a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	68ba      	ldr	r2, [r7, #8]
 8006752:	0151      	lsls	r1, r2, #5
 8006754:	68fa      	ldr	r2, [r7, #12]
 8006756:	440a      	add	r2, r1
 8006758:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800675c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006760:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	791b      	ldrb	r3, [r3, #4]
 8006766:	2b03      	cmp	r3, #3
 8006768:	d003      	beq.n	8006772 <USB_EPClearStall+0x9e>
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	791b      	ldrb	r3, [r3, #4]
 800676e:	2b02      	cmp	r3, #2
 8006770:	d10f      	bne.n	8006792 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	015a      	lsls	r2, r3, #5
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	4413      	add	r3, r2
 800677a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	68ba      	ldr	r2, [r7, #8]
 8006782:	0151      	lsls	r1, r2, #5
 8006784:	68fa      	ldr	r2, [r7, #12]
 8006786:	440a      	add	r2, r1
 8006788:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800678c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006790:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006792:	2300      	movs	r3, #0
}
 8006794:	4618      	mov	r0, r3
 8006796:	3714      	adds	r7, #20
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr

080067a0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b085      	sub	sp, #20
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	460b      	mov	r3, r1
 80067aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68fa      	ldr	r2, [r7, #12]
 80067ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80067be:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80067c2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	78fb      	ldrb	r3, [r7, #3]
 80067ce:	011b      	lsls	r3, r3, #4
 80067d0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80067d4:	68f9      	ldr	r1, [r7, #12]
 80067d6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80067da:	4313      	orrs	r3, r2
 80067dc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80067de:	2300      	movs	r3, #0
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3714      	adds	r7, #20
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr

080067ec <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b085      	sub	sp, #20
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	68fa      	ldr	r2, [r7, #12]
 8006802:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006806:	f023 0303 	bic.w	r3, r3, #3
 800680a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	68fa      	ldr	r2, [r7, #12]
 8006816:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800681a:	f023 0302 	bic.w	r3, r3, #2
 800681e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006820:	2300      	movs	r3, #0
}
 8006822:	4618      	mov	r0, r3
 8006824:	3714      	adds	r7, #20
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr

0800682e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800682e:	b480      	push	{r7}
 8006830:	b085      	sub	sp, #20
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	68fa      	ldr	r2, [r7, #12]
 8006844:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006848:	f023 0303 	bic.w	r3, r3, #3
 800684c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	68fa      	ldr	r2, [r7, #12]
 8006858:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800685c:	f043 0302 	orr.w	r3, r3, #2
 8006860:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006862:	2300      	movs	r3, #0
}
 8006864:	4618      	mov	r0, r3
 8006866:	3714      	adds	r7, #20
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006870:	b480      	push	{r7}
 8006872:	b085      	sub	sp, #20
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	695b      	ldr	r3, [r3, #20]
 800687c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	699b      	ldr	r3, [r3, #24]
 8006882:	68fa      	ldr	r2, [r7, #12]
 8006884:	4013      	ands	r3, r2
 8006886:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006888:	68fb      	ldr	r3, [r7, #12]
}
 800688a:	4618      	mov	r0, r3
 800688c:	3714      	adds	r7, #20
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr

08006896 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006896:	b480      	push	{r7}
 8006898:	b085      	sub	sp, #20
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068a8:	699b      	ldr	r3, [r3, #24]
 80068aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068b2:	69db      	ldr	r3, [r3, #28]
 80068b4:	68ba      	ldr	r2, [r7, #8]
 80068b6:	4013      	ands	r3, r2
 80068b8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	0c1b      	lsrs	r3, r3, #16
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3714      	adds	r7, #20
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr

080068ca <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80068ca:	b480      	push	{r7}
 80068cc:	b085      	sub	sp, #20
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068dc:	699b      	ldr	r3, [r3, #24]
 80068de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068e6:	69db      	ldr	r3, [r3, #28]
 80068e8:	68ba      	ldr	r2, [r7, #8]
 80068ea:	4013      	ands	r3, r2
 80068ec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	b29b      	uxth	r3, r3
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3714      	adds	r7, #20
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr

080068fe <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80068fe:	b480      	push	{r7}
 8006900:	b085      	sub	sp, #20
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
 8006906:	460b      	mov	r3, r1
 8006908:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800690e:	78fb      	ldrb	r3, [r7, #3]
 8006910:	015a      	lsls	r2, r3, #5
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	4413      	add	r3, r2
 8006916:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006924:	695b      	ldr	r3, [r3, #20]
 8006926:	68ba      	ldr	r2, [r7, #8]
 8006928:	4013      	ands	r3, r2
 800692a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800692c:	68bb      	ldr	r3, [r7, #8]
}
 800692e:	4618      	mov	r0, r3
 8006930:	3714      	adds	r7, #20
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr

0800693a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800693a:	b480      	push	{r7}
 800693c:	b087      	sub	sp, #28
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
 8006942:	460b      	mov	r3, r1
 8006944:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006950:	691b      	ldr	r3, [r3, #16]
 8006952:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800695a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800695c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800695e:	78fb      	ldrb	r3, [r7, #3]
 8006960:	f003 030f 	and.w	r3, r3, #15
 8006964:	68fa      	ldr	r2, [r7, #12]
 8006966:	fa22 f303 	lsr.w	r3, r2, r3
 800696a:	01db      	lsls	r3, r3, #7
 800696c:	b2db      	uxtb	r3, r3
 800696e:	693a      	ldr	r2, [r7, #16]
 8006970:	4313      	orrs	r3, r2
 8006972:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006974:	78fb      	ldrb	r3, [r7, #3]
 8006976:	015a      	lsls	r2, r3, #5
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	4413      	add	r3, r2
 800697c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	693a      	ldr	r2, [r7, #16]
 8006984:	4013      	ands	r3, r2
 8006986:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006988:	68bb      	ldr	r3, [r7, #8]
}
 800698a:	4618      	mov	r0, r3
 800698c:	371c      	adds	r7, #28
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr

08006996 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006996:	b480      	push	{r7}
 8006998:	b083      	sub	sp, #12
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	695b      	ldr	r3, [r3, #20]
 80069a2:	f003 0301 	and.w	r3, r3, #1
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	370c      	adds	r7, #12
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr

080069b2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80069b2:	b480      	push	{r7}
 80069b4:	b085      	sub	sp, #20
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	68fa      	ldr	r2, [r7, #12]
 80069c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069cc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80069d0:	f023 0307 	bic.w	r3, r3, #7
 80069d4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	68fa      	ldr	r2, [r7, #12]
 80069e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80069e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80069ea:	2300      	movs	r3, #0
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3714      	adds	r7, #20
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr

080069f8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b087      	sub	sp, #28
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	460b      	mov	r3, r1
 8006a02:	607a      	str	r2, [r7, #4]
 8006a04:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	333c      	adds	r3, #60	@ 0x3c
 8006a0e:	3304      	adds	r3, #4
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	4a26      	ldr	r2, [pc, #152]	@ (8006ab0 <USB_EP0_OutStart+0xb8>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d90a      	bls.n	8006a32 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006a28:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a2c:	d101      	bne.n	8006a32 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	e037      	b.n	8006aa2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a38:	461a      	mov	r2, r3
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	697a      	ldr	r2, [r7, #20]
 8006a48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a4c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006a50:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a58:	691b      	ldr	r3, [r3, #16]
 8006a5a:	697a      	ldr	r2, [r7, #20]
 8006a5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a60:	f043 0318 	orr.w	r3, r3, #24
 8006a64:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a6c:	691b      	ldr	r3, [r3, #16]
 8006a6e:	697a      	ldr	r2, [r7, #20]
 8006a70:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a74:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006a78:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006a7a:	7afb      	ldrb	r3, [r7, #11]
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d10f      	bne.n	8006aa0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a86:	461a      	mov	r2, r3
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	697a      	ldr	r2, [r7, #20]
 8006a96:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a9a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006a9e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006aa0:	2300      	movs	r3, #0
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	371c      	adds	r7, #28
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr
 8006aae:	bf00      	nop
 8006ab0:	4f54300a 	.word	0x4f54300a

08006ab4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b085      	sub	sp, #20
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006abc:	2300      	movs	r3, #0
 8006abe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006acc:	d901      	bls.n	8006ad2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006ace:	2303      	movs	r3, #3
 8006ad0:	e022      	b.n	8006b18 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	691b      	ldr	r3, [r3, #16]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	daf2      	bge.n	8006ac0 <USB_CoreReset+0xc>

  count = 10U;
 8006ada:	230a      	movs	r3, #10
 8006adc:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8006ade:	e002      	b.n	8006ae6 <USB_CoreReset+0x32>
  {
    count--;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	3b01      	subs	r3, #1
 8006ae4:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d1f9      	bne.n	8006ae0 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	691b      	ldr	r3, [r3, #16]
 8006af0:	f043 0201 	orr.w	r2, r3, #1
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	3301      	adds	r3, #1
 8006afc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006b04:	d901      	bls.n	8006b0a <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8006b06:	2303      	movs	r3, #3
 8006b08:	e006      	b.n	8006b18 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	691b      	ldr	r3, [r3, #16]
 8006b0e:	f003 0301 	and.w	r3, r3, #1
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d0f0      	beq.n	8006af8 <USB_CoreReset+0x44>

  return HAL_OK;
 8006b16:	2300      	movs	r3, #0
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3714      	adds	r7, #20
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr

08006b24 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b084      	sub	sp, #16
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	460b      	mov	r3, r1
 8006b2e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006b30:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006b34:	f005 fda2 	bl	800c67c <USBD_static_malloc>
 8006b38:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d109      	bne.n	8006b54 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	32b0      	adds	r2, #176	@ 0xb0
 8006b4a:	2100      	movs	r1, #0
 8006b4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006b50:	2302      	movs	r3, #2
 8006b52:	e0d4      	b.n	8006cfe <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006b54:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006b58:	2100      	movs	r1, #0
 8006b5a:	68f8      	ldr	r0, [r7, #12]
 8006b5c:	f005 fe52 	bl	800c804 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	32b0      	adds	r2, #176	@ 0xb0
 8006b6a:	68f9      	ldr	r1, [r7, #12]
 8006b6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	32b0      	adds	r2, #176	@ 0xb0
 8006b7a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	7c1b      	ldrb	r3, [r3, #16]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d138      	bne.n	8006bfe <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006b8c:	4b5e      	ldr	r3, [pc, #376]	@ (8006d08 <USBD_CDC_Init+0x1e4>)
 8006b8e:	7819      	ldrb	r1, [r3, #0]
 8006b90:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006b94:	2202      	movs	r2, #2
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f005 fc4d 	bl	800c436 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006b9c:	4b5a      	ldr	r3, [pc, #360]	@ (8006d08 <USBD_CDC_Init+0x1e4>)
 8006b9e:	781b      	ldrb	r3, [r3, #0]
 8006ba0:	f003 020f 	and.w	r2, r3, #15
 8006ba4:	6879      	ldr	r1, [r7, #4]
 8006ba6:	4613      	mov	r3, r2
 8006ba8:	009b      	lsls	r3, r3, #2
 8006baa:	4413      	add	r3, r2
 8006bac:	009b      	lsls	r3, r3, #2
 8006bae:	440b      	add	r3, r1
 8006bb0:	3323      	adds	r3, #35	@ 0x23
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006bb6:	4b55      	ldr	r3, [pc, #340]	@ (8006d0c <USBD_CDC_Init+0x1e8>)
 8006bb8:	7819      	ldrb	r1, [r3, #0]
 8006bba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006bbe:	2202      	movs	r2, #2
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f005 fc38 	bl	800c436 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006bc6:	4b51      	ldr	r3, [pc, #324]	@ (8006d0c <USBD_CDC_Init+0x1e8>)
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	f003 020f 	and.w	r2, r3, #15
 8006bce:	6879      	ldr	r1, [r7, #4]
 8006bd0:	4613      	mov	r3, r2
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	4413      	add	r3, r2
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	440b      	add	r3, r1
 8006bda:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8006bde:	2201      	movs	r2, #1
 8006be0:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006be2:	4b4b      	ldr	r3, [pc, #300]	@ (8006d10 <USBD_CDC_Init+0x1ec>)
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	f003 020f 	and.w	r2, r3, #15
 8006bea:	6879      	ldr	r1, [r7, #4]
 8006bec:	4613      	mov	r3, r2
 8006bee:	009b      	lsls	r3, r3, #2
 8006bf0:	4413      	add	r3, r2
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	440b      	add	r3, r1
 8006bf6:	331c      	adds	r3, #28
 8006bf8:	2210      	movs	r2, #16
 8006bfa:	601a      	str	r2, [r3, #0]
 8006bfc:	e035      	b.n	8006c6a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006bfe:	4b42      	ldr	r3, [pc, #264]	@ (8006d08 <USBD_CDC_Init+0x1e4>)
 8006c00:	7819      	ldrb	r1, [r3, #0]
 8006c02:	2340      	movs	r3, #64	@ 0x40
 8006c04:	2202      	movs	r2, #2
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f005 fc15 	bl	800c436 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006c0c:	4b3e      	ldr	r3, [pc, #248]	@ (8006d08 <USBD_CDC_Init+0x1e4>)
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	f003 020f 	and.w	r2, r3, #15
 8006c14:	6879      	ldr	r1, [r7, #4]
 8006c16:	4613      	mov	r3, r2
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	4413      	add	r3, r2
 8006c1c:	009b      	lsls	r3, r3, #2
 8006c1e:	440b      	add	r3, r1
 8006c20:	3323      	adds	r3, #35	@ 0x23
 8006c22:	2201      	movs	r2, #1
 8006c24:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006c26:	4b39      	ldr	r3, [pc, #228]	@ (8006d0c <USBD_CDC_Init+0x1e8>)
 8006c28:	7819      	ldrb	r1, [r3, #0]
 8006c2a:	2340      	movs	r3, #64	@ 0x40
 8006c2c:	2202      	movs	r2, #2
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f005 fc01 	bl	800c436 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006c34:	4b35      	ldr	r3, [pc, #212]	@ (8006d0c <USBD_CDC_Init+0x1e8>)
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	f003 020f 	and.w	r2, r3, #15
 8006c3c:	6879      	ldr	r1, [r7, #4]
 8006c3e:	4613      	mov	r3, r2
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	4413      	add	r3, r2
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	440b      	add	r3, r1
 8006c48:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006c50:	4b2f      	ldr	r3, [pc, #188]	@ (8006d10 <USBD_CDC_Init+0x1ec>)
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	f003 020f 	and.w	r2, r3, #15
 8006c58:	6879      	ldr	r1, [r7, #4]
 8006c5a:	4613      	mov	r3, r2
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	4413      	add	r3, r2
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	440b      	add	r3, r1
 8006c64:	331c      	adds	r3, #28
 8006c66:	2210      	movs	r2, #16
 8006c68:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006c6a:	4b29      	ldr	r3, [pc, #164]	@ (8006d10 <USBD_CDC_Init+0x1ec>)
 8006c6c:	7819      	ldrb	r1, [r3, #0]
 8006c6e:	2308      	movs	r3, #8
 8006c70:	2203      	movs	r2, #3
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f005 fbdf 	bl	800c436 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006c78:	4b25      	ldr	r3, [pc, #148]	@ (8006d10 <USBD_CDC_Init+0x1ec>)
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	f003 020f 	and.w	r2, r3, #15
 8006c80:	6879      	ldr	r1, [r7, #4]
 8006c82:	4613      	mov	r3, r2
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	4413      	add	r3, r2
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	440b      	add	r3, r1
 8006c8c:	3323      	adds	r3, #35	@ 0x23
 8006c8e:	2201      	movs	r2, #1
 8006c90:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2200      	movs	r2, #0
 8006c96:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	33b0      	adds	r3, #176	@ 0xb0
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	4413      	add	r3, r2
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d101      	bne.n	8006ccc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006cc8:	2302      	movs	r3, #2
 8006cca:	e018      	b.n	8006cfe <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	7c1b      	ldrb	r3, [r3, #16]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d10a      	bne.n	8006cea <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006cd4:	4b0d      	ldr	r3, [pc, #52]	@ (8006d0c <USBD_CDC_Init+0x1e8>)
 8006cd6:	7819      	ldrb	r1, [r3, #0]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006cde:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f005 fc96 	bl	800c614 <USBD_LL_PrepareReceive>
 8006ce8:	e008      	b.n	8006cfc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006cea:	4b08      	ldr	r3, [pc, #32]	@ (8006d0c <USBD_CDC_Init+0x1e8>)
 8006cec:	7819      	ldrb	r1, [r3, #0]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006cf4:	2340      	movs	r3, #64	@ 0x40
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f005 fc8c 	bl	800c614 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006cfc:	2300      	movs	r3, #0
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3710      	adds	r7, #16
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
 8006d06:	bf00      	nop
 8006d08:	20000093 	.word	0x20000093
 8006d0c:	20000094 	.word	0x20000094
 8006d10:	20000095 	.word	0x20000095

08006d14 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b082      	sub	sp, #8
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	460b      	mov	r3, r1
 8006d1e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006d20:	4b3a      	ldr	r3, [pc, #232]	@ (8006e0c <USBD_CDC_DeInit+0xf8>)
 8006d22:	781b      	ldrb	r3, [r3, #0]
 8006d24:	4619      	mov	r1, r3
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f005 fbab 	bl	800c482 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006d2c:	4b37      	ldr	r3, [pc, #220]	@ (8006e0c <USBD_CDC_DeInit+0xf8>)
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	f003 020f 	and.w	r2, r3, #15
 8006d34:	6879      	ldr	r1, [r7, #4]
 8006d36:	4613      	mov	r3, r2
 8006d38:	009b      	lsls	r3, r3, #2
 8006d3a:	4413      	add	r3, r2
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	440b      	add	r3, r1
 8006d40:	3323      	adds	r3, #35	@ 0x23
 8006d42:	2200      	movs	r2, #0
 8006d44:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006d46:	4b32      	ldr	r3, [pc, #200]	@ (8006e10 <USBD_CDC_DeInit+0xfc>)
 8006d48:	781b      	ldrb	r3, [r3, #0]
 8006d4a:	4619      	mov	r1, r3
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f005 fb98 	bl	800c482 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006d52:	4b2f      	ldr	r3, [pc, #188]	@ (8006e10 <USBD_CDC_DeInit+0xfc>)
 8006d54:	781b      	ldrb	r3, [r3, #0]
 8006d56:	f003 020f 	and.w	r2, r3, #15
 8006d5a:	6879      	ldr	r1, [r7, #4]
 8006d5c:	4613      	mov	r3, r2
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	4413      	add	r3, r2
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	440b      	add	r3, r1
 8006d66:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006d6e:	4b29      	ldr	r3, [pc, #164]	@ (8006e14 <USBD_CDC_DeInit+0x100>)
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	4619      	mov	r1, r3
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f005 fb84 	bl	800c482 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006d7a:	4b26      	ldr	r3, [pc, #152]	@ (8006e14 <USBD_CDC_DeInit+0x100>)
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	f003 020f 	and.w	r2, r3, #15
 8006d82:	6879      	ldr	r1, [r7, #4]
 8006d84:	4613      	mov	r3, r2
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	4413      	add	r3, r2
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	440b      	add	r3, r1
 8006d8e:	3323      	adds	r3, #35	@ 0x23
 8006d90:	2200      	movs	r2, #0
 8006d92:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006d94:	4b1f      	ldr	r3, [pc, #124]	@ (8006e14 <USBD_CDC_DeInit+0x100>)
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	f003 020f 	and.w	r2, r3, #15
 8006d9c:	6879      	ldr	r1, [r7, #4]
 8006d9e:	4613      	mov	r3, r2
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	4413      	add	r3, r2
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	440b      	add	r3, r1
 8006da8:	331c      	adds	r3, #28
 8006daa:	2200      	movs	r2, #0
 8006dac:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	32b0      	adds	r2, #176	@ 0xb0
 8006db8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d01f      	beq.n	8006e00 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	33b0      	adds	r3, #176	@ 0xb0
 8006dca:	009b      	lsls	r3, r3, #2
 8006dcc:	4413      	add	r3, r2
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	32b0      	adds	r2, #176	@ 0xb0
 8006dde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006de2:	4618      	mov	r0, r3
 8006de4:	f005 fc58 	bl	800c698 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	32b0      	adds	r2, #176	@ 0xb0
 8006df2:	2100      	movs	r1, #0
 8006df4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006e00:	2300      	movs	r3, #0
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3708      	adds	r7, #8
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}
 8006e0a:	bf00      	nop
 8006e0c:	20000093 	.word	0x20000093
 8006e10:	20000094 	.word	0x20000094
 8006e14:	20000095 	.word	0x20000095

08006e18 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b086      	sub	sp, #24
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	32b0      	adds	r2, #176	@ 0xb0
 8006e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e30:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006e32:	2300      	movs	r3, #0
 8006e34:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006e36:	2300      	movs	r3, #0
 8006e38:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d101      	bne.n	8006e48 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006e44:	2303      	movs	r3, #3
 8006e46:	e0bf      	b.n	8006fc8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d050      	beq.n	8006ef6 <USBD_CDC_Setup+0xde>
 8006e54:	2b20      	cmp	r3, #32
 8006e56:	f040 80af 	bne.w	8006fb8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	88db      	ldrh	r3, [r3, #6]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d03a      	beq.n	8006ed8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	781b      	ldrb	r3, [r3, #0]
 8006e66:	b25b      	sxtb	r3, r3
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	da1b      	bge.n	8006ea4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006e72:	687a      	ldr	r2, [r7, #4]
 8006e74:	33b0      	adds	r3, #176	@ 0xb0
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	4413      	add	r3, r2
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	683a      	ldr	r2, [r7, #0]
 8006e80:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006e82:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006e84:	683a      	ldr	r2, [r7, #0]
 8006e86:	88d2      	ldrh	r2, [r2, #6]
 8006e88:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	88db      	ldrh	r3, [r3, #6]
 8006e8e:	2b07      	cmp	r3, #7
 8006e90:	bf28      	it	cs
 8006e92:	2307      	movcs	r3, #7
 8006e94:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	89fa      	ldrh	r2, [r7, #14]
 8006e9a:	4619      	mov	r1, r3
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f001 fda7 	bl	80089f0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006ea2:	e090      	b.n	8006fc6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	785a      	ldrb	r2, [r3, #1]
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	88db      	ldrh	r3, [r3, #6]
 8006eb2:	2b3f      	cmp	r3, #63	@ 0x3f
 8006eb4:	d803      	bhi.n	8006ebe <USBD_CDC_Setup+0xa6>
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	88db      	ldrh	r3, [r3, #6]
 8006eba:	b2da      	uxtb	r2, r3
 8006ebc:	e000      	b.n	8006ec0 <USBD_CDC_Setup+0xa8>
 8006ebe:	2240      	movs	r2, #64	@ 0x40
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006ec6:	6939      	ldr	r1, [r7, #16]
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8006ece:	461a      	mov	r2, r3
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f001 fdbc 	bl	8008a4e <USBD_CtlPrepareRx>
      break;
 8006ed6:	e076      	b.n	8006fc6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	33b0      	adds	r3, #176	@ 0xb0
 8006ee2:	009b      	lsls	r3, r3, #2
 8006ee4:	4413      	add	r3, r2
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	683a      	ldr	r2, [r7, #0]
 8006eec:	7850      	ldrb	r0, [r2, #1]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	6839      	ldr	r1, [r7, #0]
 8006ef2:	4798      	blx	r3
      break;
 8006ef4:	e067      	b.n	8006fc6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	785b      	ldrb	r3, [r3, #1]
 8006efa:	2b0b      	cmp	r3, #11
 8006efc:	d851      	bhi.n	8006fa2 <USBD_CDC_Setup+0x18a>
 8006efe:	a201      	add	r2, pc, #4	@ (adr r2, 8006f04 <USBD_CDC_Setup+0xec>)
 8006f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f04:	08006f35 	.word	0x08006f35
 8006f08:	08006fb1 	.word	0x08006fb1
 8006f0c:	08006fa3 	.word	0x08006fa3
 8006f10:	08006fa3 	.word	0x08006fa3
 8006f14:	08006fa3 	.word	0x08006fa3
 8006f18:	08006fa3 	.word	0x08006fa3
 8006f1c:	08006fa3 	.word	0x08006fa3
 8006f20:	08006fa3 	.word	0x08006fa3
 8006f24:	08006fa3 	.word	0x08006fa3
 8006f28:	08006fa3 	.word	0x08006fa3
 8006f2c:	08006f5f 	.word	0x08006f5f
 8006f30:	08006f89 	.word	0x08006f89
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f3a:	b2db      	uxtb	r3, r3
 8006f3c:	2b03      	cmp	r3, #3
 8006f3e:	d107      	bne.n	8006f50 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006f40:	f107 030a 	add.w	r3, r7, #10
 8006f44:	2202      	movs	r2, #2
 8006f46:	4619      	mov	r1, r3
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f001 fd51 	bl	80089f0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f4e:	e032      	b.n	8006fb6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006f50:	6839      	ldr	r1, [r7, #0]
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f001 fccf 	bl	80088f6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006f58:	2303      	movs	r3, #3
 8006f5a:	75fb      	strb	r3, [r7, #23]
          break;
 8006f5c:	e02b      	b.n	8006fb6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	2b03      	cmp	r3, #3
 8006f68:	d107      	bne.n	8006f7a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006f6a:	f107 030d 	add.w	r3, r7, #13
 8006f6e:	2201      	movs	r2, #1
 8006f70:	4619      	mov	r1, r3
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f001 fd3c 	bl	80089f0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f78:	e01d      	b.n	8006fb6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006f7a:	6839      	ldr	r1, [r7, #0]
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f001 fcba 	bl	80088f6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006f82:	2303      	movs	r3, #3
 8006f84:	75fb      	strb	r3, [r7, #23]
          break;
 8006f86:	e016      	b.n	8006fb6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	2b03      	cmp	r3, #3
 8006f92:	d00f      	beq.n	8006fb4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006f94:	6839      	ldr	r1, [r7, #0]
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f001 fcad 	bl	80088f6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006f9c:	2303      	movs	r3, #3
 8006f9e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006fa0:	e008      	b.n	8006fb4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006fa2:	6839      	ldr	r1, [r7, #0]
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f001 fca6 	bl	80088f6 <USBD_CtlError>
          ret = USBD_FAIL;
 8006faa:	2303      	movs	r3, #3
 8006fac:	75fb      	strb	r3, [r7, #23]
          break;
 8006fae:	e002      	b.n	8006fb6 <USBD_CDC_Setup+0x19e>
          break;
 8006fb0:	bf00      	nop
 8006fb2:	e008      	b.n	8006fc6 <USBD_CDC_Setup+0x1ae>
          break;
 8006fb4:	bf00      	nop
      }
      break;
 8006fb6:	e006      	b.n	8006fc6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006fb8:	6839      	ldr	r1, [r7, #0]
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f001 fc9b 	bl	80088f6 <USBD_CtlError>
      ret = USBD_FAIL;
 8006fc0:	2303      	movs	r3, #3
 8006fc2:	75fb      	strb	r3, [r7, #23]
      break;
 8006fc4:	bf00      	nop
  }

  return (uint8_t)ret;
 8006fc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3718      	adds	r7, #24
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b084      	sub	sp, #16
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	460b      	mov	r3, r1
 8006fda:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006fe2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	32b0      	adds	r2, #176	@ 0xb0
 8006fee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d101      	bne.n	8006ffa <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006ff6:	2303      	movs	r3, #3
 8006ff8:	e065      	b.n	80070c6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	32b0      	adds	r2, #176	@ 0xb0
 8007004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007008:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800700a:	78fb      	ldrb	r3, [r7, #3]
 800700c:	f003 020f 	and.w	r2, r3, #15
 8007010:	6879      	ldr	r1, [r7, #4]
 8007012:	4613      	mov	r3, r2
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	4413      	add	r3, r2
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	440b      	add	r3, r1
 800701c:	3314      	adds	r3, #20
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d02f      	beq.n	8007084 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007024:	78fb      	ldrb	r3, [r7, #3]
 8007026:	f003 020f 	and.w	r2, r3, #15
 800702a:	6879      	ldr	r1, [r7, #4]
 800702c:	4613      	mov	r3, r2
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	4413      	add	r3, r2
 8007032:	009b      	lsls	r3, r3, #2
 8007034:	440b      	add	r3, r1
 8007036:	3314      	adds	r3, #20
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	78fb      	ldrb	r3, [r7, #3]
 800703c:	f003 010f 	and.w	r1, r3, #15
 8007040:	68f8      	ldr	r0, [r7, #12]
 8007042:	460b      	mov	r3, r1
 8007044:	00db      	lsls	r3, r3, #3
 8007046:	440b      	add	r3, r1
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	4403      	add	r3, r0
 800704c:	331c      	adds	r3, #28
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	fbb2 f1f3 	udiv	r1, r2, r3
 8007054:	fb01 f303 	mul.w	r3, r1, r3
 8007058:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800705a:	2b00      	cmp	r3, #0
 800705c:	d112      	bne.n	8007084 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800705e:	78fb      	ldrb	r3, [r7, #3]
 8007060:	f003 020f 	and.w	r2, r3, #15
 8007064:	6879      	ldr	r1, [r7, #4]
 8007066:	4613      	mov	r3, r2
 8007068:	009b      	lsls	r3, r3, #2
 800706a:	4413      	add	r3, r2
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	440b      	add	r3, r1
 8007070:	3314      	adds	r3, #20
 8007072:	2200      	movs	r2, #0
 8007074:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007076:	78f9      	ldrb	r1, [r7, #3]
 8007078:	2300      	movs	r3, #0
 800707a:	2200      	movs	r2, #0
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f005 faa8 	bl	800c5d2 <USBD_LL_Transmit>
 8007082:	e01f      	b.n	80070c4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	2200      	movs	r2, #0
 8007088:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	33b0      	adds	r3, #176	@ 0xb0
 8007096:	009b      	lsls	r3, r3, #2
 8007098:	4413      	add	r3, r2
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	691b      	ldr	r3, [r3, #16]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d010      	beq.n	80070c4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80070a8:	687a      	ldr	r2, [r7, #4]
 80070aa:	33b0      	adds	r3, #176	@ 0xb0
 80070ac:	009b      	lsls	r3, r3, #2
 80070ae:	4413      	add	r3, r2
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	691b      	ldr	r3, [r3, #16]
 80070b4:	68ba      	ldr	r2, [r7, #8]
 80070b6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80070ba:	68ba      	ldr	r2, [r7, #8]
 80070bc:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80070c0:	78fa      	ldrb	r2, [r7, #3]
 80070c2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80070c4:	2300      	movs	r3, #0
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3710      	adds	r7, #16
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}

080070ce <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80070ce:	b580      	push	{r7, lr}
 80070d0:	b084      	sub	sp, #16
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	6078      	str	r0, [r7, #4]
 80070d6:	460b      	mov	r3, r1
 80070d8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	32b0      	adds	r2, #176	@ 0xb0
 80070e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070e8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	32b0      	adds	r2, #176	@ 0xb0
 80070f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d101      	bne.n	8007100 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80070fc:	2303      	movs	r3, #3
 80070fe:	e01a      	b.n	8007136 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007100:	78fb      	ldrb	r3, [r7, #3]
 8007102:	4619      	mov	r1, r3
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f005 faa6 	bl	800c656 <USBD_LL_GetRxDataSize>
 800710a:	4602      	mov	r2, r0
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	33b0      	adds	r3, #176	@ 0xb0
 800711c:	009b      	lsls	r3, r3, #2
 800711e:	4413      	add	r3, r2
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	68db      	ldr	r3, [r3, #12]
 8007124:	68fa      	ldr	r2, [r7, #12]
 8007126:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800712a:	68fa      	ldr	r2, [r7, #12]
 800712c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007130:	4611      	mov	r1, r2
 8007132:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007134:	2300      	movs	r3, #0
}
 8007136:	4618      	mov	r0, r3
 8007138:	3710      	adds	r7, #16
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}

0800713e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800713e:	b580      	push	{r7, lr}
 8007140:	b084      	sub	sp, #16
 8007142:	af00      	add	r7, sp, #0
 8007144:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	32b0      	adds	r2, #176	@ 0xb0
 8007150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007154:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d101      	bne.n	8007160 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800715c:	2303      	movs	r3, #3
 800715e:	e024      	b.n	80071aa <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007166:	687a      	ldr	r2, [r7, #4]
 8007168:	33b0      	adds	r3, #176	@ 0xb0
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	4413      	add	r3, r2
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d019      	beq.n	80071a8 <USBD_CDC_EP0_RxReady+0x6a>
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800717a:	2bff      	cmp	r3, #255	@ 0xff
 800717c:	d014      	beq.n	80071a8 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	33b0      	adds	r3, #176	@ 0xb0
 8007188:	009b      	lsls	r3, r3, #2
 800718a:	4413      	add	r3, r2
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	68fa      	ldr	r2, [r7, #12]
 8007192:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8007196:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007198:	68fa      	ldr	r2, [r7, #12]
 800719a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800719e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	22ff      	movs	r2, #255	@ 0xff
 80071a4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80071a8:	2300      	movs	r3, #0
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3710      	adds	r7, #16
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}
	...

080071b4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b086      	sub	sp, #24
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80071bc:	2182      	movs	r1, #130	@ 0x82
 80071be:	4818      	ldr	r0, [pc, #96]	@ (8007220 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80071c0:	f000 fd62 	bl	8007c88 <USBD_GetEpDesc>
 80071c4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80071c6:	2101      	movs	r1, #1
 80071c8:	4815      	ldr	r0, [pc, #84]	@ (8007220 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80071ca:	f000 fd5d 	bl	8007c88 <USBD_GetEpDesc>
 80071ce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80071d0:	2181      	movs	r1, #129	@ 0x81
 80071d2:	4813      	ldr	r0, [pc, #76]	@ (8007220 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80071d4:	f000 fd58 	bl	8007c88 <USBD_GetEpDesc>
 80071d8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d002      	beq.n	80071e6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	2210      	movs	r2, #16
 80071e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d006      	beq.n	80071fa <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	2200      	movs	r2, #0
 80071f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80071f4:	711a      	strb	r2, [r3, #4]
 80071f6:	2200      	movs	r2, #0
 80071f8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d006      	beq.n	800720e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2200      	movs	r2, #0
 8007204:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007208:	711a      	strb	r2, [r3, #4]
 800720a:	2200      	movs	r2, #0
 800720c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2243      	movs	r2, #67	@ 0x43
 8007212:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007214:	4b02      	ldr	r3, [pc, #8]	@ (8007220 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007216:	4618      	mov	r0, r3
 8007218:	3718      	adds	r7, #24
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}
 800721e:	bf00      	nop
 8007220:	20000050 	.word	0x20000050

08007224 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b086      	sub	sp, #24
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800722c:	2182      	movs	r1, #130	@ 0x82
 800722e:	4818      	ldr	r0, [pc, #96]	@ (8007290 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007230:	f000 fd2a 	bl	8007c88 <USBD_GetEpDesc>
 8007234:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007236:	2101      	movs	r1, #1
 8007238:	4815      	ldr	r0, [pc, #84]	@ (8007290 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800723a:	f000 fd25 	bl	8007c88 <USBD_GetEpDesc>
 800723e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007240:	2181      	movs	r1, #129	@ 0x81
 8007242:	4813      	ldr	r0, [pc, #76]	@ (8007290 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007244:	f000 fd20 	bl	8007c88 <USBD_GetEpDesc>
 8007248:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d002      	beq.n	8007256 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	2210      	movs	r2, #16
 8007254:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d006      	beq.n	800726a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	2200      	movs	r2, #0
 8007260:	711a      	strb	r2, [r3, #4]
 8007262:	2200      	movs	r2, #0
 8007264:	f042 0202 	orr.w	r2, r2, #2
 8007268:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d006      	beq.n	800727e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2200      	movs	r2, #0
 8007274:	711a      	strb	r2, [r3, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	f042 0202 	orr.w	r2, r2, #2
 800727c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2243      	movs	r2, #67	@ 0x43
 8007282:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007284:	4b02      	ldr	r3, [pc, #8]	@ (8007290 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007286:	4618      	mov	r0, r3
 8007288:	3718      	adds	r7, #24
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
 800728e:	bf00      	nop
 8007290:	20000050 	.word	0x20000050

08007294 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b086      	sub	sp, #24
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800729c:	2182      	movs	r1, #130	@ 0x82
 800729e:	4818      	ldr	r0, [pc, #96]	@ (8007300 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80072a0:	f000 fcf2 	bl	8007c88 <USBD_GetEpDesc>
 80072a4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80072a6:	2101      	movs	r1, #1
 80072a8:	4815      	ldr	r0, [pc, #84]	@ (8007300 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80072aa:	f000 fced 	bl	8007c88 <USBD_GetEpDesc>
 80072ae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80072b0:	2181      	movs	r1, #129	@ 0x81
 80072b2:	4813      	ldr	r0, [pc, #76]	@ (8007300 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80072b4:	f000 fce8 	bl	8007c88 <USBD_GetEpDesc>
 80072b8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d002      	beq.n	80072c6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	2210      	movs	r2, #16
 80072c4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d006      	beq.n	80072da <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	2200      	movs	r2, #0
 80072d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80072d4:	711a      	strb	r2, [r3, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d006      	beq.n	80072ee <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2200      	movs	r2, #0
 80072e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80072e8:	711a      	strb	r2, [r3, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2243      	movs	r2, #67	@ 0x43
 80072f2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80072f4:	4b02      	ldr	r3, [pc, #8]	@ (8007300 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3718      	adds	r7, #24
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}
 80072fe:	bf00      	nop
 8007300:	20000050 	.word	0x20000050

08007304 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007304:	b480      	push	{r7}
 8007306:	b083      	sub	sp, #12
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	220a      	movs	r2, #10
 8007310:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007312:	4b03      	ldr	r3, [pc, #12]	@ (8007320 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007314:	4618      	mov	r0, r3
 8007316:	370c      	adds	r7, #12
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr
 8007320:	2000000c 	.word	0x2000000c

08007324 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d101      	bne.n	8007338 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007334:	2303      	movs	r3, #3
 8007336:	e009      	b.n	800734c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800733e:	687a      	ldr	r2, [r7, #4]
 8007340:	33b0      	adds	r3, #176	@ 0xb0
 8007342:	009b      	lsls	r3, r3, #2
 8007344:	4413      	add	r3, r2
 8007346:	683a      	ldr	r2, [r7, #0]
 8007348:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800734a:	2300      	movs	r3, #0
}
 800734c:	4618      	mov	r0, r3
 800734e:	370c      	adds	r7, #12
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007358:	b480      	push	{r7}
 800735a:	b087      	sub	sp, #28
 800735c:	af00      	add	r7, sp, #0
 800735e:	60f8      	str	r0, [r7, #12]
 8007360:	60b9      	str	r1, [r7, #8]
 8007362:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	32b0      	adds	r2, #176	@ 0xb0
 800736e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007372:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d101      	bne.n	800737e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800737a:	2303      	movs	r3, #3
 800737c:	e008      	b.n	8007390 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	68ba      	ldr	r2, [r7, #8]
 8007382:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800738e:	2300      	movs	r3, #0
}
 8007390:	4618      	mov	r0, r3
 8007392:	371c      	adds	r7, #28
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr

0800739c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800739c:	b480      	push	{r7}
 800739e:	b085      	sub	sp, #20
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	32b0      	adds	r2, #176	@ 0xb0
 80073b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073b4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d101      	bne.n	80073c0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80073bc:	2303      	movs	r3, #3
 80073be:	e004      	b.n	80073ca <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	683a      	ldr	r2, [r7, #0]
 80073c4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80073c8:	2300      	movs	r3, #0
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3714      	adds	r7, #20
 80073ce:	46bd      	mov	sp, r7
 80073d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d4:	4770      	bx	lr
	...

080073d8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b084      	sub	sp, #16
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	32b0      	adds	r2, #176	@ 0xb0
 80073ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073ee:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80073f0:	2301      	movs	r3, #1
 80073f2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d101      	bne.n	80073fe <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80073fa:	2303      	movs	r3, #3
 80073fc:	e025      	b.n	800744a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007404:	2b00      	cmp	r3, #0
 8007406:	d11f      	bne.n	8007448 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	2201      	movs	r2, #1
 800740c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007410:	4b10      	ldr	r3, [pc, #64]	@ (8007454 <USBD_CDC_TransmitPacket+0x7c>)
 8007412:	781b      	ldrb	r3, [r3, #0]
 8007414:	f003 020f 	and.w	r2, r3, #15
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	4613      	mov	r3, r2
 8007422:	009b      	lsls	r3, r3, #2
 8007424:	4413      	add	r3, r2
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	4403      	add	r3, r0
 800742a:	3314      	adds	r3, #20
 800742c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800742e:	4b09      	ldr	r3, [pc, #36]	@ (8007454 <USBD_CDC_TransmitPacket+0x7c>)
 8007430:	7819      	ldrb	r1, [r3, #0]
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f005 f8c7 	bl	800c5d2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007444:	2300      	movs	r3, #0
 8007446:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007448:	7bfb      	ldrb	r3, [r7, #15]
}
 800744a:	4618      	mov	r0, r3
 800744c:	3710      	adds	r7, #16
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}
 8007452:	bf00      	nop
 8007454:	20000093 	.word	0x20000093

08007458 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b084      	sub	sp, #16
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	32b0      	adds	r2, #176	@ 0xb0
 800746a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800746e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	32b0      	adds	r2, #176	@ 0xb0
 800747a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d101      	bne.n	8007486 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007482:	2303      	movs	r3, #3
 8007484:	e018      	b.n	80074b8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	7c1b      	ldrb	r3, [r3, #16]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d10a      	bne.n	80074a4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800748e:	4b0c      	ldr	r3, [pc, #48]	@ (80074c0 <USBD_CDC_ReceivePacket+0x68>)
 8007490:	7819      	ldrb	r1, [r3, #0]
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007498:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f005 f8b9 	bl	800c614 <USBD_LL_PrepareReceive>
 80074a2:	e008      	b.n	80074b6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80074a4:	4b06      	ldr	r3, [pc, #24]	@ (80074c0 <USBD_CDC_ReceivePacket+0x68>)
 80074a6:	7819      	ldrb	r1, [r3, #0]
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80074ae:	2340      	movs	r3, #64	@ 0x40
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f005 f8af 	bl	800c614 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80074b6:	2300      	movs	r3, #0
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3710      	adds	r7, #16
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}
 80074c0:	20000094 	.word	0x20000094

080074c4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b086      	sub	sp, #24
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	60f8      	str	r0, [r7, #12]
 80074cc:	60b9      	str	r1, [r7, #8]
 80074ce:	4613      	mov	r3, r2
 80074d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d101      	bne.n	80074dc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80074d8:	2303      	movs	r3, #3
 80074da:	e01f      	b.n	800751c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2200      	movs	r2, #0
 80074e0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2200      	movs	r2, #0
 80074e8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2200      	movs	r2, #0
 80074f0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d003      	beq.n	8007502 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	68ba      	ldr	r2, [r7, #8]
 80074fe:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2201      	movs	r2, #1
 8007506:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	79fa      	ldrb	r2, [r7, #7]
 800750e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007510:	68f8      	ldr	r0, [r7, #12]
 8007512:	f004 ff29 	bl	800c368 <USBD_LL_Init>
 8007516:	4603      	mov	r3, r0
 8007518:	75fb      	strb	r3, [r7, #23]

  return ret;
 800751a:	7dfb      	ldrb	r3, [r7, #23]
}
 800751c:	4618      	mov	r0, r3
 800751e:	3718      	adds	r7, #24
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}

08007524 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b084      	sub	sp, #16
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800752e:	2300      	movs	r3, #0
 8007530:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d101      	bne.n	800753c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007538:	2303      	movs	r3, #3
 800753a:	e025      	b.n	8007588 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	683a      	ldr	r2, [r7, #0]
 8007540:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	32ae      	adds	r2, #174	@ 0xae
 800754e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007554:	2b00      	cmp	r3, #0
 8007556:	d00f      	beq.n	8007578 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	32ae      	adds	r2, #174	@ 0xae
 8007562:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007568:	f107 020e 	add.w	r2, r7, #14
 800756c:	4610      	mov	r0, r2
 800756e:	4798      	blx	r3
 8007570:	4602      	mov	r2, r0
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800757e:	1c5a      	adds	r2, r3, #1
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8007586:	2300      	movs	r3, #0
}
 8007588:	4618      	mov	r0, r3
 800758a:	3710      	adds	r7, #16
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}

08007590 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b082      	sub	sp, #8
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f004 ff31 	bl	800c400 <USBD_LL_Start>
 800759e:	4603      	mov	r3, r0
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3708      	adds	r7, #8
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}

080075a8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b083      	sub	sp, #12
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80075b0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	370c      	adds	r7, #12
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr

080075be <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80075be:	b580      	push	{r7, lr}
 80075c0:	b084      	sub	sp, #16
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	6078      	str	r0, [r7, #4]
 80075c6:	460b      	mov	r3, r1
 80075c8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80075ca:	2300      	movs	r3, #0
 80075cc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d009      	beq.n	80075ec <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	78fa      	ldrb	r2, [r7, #3]
 80075e2:	4611      	mov	r1, r2
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	4798      	blx	r3
 80075e8:	4603      	mov	r3, r0
 80075ea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80075ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3710      	adds	r7, #16
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}

080075f6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80075f6:	b580      	push	{r7, lr}
 80075f8:	b084      	sub	sp, #16
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
 80075fe:	460b      	mov	r3, r1
 8007600:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007602:	2300      	movs	r3, #0
 8007604:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	78fa      	ldrb	r2, [r7, #3]
 8007610:	4611      	mov	r1, r2
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	4798      	blx	r3
 8007616:	4603      	mov	r3, r0
 8007618:	2b00      	cmp	r3, #0
 800761a:	d001      	beq.n	8007620 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800761c:	2303      	movs	r3, #3
 800761e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007620:	7bfb      	ldrb	r3, [r7, #15]
}
 8007622:	4618      	mov	r0, r3
 8007624:	3710      	adds	r7, #16
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}

0800762a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800762a:	b580      	push	{r7, lr}
 800762c:	b084      	sub	sp, #16
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
 8007632:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800763a:	6839      	ldr	r1, [r7, #0]
 800763c:	4618      	mov	r0, r3
 800763e:	f001 f920 	bl	8008882 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2201      	movs	r2, #1
 8007646:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007650:	461a      	mov	r2, r3
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800765e:	f003 031f 	and.w	r3, r3, #31
 8007662:	2b02      	cmp	r3, #2
 8007664:	d01a      	beq.n	800769c <USBD_LL_SetupStage+0x72>
 8007666:	2b02      	cmp	r3, #2
 8007668:	d822      	bhi.n	80076b0 <USBD_LL_SetupStage+0x86>
 800766a:	2b00      	cmp	r3, #0
 800766c:	d002      	beq.n	8007674 <USBD_LL_SetupStage+0x4a>
 800766e:	2b01      	cmp	r3, #1
 8007670:	d00a      	beq.n	8007688 <USBD_LL_SetupStage+0x5e>
 8007672:	e01d      	b.n	80076b0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800767a:	4619      	mov	r1, r3
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f000 fb75 	bl	8007d6c <USBD_StdDevReq>
 8007682:	4603      	mov	r3, r0
 8007684:	73fb      	strb	r3, [r7, #15]
      break;
 8007686:	e020      	b.n	80076ca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800768e:	4619      	mov	r1, r3
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f000 fbdd 	bl	8007e50 <USBD_StdItfReq>
 8007696:	4603      	mov	r3, r0
 8007698:	73fb      	strb	r3, [r7, #15]
      break;
 800769a:	e016      	b.n	80076ca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80076a2:	4619      	mov	r1, r3
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f000 fc3f 	bl	8007f28 <USBD_StdEPReq>
 80076aa:	4603      	mov	r3, r0
 80076ac:	73fb      	strb	r3, [r7, #15]
      break;
 80076ae:	e00c      	b.n	80076ca <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80076b6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	4619      	mov	r1, r3
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f004 fefe 	bl	800c4c0 <USBD_LL_StallEP>
 80076c4:	4603      	mov	r3, r0
 80076c6:	73fb      	strb	r3, [r7, #15]
      break;
 80076c8:	bf00      	nop
  }

  return ret;
 80076ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3710      	adds	r7, #16
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b086      	sub	sp, #24
 80076d8:	af00      	add	r7, sp, #0
 80076da:	60f8      	str	r0, [r7, #12]
 80076dc:	460b      	mov	r3, r1
 80076de:	607a      	str	r2, [r7, #4]
 80076e0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80076e2:	2300      	movs	r3, #0
 80076e4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 80076e6:	7afb      	ldrb	r3, [r7, #11]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d177      	bne.n	80077dc <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80076f2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80076fa:	2b03      	cmp	r3, #3
 80076fc:	f040 80a1 	bne.w	8007842 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	693a      	ldr	r2, [r7, #16]
 8007706:	8992      	ldrh	r2, [r2, #12]
 8007708:	4293      	cmp	r3, r2
 800770a:	d91c      	bls.n	8007746 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	693a      	ldr	r2, [r7, #16]
 8007712:	8992      	ldrh	r2, [r2, #12]
 8007714:	1a9a      	subs	r2, r3, r2
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	691b      	ldr	r3, [r3, #16]
 800771e:	693a      	ldr	r2, [r7, #16]
 8007720:	8992      	ldrh	r2, [r2, #12]
 8007722:	441a      	add	r2, r3
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	6919      	ldr	r1, [r3, #16]
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	899b      	ldrh	r3, [r3, #12]
 8007730:	461a      	mov	r2, r3
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	4293      	cmp	r3, r2
 8007738:	bf38      	it	cc
 800773a:	4613      	movcc	r3, r2
 800773c:	461a      	mov	r2, r3
 800773e:	68f8      	ldr	r0, [r7, #12]
 8007740:	f001 f9a6 	bl	8008a90 <USBD_CtlContinueRx>
 8007744:	e07d      	b.n	8007842 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800774c:	f003 031f 	and.w	r3, r3, #31
 8007750:	2b02      	cmp	r3, #2
 8007752:	d014      	beq.n	800777e <USBD_LL_DataOutStage+0xaa>
 8007754:	2b02      	cmp	r3, #2
 8007756:	d81d      	bhi.n	8007794 <USBD_LL_DataOutStage+0xc0>
 8007758:	2b00      	cmp	r3, #0
 800775a:	d002      	beq.n	8007762 <USBD_LL_DataOutStage+0x8e>
 800775c:	2b01      	cmp	r3, #1
 800775e:	d003      	beq.n	8007768 <USBD_LL_DataOutStage+0x94>
 8007760:	e018      	b.n	8007794 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007762:	2300      	movs	r3, #0
 8007764:	75bb      	strb	r3, [r7, #22]
            break;
 8007766:	e018      	b.n	800779a <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800776e:	b2db      	uxtb	r3, r3
 8007770:	4619      	mov	r1, r3
 8007772:	68f8      	ldr	r0, [r7, #12]
 8007774:	f000 fa6e 	bl	8007c54 <USBD_CoreFindIF>
 8007778:	4603      	mov	r3, r0
 800777a:	75bb      	strb	r3, [r7, #22]
            break;
 800777c:	e00d      	b.n	800779a <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007784:	b2db      	uxtb	r3, r3
 8007786:	4619      	mov	r1, r3
 8007788:	68f8      	ldr	r0, [r7, #12]
 800778a:	f000 fa70 	bl	8007c6e <USBD_CoreFindEP>
 800778e:	4603      	mov	r3, r0
 8007790:	75bb      	strb	r3, [r7, #22]
            break;
 8007792:	e002      	b.n	800779a <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007794:	2300      	movs	r3, #0
 8007796:	75bb      	strb	r3, [r7, #22]
            break;
 8007798:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800779a:	7dbb      	ldrb	r3, [r7, #22]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d119      	bne.n	80077d4 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077a6:	b2db      	uxtb	r3, r3
 80077a8:	2b03      	cmp	r3, #3
 80077aa:	d113      	bne.n	80077d4 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80077ac:	7dba      	ldrb	r2, [r7, #22]
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	32ae      	adds	r2, #174	@ 0xae
 80077b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077b6:	691b      	ldr	r3, [r3, #16]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d00b      	beq.n	80077d4 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 80077bc:	7dba      	ldrb	r2, [r7, #22]
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80077c4:	7dba      	ldrb	r2, [r7, #22]
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	32ae      	adds	r2, #174	@ 0xae
 80077ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077ce:	691b      	ldr	r3, [r3, #16]
 80077d0:	68f8      	ldr	r0, [r7, #12]
 80077d2:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80077d4:	68f8      	ldr	r0, [r7, #12]
 80077d6:	f001 f96c 	bl	8008ab2 <USBD_CtlSendStatus>
 80077da:	e032      	b.n	8007842 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80077dc:	7afb      	ldrb	r3, [r7, #11]
 80077de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80077e2:	b2db      	uxtb	r3, r3
 80077e4:	4619      	mov	r1, r3
 80077e6:	68f8      	ldr	r0, [r7, #12]
 80077e8:	f000 fa41 	bl	8007c6e <USBD_CoreFindEP>
 80077ec:	4603      	mov	r3, r0
 80077ee:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80077f0:	7dbb      	ldrb	r3, [r7, #22]
 80077f2:	2bff      	cmp	r3, #255	@ 0xff
 80077f4:	d025      	beq.n	8007842 <USBD_LL_DataOutStage+0x16e>
 80077f6:	7dbb      	ldrb	r3, [r7, #22]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d122      	bne.n	8007842 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007802:	b2db      	uxtb	r3, r3
 8007804:	2b03      	cmp	r3, #3
 8007806:	d117      	bne.n	8007838 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007808:	7dba      	ldrb	r2, [r7, #22]
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	32ae      	adds	r2, #174	@ 0xae
 800780e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007812:	699b      	ldr	r3, [r3, #24]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d00f      	beq.n	8007838 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8007818:	7dba      	ldrb	r2, [r7, #22]
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007820:	7dba      	ldrb	r2, [r7, #22]
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	32ae      	adds	r2, #174	@ 0xae
 8007826:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800782a:	699b      	ldr	r3, [r3, #24]
 800782c:	7afa      	ldrb	r2, [r7, #11]
 800782e:	4611      	mov	r1, r2
 8007830:	68f8      	ldr	r0, [r7, #12]
 8007832:	4798      	blx	r3
 8007834:	4603      	mov	r3, r0
 8007836:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007838:	7dfb      	ldrb	r3, [r7, #23]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d001      	beq.n	8007842 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800783e:	7dfb      	ldrb	r3, [r7, #23]
 8007840:	e000      	b.n	8007844 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 8007842:	2300      	movs	r3, #0
}
 8007844:	4618      	mov	r0, r3
 8007846:	3718      	adds	r7, #24
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}

0800784c <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b086      	sub	sp, #24
 8007850:	af00      	add	r7, sp, #0
 8007852:	60f8      	str	r0, [r7, #12]
 8007854:	460b      	mov	r3, r1
 8007856:	607a      	str	r2, [r7, #4]
 8007858:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800785a:	7afb      	ldrb	r3, [r7, #11]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d178      	bne.n	8007952 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	3314      	adds	r3, #20
 8007864:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800786c:	2b02      	cmp	r3, #2
 800786e:	d163      	bne.n	8007938 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	693a      	ldr	r2, [r7, #16]
 8007876:	8992      	ldrh	r2, [r2, #12]
 8007878:	4293      	cmp	r3, r2
 800787a:	d91c      	bls.n	80078b6 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	693a      	ldr	r2, [r7, #16]
 8007882:	8992      	ldrh	r2, [r2, #12]
 8007884:	1a9a      	subs	r2, r3, r2
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	691b      	ldr	r3, [r3, #16]
 800788e:	693a      	ldr	r2, [r7, #16]
 8007890:	8992      	ldrh	r2, [r2, #12]
 8007892:	441a      	add	r2, r3
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	6919      	ldr	r1, [r3, #16]
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	461a      	mov	r2, r3
 80078a2:	68f8      	ldr	r0, [r7, #12]
 80078a4:	f001 f8c2 	bl	8008a2c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80078a8:	2300      	movs	r3, #0
 80078aa:	2200      	movs	r2, #0
 80078ac:	2100      	movs	r1, #0
 80078ae:	68f8      	ldr	r0, [r7, #12]
 80078b0:	f004 feb0 	bl	800c614 <USBD_LL_PrepareReceive>
 80078b4:	e040      	b.n	8007938 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	899b      	ldrh	r3, [r3, #12]
 80078ba:	461a      	mov	r2, r3
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d11c      	bne.n	80078fe <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	693a      	ldr	r2, [r7, #16]
 80078ca:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d316      	bcc.n	80078fe <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80078da:	429a      	cmp	r2, r3
 80078dc:	d20f      	bcs.n	80078fe <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80078de:	2200      	movs	r2, #0
 80078e0:	2100      	movs	r1, #0
 80078e2:	68f8      	ldr	r0, [r7, #12]
 80078e4:	f001 f8a2 	bl	8008a2c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2200      	movs	r2, #0
 80078ec:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80078f0:	2300      	movs	r3, #0
 80078f2:	2200      	movs	r2, #0
 80078f4:	2100      	movs	r1, #0
 80078f6:	68f8      	ldr	r0, [r7, #12]
 80078f8:	f004 fe8c 	bl	800c614 <USBD_LL_PrepareReceive>
 80078fc:	e01c      	b.n	8007938 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007904:	b2db      	uxtb	r3, r3
 8007906:	2b03      	cmp	r3, #3
 8007908:	d10f      	bne.n	800792a <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007910:	68db      	ldr	r3, [r3, #12]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d009      	beq.n	800792a <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2200      	movs	r2, #0
 800791a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007924:	68db      	ldr	r3, [r3, #12]
 8007926:	68f8      	ldr	r0, [r7, #12]
 8007928:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800792a:	2180      	movs	r1, #128	@ 0x80
 800792c:	68f8      	ldr	r0, [r7, #12]
 800792e:	f004 fdc7 	bl	800c4c0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007932:	68f8      	ldr	r0, [r7, #12]
 8007934:	f001 f8d0 	bl	8008ad8 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800793e:	2b00      	cmp	r3, #0
 8007940:	d03a      	beq.n	80079b8 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 8007942:	68f8      	ldr	r0, [r7, #12]
 8007944:	f7ff fe30 	bl	80075a8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2200      	movs	r2, #0
 800794c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007950:	e032      	b.n	80079b8 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007952:	7afb      	ldrb	r3, [r7, #11]
 8007954:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007958:	b2db      	uxtb	r3, r3
 800795a:	4619      	mov	r1, r3
 800795c:	68f8      	ldr	r0, [r7, #12]
 800795e:	f000 f986 	bl	8007c6e <USBD_CoreFindEP>
 8007962:	4603      	mov	r3, r0
 8007964:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007966:	7dfb      	ldrb	r3, [r7, #23]
 8007968:	2bff      	cmp	r3, #255	@ 0xff
 800796a:	d025      	beq.n	80079b8 <USBD_LL_DataInStage+0x16c>
 800796c:	7dfb      	ldrb	r3, [r7, #23]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d122      	bne.n	80079b8 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007978:	b2db      	uxtb	r3, r3
 800797a:	2b03      	cmp	r3, #3
 800797c:	d11c      	bne.n	80079b8 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800797e:	7dfa      	ldrb	r2, [r7, #23]
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	32ae      	adds	r2, #174	@ 0xae
 8007984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007988:	695b      	ldr	r3, [r3, #20]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d014      	beq.n	80079b8 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800798e:	7dfa      	ldrb	r2, [r7, #23]
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007996:	7dfa      	ldrb	r2, [r7, #23]
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	32ae      	adds	r2, #174	@ 0xae
 800799c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079a0:	695b      	ldr	r3, [r3, #20]
 80079a2:	7afa      	ldrb	r2, [r7, #11]
 80079a4:	4611      	mov	r1, r2
 80079a6:	68f8      	ldr	r0, [r7, #12]
 80079a8:	4798      	blx	r3
 80079aa:	4603      	mov	r3, r0
 80079ac:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80079ae:	7dbb      	ldrb	r3, [r7, #22]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d001      	beq.n	80079b8 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 80079b4:	7dbb      	ldrb	r3, [r7, #22]
 80079b6:	e000      	b.n	80079ba <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 80079b8:	2300      	movs	r3, #0
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3718      	adds	r7, #24
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}

080079c2 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80079c2:	b580      	push	{r7, lr}
 80079c4:	b084      	sub	sp, #16
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80079ca:	2300      	movs	r3, #0
 80079cc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2201      	movs	r2, #1
 80079d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2200      	movs	r2, #0
 80079da:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2200      	movs	r2, #0
 80079e2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2200      	movs	r2, #0
 80079e8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2200      	movs	r2, #0
 80079f0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d014      	beq.n	8007a28 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d00e      	beq.n	8007a28 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	6852      	ldr	r2, [r2, #4]
 8007a16:	b2d2      	uxtb	r2, r2
 8007a18:	4611      	mov	r1, r2
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	4798      	blx	r3
 8007a1e:	4603      	mov	r3, r0
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d001      	beq.n	8007a28 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007a24:	2303      	movs	r3, #3
 8007a26:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007a28:	2340      	movs	r3, #64	@ 0x40
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	2100      	movs	r1, #0
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f004 fd01 	bl	800c436 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2201      	movs	r2, #1
 8007a38:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2240      	movs	r2, #64	@ 0x40
 8007a40:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007a44:	2340      	movs	r3, #64	@ 0x40
 8007a46:	2200      	movs	r2, #0
 8007a48:	2180      	movs	r1, #128	@ 0x80
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f004 fcf3 	bl	800c436 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2201      	movs	r2, #1
 8007a54:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2240      	movs	r2, #64	@ 0x40
 8007a5c:	841a      	strh	r2, [r3, #32]

  return ret;
 8007a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3710      	adds	r7, #16
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}

08007a68 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b083      	sub	sp, #12
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	460b      	mov	r3, r1
 8007a72:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	78fa      	ldrb	r2, [r7, #3]
 8007a78:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007a7a:	2300      	movs	r3, #0
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	370c      	adds	r7, #12
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr

08007a88 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b083      	sub	sp, #12
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a96:	b2db      	uxtb	r3, r3
 8007a98:	2b04      	cmp	r3, #4
 8007a9a:	d006      	beq.n	8007aaa <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007aa2:	b2da      	uxtb	r2, r3
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2204      	movs	r2, #4
 8007aae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007ab2:	2300      	movs	r3, #0
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	370c      	adds	r7, #12
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr

08007ac0 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b083      	sub	sp, #12
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	2b04      	cmp	r3, #4
 8007ad2:	d106      	bne.n	8007ae2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007ada:	b2da      	uxtb	r2, r3
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007ae2:	2300      	movs	r3, #0
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	370c      	adds	r7, #12
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr

08007af0 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b082      	sub	sp, #8
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	2b03      	cmp	r3, #3
 8007b02:	d110      	bne.n	8007b26 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d00b      	beq.n	8007b26 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b14:	69db      	ldr	r3, [r3, #28]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d005      	beq.n	8007b26 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b20:	69db      	ldr	r3, [r3, #28]
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007b26:	2300      	movs	r3, #0
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3708      	adds	r7, #8
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}

08007b30 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b082      	sub	sp, #8
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	460b      	mov	r3, r1
 8007b3a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	32ae      	adds	r2, #174	@ 0xae
 8007b46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d101      	bne.n	8007b52 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007b4e:	2303      	movs	r3, #3
 8007b50:	e01c      	b.n	8007b8c <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	2b03      	cmp	r3, #3
 8007b5c:	d115      	bne.n	8007b8a <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	32ae      	adds	r2, #174	@ 0xae
 8007b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b6c:	6a1b      	ldr	r3, [r3, #32]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d00b      	beq.n	8007b8a <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	32ae      	adds	r2, #174	@ 0xae
 8007b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b80:	6a1b      	ldr	r3, [r3, #32]
 8007b82:	78fa      	ldrb	r2, [r7, #3]
 8007b84:	4611      	mov	r1, r2
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007b8a:	2300      	movs	r3, #0
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3708      	adds	r7, #8
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}

08007b94 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b082      	sub	sp, #8
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	460b      	mov	r3, r1
 8007b9e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	32ae      	adds	r2, #174	@ 0xae
 8007baa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d101      	bne.n	8007bb6 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007bb2:	2303      	movs	r3, #3
 8007bb4:	e01c      	b.n	8007bf0 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bbc:	b2db      	uxtb	r3, r3
 8007bbe:	2b03      	cmp	r3, #3
 8007bc0:	d115      	bne.n	8007bee <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	32ae      	adds	r2, #174	@ 0xae
 8007bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d00b      	beq.n	8007bee <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	32ae      	adds	r2, #174	@ 0xae
 8007be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007be6:	78fa      	ldrb	r2, [r7, #3]
 8007be8:	4611      	mov	r1, r2
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007bee:	2300      	movs	r3, #0
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3708      	adds	r7, #8
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b083      	sub	sp, #12
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007c00:	2300      	movs	r3, #0
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	370c      	adds	r7, #12
 8007c06:	46bd      	mov	sp, r7
 8007c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0c:	4770      	bx	lr

08007c0e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007c0e:	b580      	push	{r7, lr}
 8007c10:	b084      	sub	sp, #16
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007c16:	2300      	movs	r3, #0
 8007c18:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d00e      	beq.n	8007c4a <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	6852      	ldr	r2, [r2, #4]
 8007c38:	b2d2      	uxtb	r2, r2
 8007c3a:	4611      	mov	r1, r2
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	4798      	blx	r3
 8007c40:	4603      	mov	r3, r0
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d001      	beq.n	8007c4a <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007c46:	2303      	movs	r3, #3
 8007c48:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3710      	adds	r7, #16
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}

08007c54 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b083      	sub	sp, #12
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	460b      	mov	r3, r1
 8007c5e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007c60:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	370c      	adds	r7, #12
 8007c66:	46bd      	mov	sp, r7
 8007c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6c:	4770      	bx	lr

08007c6e <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007c6e:	b480      	push	{r7}
 8007c70:	b083      	sub	sp, #12
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	6078      	str	r0, [r7, #4]
 8007c76:	460b      	mov	r3, r1
 8007c78:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007c7a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	370c      	adds	r7, #12
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr

08007c88 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b086      	sub	sp, #24
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	460b      	mov	r3, r1
 8007c92:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	885b      	ldrh	r3, [r3, #2]
 8007ca4:	b29b      	uxth	r3, r3
 8007ca6:	68fa      	ldr	r2, [r7, #12]
 8007ca8:	7812      	ldrb	r2, [r2, #0]
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d91f      	bls.n	8007cee <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007cb4:	e013      	b.n	8007cde <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007cb6:	f107 030a 	add.w	r3, r7, #10
 8007cba:	4619      	mov	r1, r3
 8007cbc:	6978      	ldr	r0, [r7, #20]
 8007cbe:	f000 f81b 	bl	8007cf8 <USBD_GetNextDesc>
 8007cc2:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	785b      	ldrb	r3, [r3, #1]
 8007cc8:	2b05      	cmp	r3, #5
 8007cca:	d108      	bne.n	8007cde <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	789b      	ldrb	r3, [r3, #2]
 8007cd4:	78fa      	ldrb	r2, [r7, #3]
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	d008      	beq.n	8007cec <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	885b      	ldrh	r3, [r3, #2]
 8007ce2:	b29a      	uxth	r2, r3
 8007ce4:	897b      	ldrh	r3, [r7, #10]
 8007ce6:	429a      	cmp	r2, r3
 8007ce8:	d8e5      	bhi.n	8007cb6 <USBD_GetEpDesc+0x2e>
 8007cea:	e000      	b.n	8007cee <USBD_GetEpDesc+0x66>
          break;
 8007cec:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007cee:	693b      	ldr	r3, [r7, #16]
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3718      	adds	r7, #24
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}

08007cf8 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b085      	sub	sp, #20
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	881b      	ldrh	r3, [r3, #0]
 8007d0a:	68fa      	ldr	r2, [r7, #12]
 8007d0c:	7812      	ldrb	r2, [r2, #0]
 8007d0e:	4413      	add	r3, r2
 8007d10:	b29a      	uxth	r2, r3
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	781b      	ldrb	r3, [r3, #0]
 8007d1a:	461a      	mov	r2, r3
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	4413      	add	r3, r2
 8007d20:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007d22:	68fb      	ldr	r3, [r7, #12]
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3714      	adds	r7, #20
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr

08007d30 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b087      	sub	sp, #28
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	781b      	ldrb	r3, [r3, #0]
 8007d40:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	3301      	adds	r3, #1
 8007d46:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007d4e:	8a3b      	ldrh	r3, [r7, #16]
 8007d50:	021b      	lsls	r3, r3, #8
 8007d52:	b21a      	sxth	r2, r3
 8007d54:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	b21b      	sxth	r3, r3
 8007d5c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007d5e:	89fb      	ldrh	r3, [r7, #14]
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	371c      	adds	r7, #28
 8007d64:	46bd      	mov	sp, r7
 8007d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6a:	4770      	bx	lr

08007d6c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d76:	2300      	movs	r3, #0
 8007d78:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007d82:	2b40      	cmp	r3, #64	@ 0x40
 8007d84:	d005      	beq.n	8007d92 <USBD_StdDevReq+0x26>
 8007d86:	2b40      	cmp	r3, #64	@ 0x40
 8007d88:	d857      	bhi.n	8007e3a <USBD_StdDevReq+0xce>
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d00f      	beq.n	8007dae <USBD_StdDevReq+0x42>
 8007d8e:	2b20      	cmp	r3, #32
 8007d90:	d153      	bne.n	8007e3a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	32ae      	adds	r2, #174	@ 0xae
 8007d9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007da0:	689b      	ldr	r3, [r3, #8]
 8007da2:	6839      	ldr	r1, [r7, #0]
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	4798      	blx	r3
 8007da8:	4603      	mov	r3, r0
 8007daa:	73fb      	strb	r3, [r7, #15]
      break;
 8007dac:	e04a      	b.n	8007e44 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	785b      	ldrb	r3, [r3, #1]
 8007db2:	2b09      	cmp	r3, #9
 8007db4:	d83b      	bhi.n	8007e2e <USBD_StdDevReq+0xc2>
 8007db6:	a201      	add	r2, pc, #4	@ (adr r2, 8007dbc <USBD_StdDevReq+0x50>)
 8007db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dbc:	08007e11 	.word	0x08007e11
 8007dc0:	08007e25 	.word	0x08007e25
 8007dc4:	08007e2f 	.word	0x08007e2f
 8007dc8:	08007e1b 	.word	0x08007e1b
 8007dcc:	08007e2f 	.word	0x08007e2f
 8007dd0:	08007def 	.word	0x08007def
 8007dd4:	08007de5 	.word	0x08007de5
 8007dd8:	08007e2f 	.word	0x08007e2f
 8007ddc:	08007e07 	.word	0x08007e07
 8007de0:	08007df9 	.word	0x08007df9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007de4:	6839      	ldr	r1, [r7, #0]
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f000 fa3e 	bl	8008268 <USBD_GetDescriptor>
          break;
 8007dec:	e024      	b.n	8007e38 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007dee:	6839      	ldr	r1, [r7, #0]
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f000 fba3 	bl	800853c <USBD_SetAddress>
          break;
 8007df6:	e01f      	b.n	8007e38 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007df8:	6839      	ldr	r1, [r7, #0]
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f000 fbe2 	bl	80085c4 <USBD_SetConfig>
 8007e00:	4603      	mov	r3, r0
 8007e02:	73fb      	strb	r3, [r7, #15]
          break;
 8007e04:	e018      	b.n	8007e38 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007e06:	6839      	ldr	r1, [r7, #0]
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f000 fc85 	bl	8008718 <USBD_GetConfig>
          break;
 8007e0e:	e013      	b.n	8007e38 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007e10:	6839      	ldr	r1, [r7, #0]
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 fcb6 	bl	8008784 <USBD_GetStatus>
          break;
 8007e18:	e00e      	b.n	8007e38 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007e1a:	6839      	ldr	r1, [r7, #0]
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 fce5 	bl	80087ec <USBD_SetFeature>
          break;
 8007e22:	e009      	b.n	8007e38 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007e24:	6839      	ldr	r1, [r7, #0]
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 fd09 	bl	800883e <USBD_ClrFeature>
          break;
 8007e2c:	e004      	b.n	8007e38 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007e2e:	6839      	ldr	r1, [r7, #0]
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f000 fd60 	bl	80088f6 <USBD_CtlError>
          break;
 8007e36:	bf00      	nop
      }
      break;
 8007e38:	e004      	b.n	8007e44 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007e3a:	6839      	ldr	r1, [r7, #0]
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f000 fd5a 	bl	80088f6 <USBD_CtlError>
      break;
 8007e42:	bf00      	nop
  }

  return ret;
 8007e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3710      	adds	r7, #16
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
 8007e4e:	bf00      	nop

08007e50 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007e66:	2b40      	cmp	r3, #64	@ 0x40
 8007e68:	d005      	beq.n	8007e76 <USBD_StdItfReq+0x26>
 8007e6a:	2b40      	cmp	r3, #64	@ 0x40
 8007e6c:	d852      	bhi.n	8007f14 <USBD_StdItfReq+0xc4>
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d001      	beq.n	8007e76 <USBD_StdItfReq+0x26>
 8007e72:	2b20      	cmp	r3, #32
 8007e74:	d14e      	bne.n	8007f14 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e7c:	b2db      	uxtb	r3, r3
 8007e7e:	3b01      	subs	r3, #1
 8007e80:	2b02      	cmp	r3, #2
 8007e82:	d840      	bhi.n	8007f06 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	889b      	ldrh	r3, [r3, #4]
 8007e88:	b2db      	uxtb	r3, r3
 8007e8a:	2b01      	cmp	r3, #1
 8007e8c:	d836      	bhi.n	8007efc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	889b      	ldrh	r3, [r3, #4]
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	4619      	mov	r1, r3
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f7ff fedc 	bl	8007c54 <USBD_CoreFindIF>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ea0:	7bbb      	ldrb	r3, [r7, #14]
 8007ea2:	2bff      	cmp	r3, #255	@ 0xff
 8007ea4:	d01d      	beq.n	8007ee2 <USBD_StdItfReq+0x92>
 8007ea6:	7bbb      	ldrb	r3, [r7, #14]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d11a      	bne.n	8007ee2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007eac:	7bba      	ldrb	r2, [r7, #14]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	32ae      	adds	r2, #174	@ 0xae
 8007eb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eb6:	689b      	ldr	r3, [r3, #8]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d00f      	beq.n	8007edc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007ebc:	7bba      	ldrb	r2, [r7, #14]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007ec4:	7bba      	ldrb	r2, [r7, #14]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	32ae      	adds	r2, #174	@ 0xae
 8007eca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ece:	689b      	ldr	r3, [r3, #8]
 8007ed0:	6839      	ldr	r1, [r7, #0]
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	4798      	blx	r3
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007eda:	e004      	b.n	8007ee6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007edc:	2303      	movs	r3, #3
 8007ede:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007ee0:	e001      	b.n	8007ee6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007ee2:	2303      	movs	r3, #3
 8007ee4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	88db      	ldrh	r3, [r3, #6]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d110      	bne.n	8007f10 <USBD_StdItfReq+0xc0>
 8007eee:	7bfb      	ldrb	r3, [r7, #15]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d10d      	bne.n	8007f10 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f000 fddc 	bl	8008ab2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007efa:	e009      	b.n	8007f10 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007efc:	6839      	ldr	r1, [r7, #0]
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f000 fcf9 	bl	80088f6 <USBD_CtlError>
          break;
 8007f04:	e004      	b.n	8007f10 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007f06:	6839      	ldr	r1, [r7, #0]
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f000 fcf4 	bl	80088f6 <USBD_CtlError>
          break;
 8007f0e:	e000      	b.n	8007f12 <USBD_StdItfReq+0xc2>
          break;
 8007f10:	bf00      	nop
      }
      break;
 8007f12:	e004      	b.n	8007f1e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007f14:	6839      	ldr	r1, [r7, #0]
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f000 fced 	bl	80088f6 <USBD_CtlError>
      break;
 8007f1c:	bf00      	nop
  }

  return ret;
 8007f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3710      	adds	r7, #16
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b084      	sub	sp, #16
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007f32:	2300      	movs	r3, #0
 8007f34:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	889b      	ldrh	r3, [r3, #4]
 8007f3a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	781b      	ldrb	r3, [r3, #0]
 8007f40:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007f44:	2b40      	cmp	r3, #64	@ 0x40
 8007f46:	d007      	beq.n	8007f58 <USBD_StdEPReq+0x30>
 8007f48:	2b40      	cmp	r3, #64	@ 0x40
 8007f4a:	f200 8181 	bhi.w	8008250 <USBD_StdEPReq+0x328>
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d02a      	beq.n	8007fa8 <USBD_StdEPReq+0x80>
 8007f52:	2b20      	cmp	r3, #32
 8007f54:	f040 817c 	bne.w	8008250 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007f58:	7bbb      	ldrb	r3, [r7, #14]
 8007f5a:	4619      	mov	r1, r3
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f7ff fe86 	bl	8007c6e <USBD_CoreFindEP>
 8007f62:	4603      	mov	r3, r0
 8007f64:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007f66:	7b7b      	ldrb	r3, [r7, #13]
 8007f68:	2bff      	cmp	r3, #255	@ 0xff
 8007f6a:	f000 8176 	beq.w	800825a <USBD_StdEPReq+0x332>
 8007f6e:	7b7b      	ldrb	r3, [r7, #13]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	f040 8172 	bne.w	800825a <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8007f76:	7b7a      	ldrb	r2, [r7, #13]
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007f7e:	7b7a      	ldrb	r2, [r7, #13]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	32ae      	adds	r2, #174	@ 0xae
 8007f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	f000 8165 	beq.w	800825a <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007f90:	7b7a      	ldrb	r2, [r7, #13]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	32ae      	adds	r2, #174	@ 0xae
 8007f96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f9a:	689b      	ldr	r3, [r3, #8]
 8007f9c:	6839      	ldr	r1, [r7, #0]
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	4798      	blx	r3
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007fa6:	e158      	b.n	800825a <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	785b      	ldrb	r3, [r3, #1]
 8007fac:	2b03      	cmp	r3, #3
 8007fae:	d008      	beq.n	8007fc2 <USBD_StdEPReq+0x9a>
 8007fb0:	2b03      	cmp	r3, #3
 8007fb2:	f300 8147 	bgt.w	8008244 <USBD_StdEPReq+0x31c>
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	f000 809b 	beq.w	80080f2 <USBD_StdEPReq+0x1ca>
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	d03c      	beq.n	800803a <USBD_StdEPReq+0x112>
 8007fc0:	e140      	b.n	8008244 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fc8:	b2db      	uxtb	r3, r3
 8007fca:	2b02      	cmp	r3, #2
 8007fcc:	d002      	beq.n	8007fd4 <USBD_StdEPReq+0xac>
 8007fce:	2b03      	cmp	r3, #3
 8007fd0:	d016      	beq.n	8008000 <USBD_StdEPReq+0xd8>
 8007fd2:	e02c      	b.n	800802e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007fd4:	7bbb      	ldrb	r3, [r7, #14]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d00d      	beq.n	8007ff6 <USBD_StdEPReq+0xce>
 8007fda:	7bbb      	ldrb	r3, [r7, #14]
 8007fdc:	2b80      	cmp	r3, #128	@ 0x80
 8007fde:	d00a      	beq.n	8007ff6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007fe0:	7bbb      	ldrb	r3, [r7, #14]
 8007fe2:	4619      	mov	r1, r3
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f004 fa6b 	bl	800c4c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007fea:	2180      	movs	r1, #128	@ 0x80
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f004 fa67 	bl	800c4c0 <USBD_LL_StallEP>
 8007ff2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007ff4:	e020      	b.n	8008038 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007ff6:	6839      	ldr	r1, [r7, #0]
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 fc7c 	bl	80088f6 <USBD_CtlError>
              break;
 8007ffe:	e01b      	b.n	8008038 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	885b      	ldrh	r3, [r3, #2]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d10e      	bne.n	8008026 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008008:	7bbb      	ldrb	r3, [r7, #14]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d00b      	beq.n	8008026 <USBD_StdEPReq+0xfe>
 800800e:	7bbb      	ldrb	r3, [r7, #14]
 8008010:	2b80      	cmp	r3, #128	@ 0x80
 8008012:	d008      	beq.n	8008026 <USBD_StdEPReq+0xfe>
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	88db      	ldrh	r3, [r3, #6]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d104      	bne.n	8008026 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800801c:	7bbb      	ldrb	r3, [r7, #14]
 800801e:	4619      	mov	r1, r3
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f004 fa4d 	bl	800c4c0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f000 fd43 	bl	8008ab2 <USBD_CtlSendStatus>

              break;
 800802c:	e004      	b.n	8008038 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800802e:	6839      	ldr	r1, [r7, #0]
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f000 fc60 	bl	80088f6 <USBD_CtlError>
              break;
 8008036:	bf00      	nop
          }
          break;
 8008038:	e109      	b.n	800824e <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008040:	b2db      	uxtb	r3, r3
 8008042:	2b02      	cmp	r3, #2
 8008044:	d002      	beq.n	800804c <USBD_StdEPReq+0x124>
 8008046:	2b03      	cmp	r3, #3
 8008048:	d016      	beq.n	8008078 <USBD_StdEPReq+0x150>
 800804a:	e04b      	b.n	80080e4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800804c:	7bbb      	ldrb	r3, [r7, #14]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d00d      	beq.n	800806e <USBD_StdEPReq+0x146>
 8008052:	7bbb      	ldrb	r3, [r7, #14]
 8008054:	2b80      	cmp	r3, #128	@ 0x80
 8008056:	d00a      	beq.n	800806e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008058:	7bbb      	ldrb	r3, [r7, #14]
 800805a:	4619      	mov	r1, r3
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f004 fa2f 	bl	800c4c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008062:	2180      	movs	r1, #128	@ 0x80
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f004 fa2b 	bl	800c4c0 <USBD_LL_StallEP>
 800806a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800806c:	e040      	b.n	80080f0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800806e:	6839      	ldr	r1, [r7, #0]
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 fc40 	bl	80088f6 <USBD_CtlError>
              break;
 8008076:	e03b      	b.n	80080f0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	885b      	ldrh	r3, [r3, #2]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d136      	bne.n	80080ee <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008080:	7bbb      	ldrb	r3, [r7, #14]
 8008082:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008086:	2b00      	cmp	r3, #0
 8008088:	d004      	beq.n	8008094 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800808a:	7bbb      	ldrb	r3, [r7, #14]
 800808c:	4619      	mov	r1, r3
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f004 fa35 	bl	800c4fe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f000 fd0c 	bl	8008ab2 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800809a:	7bbb      	ldrb	r3, [r7, #14]
 800809c:	4619      	mov	r1, r3
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f7ff fde5 	bl	8007c6e <USBD_CoreFindEP>
 80080a4:	4603      	mov	r3, r0
 80080a6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80080a8:	7b7b      	ldrb	r3, [r7, #13]
 80080aa:	2bff      	cmp	r3, #255	@ 0xff
 80080ac:	d01f      	beq.n	80080ee <USBD_StdEPReq+0x1c6>
 80080ae:	7b7b      	ldrb	r3, [r7, #13]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d11c      	bne.n	80080ee <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80080b4:	7b7a      	ldrb	r2, [r7, #13]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80080bc:	7b7a      	ldrb	r2, [r7, #13]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	32ae      	adds	r2, #174	@ 0xae
 80080c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d010      	beq.n	80080ee <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80080cc:	7b7a      	ldrb	r2, [r7, #13]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	32ae      	adds	r2, #174	@ 0xae
 80080d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	6839      	ldr	r1, [r7, #0]
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	4798      	blx	r3
 80080de:	4603      	mov	r3, r0
 80080e0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80080e2:	e004      	b.n	80080ee <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80080e4:	6839      	ldr	r1, [r7, #0]
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 fc05 	bl	80088f6 <USBD_CtlError>
              break;
 80080ec:	e000      	b.n	80080f0 <USBD_StdEPReq+0x1c8>
              break;
 80080ee:	bf00      	nop
          }
          break;
 80080f0:	e0ad      	b.n	800824e <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080f8:	b2db      	uxtb	r3, r3
 80080fa:	2b02      	cmp	r3, #2
 80080fc:	d002      	beq.n	8008104 <USBD_StdEPReq+0x1dc>
 80080fe:	2b03      	cmp	r3, #3
 8008100:	d033      	beq.n	800816a <USBD_StdEPReq+0x242>
 8008102:	e099      	b.n	8008238 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008104:	7bbb      	ldrb	r3, [r7, #14]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d007      	beq.n	800811a <USBD_StdEPReq+0x1f2>
 800810a:	7bbb      	ldrb	r3, [r7, #14]
 800810c:	2b80      	cmp	r3, #128	@ 0x80
 800810e:	d004      	beq.n	800811a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008110:	6839      	ldr	r1, [r7, #0]
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 fbef 	bl	80088f6 <USBD_CtlError>
                break;
 8008118:	e093      	b.n	8008242 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800811a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800811e:	2b00      	cmp	r3, #0
 8008120:	da0b      	bge.n	800813a <USBD_StdEPReq+0x212>
 8008122:	7bbb      	ldrb	r3, [r7, #14]
 8008124:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008128:	4613      	mov	r3, r2
 800812a:	009b      	lsls	r3, r3, #2
 800812c:	4413      	add	r3, r2
 800812e:	009b      	lsls	r3, r3, #2
 8008130:	3310      	adds	r3, #16
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	4413      	add	r3, r2
 8008136:	3304      	adds	r3, #4
 8008138:	e00b      	b.n	8008152 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800813a:	7bbb      	ldrb	r3, [r7, #14]
 800813c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008140:	4613      	mov	r3, r2
 8008142:	009b      	lsls	r3, r3, #2
 8008144:	4413      	add	r3, r2
 8008146:	009b      	lsls	r3, r3, #2
 8008148:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800814c:	687a      	ldr	r2, [r7, #4]
 800814e:	4413      	add	r3, r2
 8008150:	3304      	adds	r3, #4
 8008152:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	2200      	movs	r2, #0
 8008158:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	330e      	adds	r3, #14
 800815e:	2202      	movs	r2, #2
 8008160:	4619      	mov	r1, r3
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f000 fc44 	bl	80089f0 <USBD_CtlSendData>
              break;
 8008168:	e06b      	b.n	8008242 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800816a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800816e:	2b00      	cmp	r3, #0
 8008170:	da11      	bge.n	8008196 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008172:	7bbb      	ldrb	r3, [r7, #14]
 8008174:	f003 020f 	and.w	r2, r3, #15
 8008178:	6879      	ldr	r1, [r7, #4]
 800817a:	4613      	mov	r3, r2
 800817c:	009b      	lsls	r3, r3, #2
 800817e:	4413      	add	r3, r2
 8008180:	009b      	lsls	r3, r3, #2
 8008182:	440b      	add	r3, r1
 8008184:	3323      	adds	r3, #35	@ 0x23
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d117      	bne.n	80081bc <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800818c:	6839      	ldr	r1, [r7, #0]
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f000 fbb1 	bl	80088f6 <USBD_CtlError>
                  break;
 8008194:	e055      	b.n	8008242 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008196:	7bbb      	ldrb	r3, [r7, #14]
 8008198:	f003 020f 	and.w	r2, r3, #15
 800819c:	6879      	ldr	r1, [r7, #4]
 800819e:	4613      	mov	r3, r2
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	4413      	add	r3, r2
 80081a4:	009b      	lsls	r3, r3, #2
 80081a6:	440b      	add	r3, r1
 80081a8:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80081ac:	781b      	ldrb	r3, [r3, #0]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d104      	bne.n	80081bc <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 80081b2:	6839      	ldr	r1, [r7, #0]
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f000 fb9e 	bl	80088f6 <USBD_CtlError>
                  break;
 80081ba:	e042      	b.n	8008242 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80081bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	da0b      	bge.n	80081dc <USBD_StdEPReq+0x2b4>
 80081c4:	7bbb      	ldrb	r3, [r7, #14]
 80081c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80081ca:	4613      	mov	r3, r2
 80081cc:	009b      	lsls	r3, r3, #2
 80081ce:	4413      	add	r3, r2
 80081d0:	009b      	lsls	r3, r3, #2
 80081d2:	3310      	adds	r3, #16
 80081d4:	687a      	ldr	r2, [r7, #4]
 80081d6:	4413      	add	r3, r2
 80081d8:	3304      	adds	r3, #4
 80081da:	e00b      	b.n	80081f4 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80081dc:	7bbb      	ldrb	r3, [r7, #14]
 80081de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80081e2:	4613      	mov	r3, r2
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	4413      	add	r3, r2
 80081e8:	009b      	lsls	r3, r3, #2
 80081ea:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80081ee:	687a      	ldr	r2, [r7, #4]
 80081f0:	4413      	add	r3, r2
 80081f2:	3304      	adds	r3, #4
 80081f4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80081f6:	7bbb      	ldrb	r3, [r7, #14]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d002      	beq.n	8008202 <USBD_StdEPReq+0x2da>
 80081fc:	7bbb      	ldrb	r3, [r7, #14]
 80081fe:	2b80      	cmp	r3, #128	@ 0x80
 8008200:	d103      	bne.n	800820a <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	2200      	movs	r2, #0
 8008206:	739a      	strb	r2, [r3, #14]
 8008208:	e00e      	b.n	8008228 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800820a:	7bbb      	ldrb	r3, [r7, #14]
 800820c:	4619      	mov	r1, r3
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f004 f994 	bl	800c53c <USBD_LL_IsStallEP>
 8008214:	4603      	mov	r3, r0
 8008216:	2b00      	cmp	r3, #0
 8008218:	d003      	beq.n	8008222 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	2201      	movs	r2, #1
 800821e:	739a      	strb	r2, [r3, #14]
 8008220:	e002      	b.n	8008228 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	2200      	movs	r2, #0
 8008226:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	330e      	adds	r3, #14
 800822c:	2202      	movs	r2, #2
 800822e:	4619      	mov	r1, r3
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f000 fbdd 	bl	80089f0 <USBD_CtlSendData>
              break;
 8008236:	e004      	b.n	8008242 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8008238:	6839      	ldr	r1, [r7, #0]
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 fb5b 	bl	80088f6 <USBD_CtlError>
              break;
 8008240:	bf00      	nop
          }
          break;
 8008242:	e004      	b.n	800824e <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8008244:	6839      	ldr	r1, [r7, #0]
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 fb55 	bl	80088f6 <USBD_CtlError>
          break;
 800824c:	bf00      	nop
      }
      break;
 800824e:	e005      	b.n	800825c <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8008250:	6839      	ldr	r1, [r7, #0]
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f000 fb4f 	bl	80088f6 <USBD_CtlError>
      break;
 8008258:	e000      	b.n	800825c <USBD_StdEPReq+0x334>
      break;
 800825a:	bf00      	nop
  }

  return ret;
 800825c:	7bfb      	ldrb	r3, [r7, #15]
}
 800825e:	4618      	mov	r0, r3
 8008260:	3710      	adds	r7, #16
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}
	...

08008268 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b084      	sub	sp, #16
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008272:	2300      	movs	r3, #0
 8008274:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008276:	2300      	movs	r3, #0
 8008278:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800827a:	2300      	movs	r3, #0
 800827c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	885b      	ldrh	r3, [r3, #2]
 8008282:	0a1b      	lsrs	r3, r3, #8
 8008284:	b29b      	uxth	r3, r3
 8008286:	3b01      	subs	r3, #1
 8008288:	2b06      	cmp	r3, #6
 800828a:	f200 8128 	bhi.w	80084de <USBD_GetDescriptor+0x276>
 800828e:	a201      	add	r2, pc, #4	@ (adr r2, 8008294 <USBD_GetDescriptor+0x2c>)
 8008290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008294:	080082b1 	.word	0x080082b1
 8008298:	080082c9 	.word	0x080082c9
 800829c:	08008309 	.word	0x08008309
 80082a0:	080084df 	.word	0x080084df
 80082a4:	080084df 	.word	0x080084df
 80082a8:	0800847f 	.word	0x0800847f
 80082ac:	080084ab 	.word	0x080084ab
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	687a      	ldr	r2, [r7, #4]
 80082ba:	7c12      	ldrb	r2, [r2, #16]
 80082bc:	f107 0108 	add.w	r1, r7, #8
 80082c0:	4610      	mov	r0, r2
 80082c2:	4798      	blx	r3
 80082c4:	60f8      	str	r0, [r7, #12]
      break;
 80082c6:	e112      	b.n	80084ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	7c1b      	ldrb	r3, [r3, #16]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d10d      	bne.n	80082ec <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082d8:	f107 0208 	add.w	r2, r7, #8
 80082dc:	4610      	mov	r0, r2
 80082de:	4798      	blx	r3
 80082e0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	3301      	adds	r3, #1
 80082e6:	2202      	movs	r2, #2
 80082e8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80082ea:	e100      	b.n	80084ee <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082f4:	f107 0208 	add.w	r2, r7, #8
 80082f8:	4610      	mov	r0, r2
 80082fa:	4798      	blx	r3
 80082fc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	3301      	adds	r3, #1
 8008302:	2202      	movs	r2, #2
 8008304:	701a      	strb	r2, [r3, #0]
      break;
 8008306:	e0f2      	b.n	80084ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	885b      	ldrh	r3, [r3, #2]
 800830c:	b2db      	uxtb	r3, r3
 800830e:	2b05      	cmp	r3, #5
 8008310:	f200 80ac 	bhi.w	800846c <USBD_GetDescriptor+0x204>
 8008314:	a201      	add	r2, pc, #4	@ (adr r2, 800831c <USBD_GetDescriptor+0xb4>)
 8008316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800831a:	bf00      	nop
 800831c:	08008335 	.word	0x08008335
 8008320:	08008369 	.word	0x08008369
 8008324:	0800839d 	.word	0x0800839d
 8008328:	080083d1 	.word	0x080083d1
 800832c:	08008405 	.word	0x08008405
 8008330:	08008439 	.word	0x08008439
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800833a:	685b      	ldr	r3, [r3, #4]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d00b      	beq.n	8008358 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	687a      	ldr	r2, [r7, #4]
 800834a:	7c12      	ldrb	r2, [r2, #16]
 800834c:	f107 0108 	add.w	r1, r7, #8
 8008350:	4610      	mov	r0, r2
 8008352:	4798      	blx	r3
 8008354:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008356:	e091      	b.n	800847c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008358:	6839      	ldr	r1, [r7, #0]
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 facb 	bl	80088f6 <USBD_CtlError>
            err++;
 8008360:	7afb      	ldrb	r3, [r7, #11]
 8008362:	3301      	adds	r3, #1
 8008364:	72fb      	strb	r3, [r7, #11]
          break;
 8008366:	e089      	b.n	800847c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800836e:	689b      	ldr	r3, [r3, #8]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d00b      	beq.n	800838c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800837a:	689b      	ldr	r3, [r3, #8]
 800837c:	687a      	ldr	r2, [r7, #4]
 800837e:	7c12      	ldrb	r2, [r2, #16]
 8008380:	f107 0108 	add.w	r1, r7, #8
 8008384:	4610      	mov	r0, r2
 8008386:	4798      	blx	r3
 8008388:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800838a:	e077      	b.n	800847c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800838c:	6839      	ldr	r1, [r7, #0]
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f000 fab1 	bl	80088f6 <USBD_CtlError>
            err++;
 8008394:	7afb      	ldrb	r3, [r7, #11]
 8008396:	3301      	adds	r3, #1
 8008398:	72fb      	strb	r3, [r7, #11]
          break;
 800839a:	e06f      	b.n	800847c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80083a2:	68db      	ldr	r3, [r3, #12]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d00b      	beq.n	80083c0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80083ae:	68db      	ldr	r3, [r3, #12]
 80083b0:	687a      	ldr	r2, [r7, #4]
 80083b2:	7c12      	ldrb	r2, [r2, #16]
 80083b4:	f107 0108 	add.w	r1, r7, #8
 80083b8:	4610      	mov	r0, r2
 80083ba:	4798      	blx	r3
 80083bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083be:	e05d      	b.n	800847c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083c0:	6839      	ldr	r1, [r7, #0]
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f000 fa97 	bl	80088f6 <USBD_CtlError>
            err++;
 80083c8:	7afb      	ldrb	r3, [r7, #11]
 80083ca:	3301      	adds	r3, #1
 80083cc:	72fb      	strb	r3, [r7, #11]
          break;
 80083ce:	e055      	b.n	800847c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80083d6:	691b      	ldr	r3, [r3, #16]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d00b      	beq.n	80083f4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80083e2:	691b      	ldr	r3, [r3, #16]
 80083e4:	687a      	ldr	r2, [r7, #4]
 80083e6:	7c12      	ldrb	r2, [r2, #16]
 80083e8:	f107 0108 	add.w	r1, r7, #8
 80083ec:	4610      	mov	r0, r2
 80083ee:	4798      	blx	r3
 80083f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083f2:	e043      	b.n	800847c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083f4:	6839      	ldr	r1, [r7, #0]
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f000 fa7d 	bl	80088f6 <USBD_CtlError>
            err++;
 80083fc:	7afb      	ldrb	r3, [r7, #11]
 80083fe:	3301      	adds	r3, #1
 8008400:	72fb      	strb	r3, [r7, #11]
          break;
 8008402:	e03b      	b.n	800847c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800840a:	695b      	ldr	r3, [r3, #20]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d00b      	beq.n	8008428 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008416:	695b      	ldr	r3, [r3, #20]
 8008418:	687a      	ldr	r2, [r7, #4]
 800841a:	7c12      	ldrb	r2, [r2, #16]
 800841c:	f107 0108 	add.w	r1, r7, #8
 8008420:	4610      	mov	r0, r2
 8008422:	4798      	blx	r3
 8008424:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008426:	e029      	b.n	800847c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008428:	6839      	ldr	r1, [r7, #0]
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f000 fa63 	bl	80088f6 <USBD_CtlError>
            err++;
 8008430:	7afb      	ldrb	r3, [r7, #11]
 8008432:	3301      	adds	r3, #1
 8008434:	72fb      	strb	r3, [r7, #11]
          break;
 8008436:	e021      	b.n	800847c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800843e:	699b      	ldr	r3, [r3, #24]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d00b      	beq.n	800845c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800844a:	699b      	ldr	r3, [r3, #24]
 800844c:	687a      	ldr	r2, [r7, #4]
 800844e:	7c12      	ldrb	r2, [r2, #16]
 8008450:	f107 0108 	add.w	r1, r7, #8
 8008454:	4610      	mov	r0, r2
 8008456:	4798      	blx	r3
 8008458:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800845a:	e00f      	b.n	800847c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800845c:	6839      	ldr	r1, [r7, #0]
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f000 fa49 	bl	80088f6 <USBD_CtlError>
            err++;
 8008464:	7afb      	ldrb	r3, [r7, #11]
 8008466:	3301      	adds	r3, #1
 8008468:	72fb      	strb	r3, [r7, #11]
          break;
 800846a:	e007      	b.n	800847c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800846c:	6839      	ldr	r1, [r7, #0]
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f000 fa41 	bl	80088f6 <USBD_CtlError>
          err++;
 8008474:	7afb      	ldrb	r3, [r7, #11]
 8008476:	3301      	adds	r3, #1
 8008478:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800847a:	bf00      	nop
      }
      break;
 800847c:	e037      	b.n	80084ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	7c1b      	ldrb	r3, [r3, #16]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d109      	bne.n	800849a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800848c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800848e:	f107 0208 	add.w	r2, r7, #8
 8008492:	4610      	mov	r0, r2
 8008494:	4798      	blx	r3
 8008496:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008498:	e029      	b.n	80084ee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800849a:	6839      	ldr	r1, [r7, #0]
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f000 fa2a 	bl	80088f6 <USBD_CtlError>
        err++;
 80084a2:	7afb      	ldrb	r3, [r7, #11]
 80084a4:	3301      	adds	r3, #1
 80084a6:	72fb      	strb	r3, [r7, #11]
      break;
 80084a8:	e021      	b.n	80084ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	7c1b      	ldrb	r3, [r3, #16]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d10d      	bne.n	80084ce <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084ba:	f107 0208 	add.w	r2, r7, #8
 80084be:	4610      	mov	r0, r2
 80084c0:	4798      	blx	r3
 80084c2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	3301      	adds	r3, #1
 80084c8:	2207      	movs	r2, #7
 80084ca:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80084cc:	e00f      	b.n	80084ee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80084ce:	6839      	ldr	r1, [r7, #0]
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f000 fa10 	bl	80088f6 <USBD_CtlError>
        err++;
 80084d6:	7afb      	ldrb	r3, [r7, #11]
 80084d8:	3301      	adds	r3, #1
 80084da:	72fb      	strb	r3, [r7, #11]
      break;
 80084dc:	e007      	b.n	80084ee <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80084de:	6839      	ldr	r1, [r7, #0]
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f000 fa08 	bl	80088f6 <USBD_CtlError>
      err++;
 80084e6:	7afb      	ldrb	r3, [r7, #11]
 80084e8:	3301      	adds	r3, #1
 80084ea:	72fb      	strb	r3, [r7, #11]
      break;
 80084ec:	bf00      	nop
  }

  if (err != 0U)
 80084ee:	7afb      	ldrb	r3, [r7, #11]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d11e      	bne.n	8008532 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	88db      	ldrh	r3, [r3, #6]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d016      	beq.n	800852a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80084fc:	893b      	ldrh	r3, [r7, #8]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d00e      	beq.n	8008520 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	88da      	ldrh	r2, [r3, #6]
 8008506:	893b      	ldrh	r3, [r7, #8]
 8008508:	4293      	cmp	r3, r2
 800850a:	bf28      	it	cs
 800850c:	4613      	movcs	r3, r2
 800850e:	b29b      	uxth	r3, r3
 8008510:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008512:	893b      	ldrh	r3, [r7, #8]
 8008514:	461a      	mov	r2, r3
 8008516:	68f9      	ldr	r1, [r7, #12]
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f000 fa69 	bl	80089f0 <USBD_CtlSendData>
 800851e:	e009      	b.n	8008534 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008520:	6839      	ldr	r1, [r7, #0]
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f000 f9e7 	bl	80088f6 <USBD_CtlError>
 8008528:	e004      	b.n	8008534 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f000 fac1 	bl	8008ab2 <USBD_CtlSendStatus>
 8008530:	e000      	b.n	8008534 <USBD_GetDescriptor+0x2cc>
    return;
 8008532:	bf00      	nop
  }
}
 8008534:	3710      	adds	r7, #16
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}
 800853a:	bf00      	nop

0800853c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b084      	sub	sp, #16
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	889b      	ldrh	r3, [r3, #4]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d131      	bne.n	80085b2 <USBD_SetAddress+0x76>
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	88db      	ldrh	r3, [r3, #6]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d12d      	bne.n	80085b2 <USBD_SetAddress+0x76>
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	885b      	ldrh	r3, [r3, #2]
 800855a:	2b7f      	cmp	r3, #127	@ 0x7f
 800855c:	d829      	bhi.n	80085b2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	885b      	ldrh	r3, [r3, #2]
 8008562:	b2db      	uxtb	r3, r3
 8008564:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008568:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008570:	b2db      	uxtb	r3, r3
 8008572:	2b03      	cmp	r3, #3
 8008574:	d104      	bne.n	8008580 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008576:	6839      	ldr	r1, [r7, #0]
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f000 f9bc 	bl	80088f6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800857e:	e01d      	b.n	80085bc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	7bfa      	ldrb	r2, [r7, #15]
 8008584:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008588:	7bfb      	ldrb	r3, [r7, #15]
 800858a:	4619      	mov	r1, r3
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f004 f801 	bl	800c594 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f000 fa8d 	bl	8008ab2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008598:	7bfb      	ldrb	r3, [r7, #15]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d004      	beq.n	80085a8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2202      	movs	r2, #2
 80085a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085a6:	e009      	b.n	80085bc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2201      	movs	r2, #1
 80085ac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085b0:	e004      	b.n	80085bc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80085b2:	6839      	ldr	r1, [r7, #0]
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f000 f99e 	bl	80088f6 <USBD_CtlError>
  }
}
 80085ba:	bf00      	nop
 80085bc:	bf00      	nop
 80085be:	3710      	adds	r7, #16
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}

080085c4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b084      	sub	sp, #16
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
 80085cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80085ce:	2300      	movs	r3, #0
 80085d0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	885b      	ldrh	r3, [r3, #2]
 80085d6:	b2da      	uxtb	r2, r3
 80085d8:	4b4e      	ldr	r3, [pc, #312]	@ (8008714 <USBD_SetConfig+0x150>)
 80085da:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80085dc:	4b4d      	ldr	r3, [pc, #308]	@ (8008714 <USBD_SetConfig+0x150>)
 80085de:	781b      	ldrb	r3, [r3, #0]
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	d905      	bls.n	80085f0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80085e4:	6839      	ldr	r1, [r7, #0]
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f000 f985 	bl	80088f6 <USBD_CtlError>
    return USBD_FAIL;
 80085ec:	2303      	movs	r3, #3
 80085ee:	e08c      	b.n	800870a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085f6:	b2db      	uxtb	r3, r3
 80085f8:	2b02      	cmp	r3, #2
 80085fa:	d002      	beq.n	8008602 <USBD_SetConfig+0x3e>
 80085fc:	2b03      	cmp	r3, #3
 80085fe:	d029      	beq.n	8008654 <USBD_SetConfig+0x90>
 8008600:	e075      	b.n	80086ee <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008602:	4b44      	ldr	r3, [pc, #272]	@ (8008714 <USBD_SetConfig+0x150>)
 8008604:	781b      	ldrb	r3, [r3, #0]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d020      	beq.n	800864c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800860a:	4b42      	ldr	r3, [pc, #264]	@ (8008714 <USBD_SetConfig+0x150>)
 800860c:	781b      	ldrb	r3, [r3, #0]
 800860e:	461a      	mov	r2, r3
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008614:	4b3f      	ldr	r3, [pc, #252]	@ (8008714 <USBD_SetConfig+0x150>)
 8008616:	781b      	ldrb	r3, [r3, #0]
 8008618:	4619      	mov	r1, r3
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f7fe ffcf 	bl	80075be <USBD_SetClassConfig>
 8008620:	4603      	mov	r3, r0
 8008622:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008624:	7bfb      	ldrb	r3, [r7, #15]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d008      	beq.n	800863c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800862a:	6839      	ldr	r1, [r7, #0]
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f000 f962 	bl	80088f6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2202      	movs	r2, #2
 8008636:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800863a:	e065      	b.n	8008708 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f000 fa38 	bl	8008ab2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2203      	movs	r2, #3
 8008646:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800864a:	e05d      	b.n	8008708 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f000 fa30 	bl	8008ab2 <USBD_CtlSendStatus>
      break;
 8008652:	e059      	b.n	8008708 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008654:	4b2f      	ldr	r3, [pc, #188]	@ (8008714 <USBD_SetConfig+0x150>)
 8008656:	781b      	ldrb	r3, [r3, #0]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d112      	bne.n	8008682 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2202      	movs	r2, #2
 8008660:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008664:	4b2b      	ldr	r3, [pc, #172]	@ (8008714 <USBD_SetConfig+0x150>)
 8008666:	781b      	ldrb	r3, [r3, #0]
 8008668:	461a      	mov	r2, r3
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800866e:	4b29      	ldr	r3, [pc, #164]	@ (8008714 <USBD_SetConfig+0x150>)
 8008670:	781b      	ldrb	r3, [r3, #0]
 8008672:	4619      	mov	r1, r3
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f7fe ffbe 	bl	80075f6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 fa19 	bl	8008ab2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008680:	e042      	b.n	8008708 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008682:	4b24      	ldr	r3, [pc, #144]	@ (8008714 <USBD_SetConfig+0x150>)
 8008684:	781b      	ldrb	r3, [r3, #0]
 8008686:	461a      	mov	r2, r3
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	685b      	ldr	r3, [r3, #4]
 800868c:	429a      	cmp	r2, r3
 800868e:	d02a      	beq.n	80086e6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	685b      	ldr	r3, [r3, #4]
 8008694:	b2db      	uxtb	r3, r3
 8008696:	4619      	mov	r1, r3
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f7fe ffac 	bl	80075f6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800869e:	4b1d      	ldr	r3, [pc, #116]	@ (8008714 <USBD_SetConfig+0x150>)
 80086a0:	781b      	ldrb	r3, [r3, #0]
 80086a2:	461a      	mov	r2, r3
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80086a8:	4b1a      	ldr	r3, [pc, #104]	@ (8008714 <USBD_SetConfig+0x150>)
 80086aa:	781b      	ldrb	r3, [r3, #0]
 80086ac:	4619      	mov	r1, r3
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f7fe ff85 	bl	80075be <USBD_SetClassConfig>
 80086b4:	4603      	mov	r3, r0
 80086b6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80086b8:	7bfb      	ldrb	r3, [r7, #15]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d00f      	beq.n	80086de <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80086be:	6839      	ldr	r1, [r7, #0]
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f000 f918 	bl	80088f6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	685b      	ldr	r3, [r3, #4]
 80086ca:	b2db      	uxtb	r3, r3
 80086cc:	4619      	mov	r1, r3
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f7fe ff91 	bl	80075f6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2202      	movs	r2, #2
 80086d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80086dc:	e014      	b.n	8008708 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f000 f9e7 	bl	8008ab2 <USBD_CtlSendStatus>
      break;
 80086e4:	e010      	b.n	8008708 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 f9e3 	bl	8008ab2 <USBD_CtlSendStatus>
      break;
 80086ec:	e00c      	b.n	8008708 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80086ee:	6839      	ldr	r1, [r7, #0]
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f000 f900 	bl	80088f6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80086f6:	4b07      	ldr	r3, [pc, #28]	@ (8008714 <USBD_SetConfig+0x150>)
 80086f8:	781b      	ldrb	r3, [r3, #0]
 80086fa:	4619      	mov	r1, r3
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f7fe ff7a 	bl	80075f6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008702:	2303      	movs	r3, #3
 8008704:	73fb      	strb	r3, [r7, #15]
      break;
 8008706:	bf00      	nop
  }

  return ret;
 8008708:	7bfb      	ldrb	r3, [r7, #15]
}
 800870a:	4618      	mov	r0, r3
 800870c:	3710      	adds	r7, #16
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}
 8008712:	bf00      	nop
 8008714:	2000058c 	.word	0x2000058c

08008718 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b082      	sub	sp, #8
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	88db      	ldrh	r3, [r3, #6]
 8008726:	2b01      	cmp	r3, #1
 8008728:	d004      	beq.n	8008734 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800872a:	6839      	ldr	r1, [r7, #0]
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f000 f8e2 	bl	80088f6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008732:	e023      	b.n	800877c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800873a:	b2db      	uxtb	r3, r3
 800873c:	2b02      	cmp	r3, #2
 800873e:	dc02      	bgt.n	8008746 <USBD_GetConfig+0x2e>
 8008740:	2b00      	cmp	r3, #0
 8008742:	dc03      	bgt.n	800874c <USBD_GetConfig+0x34>
 8008744:	e015      	b.n	8008772 <USBD_GetConfig+0x5a>
 8008746:	2b03      	cmp	r3, #3
 8008748:	d00b      	beq.n	8008762 <USBD_GetConfig+0x4a>
 800874a:	e012      	b.n	8008772 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2200      	movs	r2, #0
 8008750:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	3308      	adds	r3, #8
 8008756:	2201      	movs	r2, #1
 8008758:	4619      	mov	r1, r3
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f000 f948 	bl	80089f0 <USBD_CtlSendData>
        break;
 8008760:	e00c      	b.n	800877c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	3304      	adds	r3, #4
 8008766:	2201      	movs	r2, #1
 8008768:	4619      	mov	r1, r3
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f000 f940 	bl	80089f0 <USBD_CtlSendData>
        break;
 8008770:	e004      	b.n	800877c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008772:	6839      	ldr	r1, [r7, #0]
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f000 f8be 	bl	80088f6 <USBD_CtlError>
        break;
 800877a:	bf00      	nop
}
 800877c:	bf00      	nop
 800877e:	3708      	adds	r7, #8
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}

08008784 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b082      	sub	sp, #8
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008794:	b2db      	uxtb	r3, r3
 8008796:	3b01      	subs	r3, #1
 8008798:	2b02      	cmp	r3, #2
 800879a:	d81e      	bhi.n	80087da <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	88db      	ldrh	r3, [r3, #6]
 80087a0:	2b02      	cmp	r3, #2
 80087a2:	d004      	beq.n	80087ae <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80087a4:	6839      	ldr	r1, [r7, #0]
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 f8a5 	bl	80088f6 <USBD_CtlError>
        break;
 80087ac:	e01a      	b.n	80087e4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2201      	movs	r2, #1
 80087b2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d005      	beq.n	80087ca <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	68db      	ldr	r3, [r3, #12]
 80087c2:	f043 0202 	orr.w	r2, r3, #2
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	330c      	adds	r3, #12
 80087ce:	2202      	movs	r2, #2
 80087d0:	4619      	mov	r1, r3
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f000 f90c 	bl	80089f0 <USBD_CtlSendData>
      break;
 80087d8:	e004      	b.n	80087e4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80087da:	6839      	ldr	r1, [r7, #0]
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f000 f88a 	bl	80088f6 <USBD_CtlError>
      break;
 80087e2:	bf00      	nop
  }
}
 80087e4:	bf00      	nop
 80087e6:	3708      	adds	r7, #8
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}

080087ec <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b082      	sub	sp, #8
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
 80087f4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	885b      	ldrh	r3, [r3, #2]
 80087fa:	2b01      	cmp	r3, #1
 80087fc:	d107      	bne.n	800880e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2201      	movs	r2, #1
 8008802:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f000 f953 	bl	8008ab2 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800880c:	e013      	b.n	8008836 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	885b      	ldrh	r3, [r3, #2]
 8008812:	2b02      	cmp	r3, #2
 8008814:	d10b      	bne.n	800882e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	889b      	ldrh	r3, [r3, #4]
 800881a:	0a1b      	lsrs	r3, r3, #8
 800881c:	b29b      	uxth	r3, r3
 800881e:	b2da      	uxtb	r2, r3
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 f943 	bl	8008ab2 <USBD_CtlSendStatus>
}
 800882c:	e003      	b.n	8008836 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800882e:	6839      	ldr	r1, [r7, #0]
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f000 f860 	bl	80088f6 <USBD_CtlError>
}
 8008836:	bf00      	nop
 8008838:	3708      	adds	r7, #8
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}

0800883e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800883e:	b580      	push	{r7, lr}
 8008840:	b082      	sub	sp, #8
 8008842:	af00      	add	r7, sp, #0
 8008844:	6078      	str	r0, [r7, #4]
 8008846:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800884e:	b2db      	uxtb	r3, r3
 8008850:	3b01      	subs	r3, #1
 8008852:	2b02      	cmp	r3, #2
 8008854:	d80b      	bhi.n	800886e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	885b      	ldrh	r3, [r3, #2]
 800885a:	2b01      	cmp	r3, #1
 800885c:	d10c      	bne.n	8008878 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2200      	movs	r2, #0
 8008862:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f000 f923 	bl	8008ab2 <USBD_CtlSendStatus>
      }
      break;
 800886c:	e004      	b.n	8008878 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800886e:	6839      	ldr	r1, [r7, #0]
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f000 f840 	bl	80088f6 <USBD_CtlError>
      break;
 8008876:	e000      	b.n	800887a <USBD_ClrFeature+0x3c>
      break;
 8008878:	bf00      	nop
  }
}
 800887a:	bf00      	nop
 800887c:	3708      	adds	r7, #8
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}

08008882 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008882:	b580      	push	{r7, lr}
 8008884:	b084      	sub	sp, #16
 8008886:	af00      	add	r7, sp, #0
 8008888:	6078      	str	r0, [r7, #4]
 800888a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	781a      	ldrb	r2, [r3, #0]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	3301      	adds	r3, #1
 800889c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	781a      	ldrb	r2, [r3, #0]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	3301      	adds	r3, #1
 80088aa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80088ac:	68f8      	ldr	r0, [r7, #12]
 80088ae:	f7ff fa3f 	bl	8007d30 <SWAPBYTE>
 80088b2:	4603      	mov	r3, r0
 80088b4:	461a      	mov	r2, r3
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	3301      	adds	r3, #1
 80088be:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	3301      	adds	r3, #1
 80088c4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80088c6:	68f8      	ldr	r0, [r7, #12]
 80088c8:	f7ff fa32 	bl	8007d30 <SWAPBYTE>
 80088cc:	4603      	mov	r3, r0
 80088ce:	461a      	mov	r2, r3
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	3301      	adds	r3, #1
 80088d8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	3301      	adds	r3, #1
 80088de:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80088e0:	68f8      	ldr	r0, [r7, #12]
 80088e2:	f7ff fa25 	bl	8007d30 <SWAPBYTE>
 80088e6:	4603      	mov	r3, r0
 80088e8:	461a      	mov	r2, r3
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	80da      	strh	r2, [r3, #6]
}
 80088ee:	bf00      	nop
 80088f0:	3710      	adds	r7, #16
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}

080088f6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088f6:	b580      	push	{r7, lr}
 80088f8:	b082      	sub	sp, #8
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	6078      	str	r0, [r7, #4]
 80088fe:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008900:	2180      	movs	r1, #128	@ 0x80
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f003 fddc 	bl	800c4c0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008908:	2100      	movs	r1, #0
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f003 fdd8 	bl	800c4c0 <USBD_LL_StallEP>
}
 8008910:	bf00      	nop
 8008912:	3708      	adds	r7, #8
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}

08008918 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b086      	sub	sp, #24
 800891c:	af00      	add	r7, sp, #0
 800891e:	60f8      	str	r0, [r7, #12]
 8008920:	60b9      	str	r1, [r7, #8]
 8008922:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008924:	2300      	movs	r3, #0
 8008926:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d042      	beq.n	80089b4 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8008932:	6938      	ldr	r0, [r7, #16]
 8008934:	f000 f842 	bl	80089bc <USBD_GetLen>
 8008938:	4603      	mov	r3, r0
 800893a:	3301      	adds	r3, #1
 800893c:	005b      	lsls	r3, r3, #1
 800893e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008942:	d808      	bhi.n	8008956 <USBD_GetString+0x3e>
 8008944:	6938      	ldr	r0, [r7, #16]
 8008946:	f000 f839 	bl	80089bc <USBD_GetLen>
 800894a:	4603      	mov	r3, r0
 800894c:	3301      	adds	r3, #1
 800894e:	b29b      	uxth	r3, r3
 8008950:	005b      	lsls	r3, r3, #1
 8008952:	b29a      	uxth	r2, r3
 8008954:	e001      	b.n	800895a <USBD_GetString+0x42>
 8008956:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800895e:	7dfb      	ldrb	r3, [r7, #23]
 8008960:	68ba      	ldr	r2, [r7, #8]
 8008962:	4413      	add	r3, r2
 8008964:	687a      	ldr	r2, [r7, #4]
 8008966:	7812      	ldrb	r2, [r2, #0]
 8008968:	701a      	strb	r2, [r3, #0]
  idx++;
 800896a:	7dfb      	ldrb	r3, [r7, #23]
 800896c:	3301      	adds	r3, #1
 800896e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008970:	7dfb      	ldrb	r3, [r7, #23]
 8008972:	68ba      	ldr	r2, [r7, #8]
 8008974:	4413      	add	r3, r2
 8008976:	2203      	movs	r2, #3
 8008978:	701a      	strb	r2, [r3, #0]
  idx++;
 800897a:	7dfb      	ldrb	r3, [r7, #23]
 800897c:	3301      	adds	r3, #1
 800897e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008980:	e013      	b.n	80089aa <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8008982:	7dfb      	ldrb	r3, [r7, #23]
 8008984:	68ba      	ldr	r2, [r7, #8]
 8008986:	4413      	add	r3, r2
 8008988:	693a      	ldr	r2, [r7, #16]
 800898a:	7812      	ldrb	r2, [r2, #0]
 800898c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	3301      	adds	r3, #1
 8008992:	613b      	str	r3, [r7, #16]
    idx++;
 8008994:	7dfb      	ldrb	r3, [r7, #23]
 8008996:	3301      	adds	r3, #1
 8008998:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800899a:	7dfb      	ldrb	r3, [r7, #23]
 800899c:	68ba      	ldr	r2, [r7, #8]
 800899e:	4413      	add	r3, r2
 80089a0:	2200      	movs	r2, #0
 80089a2:	701a      	strb	r2, [r3, #0]
    idx++;
 80089a4:	7dfb      	ldrb	r3, [r7, #23]
 80089a6:	3301      	adds	r3, #1
 80089a8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	781b      	ldrb	r3, [r3, #0]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d1e7      	bne.n	8008982 <USBD_GetString+0x6a>
 80089b2:	e000      	b.n	80089b6 <USBD_GetString+0x9e>
    return;
 80089b4:	bf00      	nop
  }
}
 80089b6:	3718      	adds	r7, #24
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}

080089bc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80089bc:	b480      	push	{r7}
 80089be:	b085      	sub	sp, #20
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80089c4:	2300      	movs	r3, #0
 80089c6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80089cc:	e005      	b.n	80089da <USBD_GetLen+0x1e>
  {
    len++;
 80089ce:	7bfb      	ldrb	r3, [r7, #15]
 80089d0:	3301      	adds	r3, #1
 80089d2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	3301      	adds	r3, #1
 80089d8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	781b      	ldrb	r3, [r3, #0]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d1f5      	bne.n	80089ce <USBD_GetLen+0x12>
  }

  return len;
 80089e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	3714      	adds	r7, #20
 80089e8:	46bd      	mov	sp, r7
 80089ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ee:	4770      	bx	lr

080089f0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b084      	sub	sp, #16
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	60f8      	str	r0, [r7, #12]
 80089f8:	60b9      	str	r1, [r7, #8]
 80089fa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2202      	movs	r2, #2
 8008a00:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	687a      	ldr	r2, [r7, #4]
 8008a08:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	68ba      	ldr	r2, [r7, #8]
 8008a0e:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	687a      	ldr	r2, [r7, #4]
 8008a14:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	68ba      	ldr	r2, [r7, #8]
 8008a1a:	2100      	movs	r1, #0
 8008a1c:	68f8      	ldr	r0, [r7, #12]
 8008a1e:	f003 fdd8 	bl	800c5d2 <USBD_LL_Transmit>

  return USBD_OK;
 8008a22:	2300      	movs	r3, #0
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3710      	adds	r7, #16
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}

08008a2c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b084      	sub	sp, #16
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	60f8      	str	r0, [r7, #12]
 8008a34:	60b9      	str	r1, [r7, #8]
 8008a36:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	68ba      	ldr	r2, [r7, #8]
 8008a3c:	2100      	movs	r1, #0
 8008a3e:	68f8      	ldr	r0, [r7, #12]
 8008a40:	f003 fdc7 	bl	800c5d2 <USBD_LL_Transmit>

  return USBD_OK;
 8008a44:	2300      	movs	r3, #0
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3710      	adds	r7, #16
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}

08008a4e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008a4e:	b580      	push	{r7, lr}
 8008a50:	b084      	sub	sp, #16
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	60f8      	str	r0, [r7, #12]
 8008a56:	60b9      	str	r1, [r7, #8]
 8008a58:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	2203      	movs	r2, #3
 8008a5e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	687a      	ldr	r2, [r7, #4]
 8008a66:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	68ba      	ldr	r2, [r7, #8]
 8008a6e:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	687a      	ldr	r2, [r7, #4]
 8008a76:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	68ba      	ldr	r2, [r7, #8]
 8008a7e:	2100      	movs	r1, #0
 8008a80:	68f8      	ldr	r0, [r7, #12]
 8008a82:	f003 fdc7 	bl	800c614 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a86:	2300      	movs	r3, #0
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3710      	adds	r7, #16
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}

08008a90 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b084      	sub	sp, #16
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	60f8      	str	r0, [r7, #12]
 8008a98:	60b9      	str	r1, [r7, #8]
 8008a9a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	68ba      	ldr	r2, [r7, #8]
 8008aa0:	2100      	movs	r1, #0
 8008aa2:	68f8      	ldr	r0, [r7, #12]
 8008aa4:	f003 fdb6 	bl	800c614 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008aa8:	2300      	movs	r3, #0
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3710      	adds	r7, #16
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}

08008ab2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008ab2:	b580      	push	{r7, lr}
 8008ab4:	b082      	sub	sp, #8
 8008ab6:	af00      	add	r7, sp, #0
 8008ab8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2204      	movs	r2, #4
 8008abe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	2100      	movs	r1, #0
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f003 fd82 	bl	800c5d2 <USBD_LL_Transmit>

  return USBD_OK;
 8008ace:	2300      	movs	r3, #0
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3708      	adds	r7, #8
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}

08008ad8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b082      	sub	sp, #8
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2205      	movs	r2, #5
 8008ae4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ae8:	2300      	movs	r3, #0
 8008aea:	2200      	movs	r2, #0
 8008aec:	2100      	movs	r1, #0
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f003 fd90 	bl	800c614 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008af4:	2300      	movs	r3, #0
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3708      	adds	r7, #8
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}
	...

08008b00 <__NVIC_SetPriority>:
{
 8008b00:	b480      	push	{r7}
 8008b02:	b083      	sub	sp, #12
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	4603      	mov	r3, r0
 8008b08:	6039      	str	r1, [r7, #0]
 8008b0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	db0a      	blt.n	8008b2a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	b2da      	uxtb	r2, r3
 8008b18:	490c      	ldr	r1, [pc, #48]	@ (8008b4c <__NVIC_SetPriority+0x4c>)
 8008b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b1e:	0112      	lsls	r2, r2, #4
 8008b20:	b2d2      	uxtb	r2, r2
 8008b22:	440b      	add	r3, r1
 8008b24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008b28:	e00a      	b.n	8008b40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	b2da      	uxtb	r2, r3
 8008b2e:	4908      	ldr	r1, [pc, #32]	@ (8008b50 <__NVIC_SetPriority+0x50>)
 8008b30:	79fb      	ldrb	r3, [r7, #7]
 8008b32:	f003 030f 	and.w	r3, r3, #15
 8008b36:	3b04      	subs	r3, #4
 8008b38:	0112      	lsls	r2, r2, #4
 8008b3a:	b2d2      	uxtb	r2, r2
 8008b3c:	440b      	add	r3, r1
 8008b3e:	761a      	strb	r2, [r3, #24]
}
 8008b40:	bf00      	nop
 8008b42:	370c      	adds	r7, #12
 8008b44:	46bd      	mov	sp, r7
 8008b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4a:	4770      	bx	lr
 8008b4c:	e000e100 	.word	0xe000e100
 8008b50:	e000ed00 	.word	0xe000ed00

08008b54 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008b54:	b580      	push	{r7, lr}
 8008b56:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008b58:	2100      	movs	r1, #0
 8008b5a:	f06f 0004 	mvn.w	r0, #4
 8008b5e:	f7ff ffcf 	bl	8008b00 <__NVIC_SetPriority>
#endif
}
 8008b62:	bf00      	nop
 8008b64:	bd80      	pop	{r7, pc}
	...

08008b68 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008b68:	b480      	push	{r7}
 8008b6a:	b083      	sub	sp, #12
 8008b6c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b6e:	f3ef 8305 	mrs	r3, IPSR
 8008b72:	603b      	str	r3, [r7, #0]
  return(result);
 8008b74:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d003      	beq.n	8008b82 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008b7a:	f06f 0305 	mvn.w	r3, #5
 8008b7e:	607b      	str	r3, [r7, #4]
 8008b80:	e00c      	b.n	8008b9c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008b82:	4b0a      	ldr	r3, [pc, #40]	@ (8008bac <osKernelInitialize+0x44>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d105      	bne.n	8008b96 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008b8a:	4b08      	ldr	r3, [pc, #32]	@ (8008bac <osKernelInitialize+0x44>)
 8008b8c:	2201      	movs	r2, #1
 8008b8e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008b90:	2300      	movs	r3, #0
 8008b92:	607b      	str	r3, [r7, #4]
 8008b94:	e002      	b.n	8008b9c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008b96:	f04f 33ff 	mov.w	r3, #4294967295
 8008b9a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008b9c:	687b      	ldr	r3, [r7, #4]
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	370c      	adds	r7, #12
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba8:	4770      	bx	lr
 8008baa:	bf00      	nop
 8008bac:	20000590 	.word	0x20000590

08008bb0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b082      	sub	sp, #8
 8008bb4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008bb6:	f3ef 8305 	mrs	r3, IPSR
 8008bba:	603b      	str	r3, [r7, #0]
  return(result);
 8008bbc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d003      	beq.n	8008bca <osKernelStart+0x1a>
    stat = osErrorISR;
 8008bc2:	f06f 0305 	mvn.w	r3, #5
 8008bc6:	607b      	str	r3, [r7, #4]
 8008bc8:	e010      	b.n	8008bec <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008bca:	4b0b      	ldr	r3, [pc, #44]	@ (8008bf8 <osKernelStart+0x48>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	2b01      	cmp	r3, #1
 8008bd0:	d109      	bne.n	8008be6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008bd2:	f7ff ffbf 	bl	8008b54 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008bd6:	4b08      	ldr	r3, [pc, #32]	@ (8008bf8 <osKernelStart+0x48>)
 8008bd8:	2202      	movs	r2, #2
 8008bda:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008bdc:	f001 fa90 	bl	800a100 <vTaskStartScheduler>
      stat = osOK;
 8008be0:	2300      	movs	r3, #0
 8008be2:	607b      	str	r3, [r7, #4]
 8008be4:	e002      	b.n	8008bec <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008be6:	f04f 33ff 	mov.w	r3, #4294967295
 8008bea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008bec:	687b      	ldr	r3, [r7, #4]
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3708      	adds	r7, #8
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}
 8008bf6:	bf00      	nop
 8008bf8:	20000590 	.word	0x20000590

08008bfc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b08e      	sub	sp, #56	@ 0x38
 8008c00:	af04      	add	r7, sp, #16
 8008c02:	60f8      	str	r0, [r7, #12]
 8008c04:	60b9      	str	r1, [r7, #8]
 8008c06:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c0c:	f3ef 8305 	mrs	r3, IPSR
 8008c10:	617b      	str	r3, [r7, #20]
  return(result);
 8008c12:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d17e      	bne.n	8008d16 <osThreadNew+0x11a>
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d07b      	beq.n	8008d16 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008c1e:	2380      	movs	r3, #128	@ 0x80
 8008c20:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008c22:	2318      	movs	r3, #24
 8008c24:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008c26:	2300      	movs	r3, #0
 8008c28:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8008c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8008c2e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d045      	beq.n	8008cc2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d002      	beq.n	8008c44 <osThreadNew+0x48>
        name = attr->name;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	699b      	ldr	r3, [r3, #24]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d002      	beq.n	8008c52 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	699b      	ldr	r3, [r3, #24]
 8008c50:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008c52:	69fb      	ldr	r3, [r7, #28]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d008      	beq.n	8008c6a <osThreadNew+0x6e>
 8008c58:	69fb      	ldr	r3, [r7, #28]
 8008c5a:	2b38      	cmp	r3, #56	@ 0x38
 8008c5c:	d805      	bhi.n	8008c6a <osThreadNew+0x6e>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	685b      	ldr	r3, [r3, #4]
 8008c62:	f003 0301 	and.w	r3, r3, #1
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d001      	beq.n	8008c6e <osThreadNew+0x72>
        return (NULL);
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	e054      	b.n	8008d18 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	695b      	ldr	r3, [r3, #20]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d003      	beq.n	8008c7e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	695b      	ldr	r3, [r3, #20]
 8008c7a:	089b      	lsrs	r3, r3, #2
 8008c7c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	689b      	ldr	r3, [r3, #8]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d00e      	beq.n	8008ca4 <osThreadNew+0xa8>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	68db      	ldr	r3, [r3, #12]
 8008c8a:	2b5b      	cmp	r3, #91	@ 0x5b
 8008c8c:	d90a      	bls.n	8008ca4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d006      	beq.n	8008ca4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	695b      	ldr	r3, [r3, #20]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d002      	beq.n	8008ca4 <osThreadNew+0xa8>
        mem = 1;
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	61bb      	str	r3, [r7, #24]
 8008ca2:	e010      	b.n	8008cc6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d10c      	bne.n	8008cc6 <osThreadNew+0xca>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	68db      	ldr	r3, [r3, #12]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d108      	bne.n	8008cc6 <osThreadNew+0xca>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	691b      	ldr	r3, [r3, #16]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d104      	bne.n	8008cc6 <osThreadNew+0xca>
          mem = 0;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	61bb      	str	r3, [r7, #24]
 8008cc0:	e001      	b.n	8008cc6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008cc6:	69bb      	ldr	r3, [r7, #24]
 8008cc8:	2b01      	cmp	r3, #1
 8008cca:	d110      	bne.n	8008cee <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008cd0:	687a      	ldr	r2, [r7, #4]
 8008cd2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008cd4:	9202      	str	r2, [sp, #8]
 8008cd6:	9301      	str	r3, [sp, #4]
 8008cd8:	69fb      	ldr	r3, [r7, #28]
 8008cda:	9300      	str	r3, [sp, #0]
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	6a3a      	ldr	r2, [r7, #32]
 8008ce0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008ce2:	68f8      	ldr	r0, [r7, #12]
 8008ce4:	f000 ffb0 	bl	8009c48 <xTaskCreateStatic>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	613b      	str	r3, [r7, #16]
 8008cec:	e013      	b.n	8008d16 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008cee:	69bb      	ldr	r3, [r7, #24]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d110      	bne.n	8008d16 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008cf4:	6a3b      	ldr	r3, [r7, #32]
 8008cf6:	b29a      	uxth	r2, r3
 8008cf8:	f107 0310 	add.w	r3, r7, #16
 8008cfc:	9301      	str	r3, [sp, #4]
 8008cfe:	69fb      	ldr	r3, [r7, #28]
 8008d00:	9300      	str	r3, [sp, #0]
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008d06:	68f8      	ldr	r0, [r7, #12]
 8008d08:	f000 fffe 	bl	8009d08 <xTaskCreate>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	2b01      	cmp	r3, #1
 8008d10:	d001      	beq.n	8008d16 <osThreadNew+0x11a>
            hTask = NULL;
 8008d12:	2300      	movs	r3, #0
 8008d14:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008d16:	693b      	ldr	r3, [r7, #16]
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	3728      	adds	r7, #40	@ 0x28
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}

08008d20 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b084      	sub	sp, #16
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d28:	f3ef 8305 	mrs	r3, IPSR
 8008d2c:	60bb      	str	r3, [r7, #8]
  return(result);
 8008d2e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d003      	beq.n	8008d3c <osDelay+0x1c>
    stat = osErrorISR;
 8008d34:	f06f 0305 	mvn.w	r3, #5
 8008d38:	60fb      	str	r3, [r7, #12]
 8008d3a:	e007      	b.n	8008d4c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d002      	beq.n	8008d4c <osDelay+0x2c>
      vTaskDelay(ticks);
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f001 f9a4 	bl	800a094 <vTaskDelay>
    }
  }

  return (stat);
 8008d4c:	68fb      	ldr	r3, [r7, #12]
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3710      	adds	r7, #16
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}
	...

08008d58 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008d58:	b480      	push	{r7}
 8008d5a:	b085      	sub	sp, #20
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	60f8      	str	r0, [r7, #12]
 8008d60:	60b9      	str	r1, [r7, #8]
 8008d62:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	4a07      	ldr	r2, [pc, #28]	@ (8008d84 <vApplicationGetIdleTaskMemory+0x2c>)
 8008d68:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	4a06      	ldr	r2, [pc, #24]	@ (8008d88 <vApplicationGetIdleTaskMemory+0x30>)
 8008d6e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2280      	movs	r2, #128	@ 0x80
 8008d74:	601a      	str	r2, [r3, #0]
}
 8008d76:	bf00      	nop
 8008d78:	3714      	adds	r7, #20
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d80:	4770      	bx	lr
 8008d82:	bf00      	nop
 8008d84:	20000594 	.word	0x20000594
 8008d88:	200005f0 	.word	0x200005f0

08008d8c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008d8c:	b480      	push	{r7}
 8008d8e:	b085      	sub	sp, #20
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	60f8      	str	r0, [r7, #12]
 8008d94:	60b9      	str	r1, [r7, #8]
 8008d96:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	4a07      	ldr	r2, [pc, #28]	@ (8008db8 <vApplicationGetTimerTaskMemory+0x2c>)
 8008d9c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	4a06      	ldr	r2, [pc, #24]	@ (8008dbc <vApplicationGetTimerTaskMemory+0x30>)
 8008da2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008daa:	601a      	str	r2, [r3, #0]
}
 8008dac:	bf00      	nop
 8008dae:	3714      	adds	r7, #20
 8008db0:	46bd      	mov	sp, r7
 8008db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db6:	4770      	bx	lr
 8008db8:	200007f0 	.word	0x200007f0
 8008dbc:	2000084c 	.word	0x2000084c

08008dc0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b083      	sub	sp, #12
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f103 0208 	add.w	r2, r3, #8
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8008dd8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f103 0208 	add.w	r2, r3, #8
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f103 0208 	add.w	r2, r3, #8
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2200      	movs	r2, #0
 8008df2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008df4:	bf00      	nop
 8008df6:	370c      	adds	r7, #12
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfe:	4770      	bx	lr

08008e00 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008e00:	b480      	push	{r7}
 8008e02:	b083      	sub	sp, #12
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008e0e:	bf00      	nop
 8008e10:	370c      	adds	r7, #12
 8008e12:	46bd      	mov	sp, r7
 8008e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e18:	4770      	bx	lr

08008e1a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008e1a:	b480      	push	{r7}
 8008e1c:	b085      	sub	sp, #20
 8008e1e:	af00      	add	r7, sp, #0
 8008e20:	6078      	str	r0, [r7, #4]
 8008e22:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	685b      	ldr	r3, [r3, #4]
 8008e28:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	68fa      	ldr	r2, [r7, #12]
 8008e2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	689a      	ldr	r2, [r3, #8]
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	689b      	ldr	r3, [r3, #8]
 8008e3c:	683a      	ldr	r2, [r7, #0]
 8008e3e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	683a      	ldr	r2, [r7, #0]
 8008e44:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	687a      	ldr	r2, [r7, #4]
 8008e4a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	1c5a      	adds	r2, r3, #1
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	601a      	str	r2, [r3, #0]
}
 8008e56:	bf00      	nop
 8008e58:	3714      	adds	r7, #20
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e60:	4770      	bx	lr

08008e62 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008e62:	b480      	push	{r7}
 8008e64:	b085      	sub	sp, #20
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	6078      	str	r0, [r7, #4]
 8008e6a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e78:	d103      	bne.n	8008e82 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	691b      	ldr	r3, [r3, #16]
 8008e7e:	60fb      	str	r3, [r7, #12]
 8008e80:	e00c      	b.n	8008e9c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	3308      	adds	r3, #8
 8008e86:	60fb      	str	r3, [r7, #12]
 8008e88:	e002      	b.n	8008e90 <vListInsert+0x2e>
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	685b      	ldr	r3, [r3, #4]
 8008e8e:	60fb      	str	r3, [r7, #12]
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	685b      	ldr	r3, [r3, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	68ba      	ldr	r2, [r7, #8]
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	d2f6      	bcs.n	8008e8a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	685a      	ldr	r2, [r3, #4]
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	685b      	ldr	r3, [r3, #4]
 8008ea8:	683a      	ldr	r2, [r7, #0]
 8008eaa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	68fa      	ldr	r2, [r7, #12]
 8008eb0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	683a      	ldr	r2, [r7, #0]
 8008eb6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	687a      	ldr	r2, [r7, #4]
 8008ebc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	1c5a      	adds	r2, r3, #1
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	601a      	str	r2, [r3, #0]
}
 8008ec8:	bf00      	nop
 8008eca:	3714      	adds	r7, #20
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr

08008ed4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b085      	sub	sp, #20
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	691b      	ldr	r3, [r3, #16]
 8008ee0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	685b      	ldr	r3, [r3, #4]
 8008ee6:	687a      	ldr	r2, [r7, #4]
 8008ee8:	6892      	ldr	r2, [r2, #8]
 8008eea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	689b      	ldr	r3, [r3, #8]
 8008ef0:	687a      	ldr	r2, [r7, #4]
 8008ef2:	6852      	ldr	r2, [r2, #4]
 8008ef4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	685b      	ldr	r3, [r3, #4]
 8008efa:	687a      	ldr	r2, [r7, #4]
 8008efc:	429a      	cmp	r2, r3
 8008efe:	d103      	bne.n	8008f08 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	689a      	ldr	r2, [r3, #8]
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	1e5a      	subs	r2, r3, #1
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3714      	adds	r7, #20
 8008f20:	46bd      	mov	sp, r7
 8008f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f26:	4770      	bx	lr

08008f28 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b084      	sub	sp, #16
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
 8008f30:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d10b      	bne.n	8008f54 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008f3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f40:	f383 8811 	msr	BASEPRI, r3
 8008f44:	f3bf 8f6f 	isb	sy
 8008f48:	f3bf 8f4f 	dsb	sy
 8008f4c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008f4e:	bf00      	nop
 8008f50:	bf00      	nop
 8008f52:	e7fd      	b.n	8008f50 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008f54:	f002 fb90 	bl	800b678 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681a      	ldr	r2, [r3, #0]
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f60:	68f9      	ldr	r1, [r7, #12]
 8008f62:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008f64:	fb01 f303 	mul.w	r3, r1, r3
 8008f68:	441a      	add	r2, r3
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	2200      	movs	r2, #0
 8008f72:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681a      	ldr	r2, [r3, #0]
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681a      	ldr	r2, [r3, #0]
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f84:	3b01      	subs	r3, #1
 8008f86:	68f9      	ldr	r1, [r7, #12]
 8008f88:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008f8a:	fb01 f303 	mul.w	r3, r1, r3
 8008f8e:	441a      	add	r2, r3
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	22ff      	movs	r2, #255	@ 0xff
 8008f98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	22ff      	movs	r2, #255	@ 0xff
 8008fa0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d114      	bne.n	8008fd4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	691b      	ldr	r3, [r3, #16]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d01a      	beq.n	8008fe8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	3310      	adds	r3, #16
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f001 fb30 	bl	800a61c <xTaskRemoveFromEventList>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d012      	beq.n	8008fe8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8008ff8 <xQueueGenericReset+0xd0>)
 8008fc4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008fc8:	601a      	str	r2, [r3, #0]
 8008fca:	f3bf 8f4f 	dsb	sy
 8008fce:	f3bf 8f6f 	isb	sy
 8008fd2:	e009      	b.n	8008fe8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	3310      	adds	r3, #16
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f7ff fef1 	bl	8008dc0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	3324      	adds	r3, #36	@ 0x24
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f7ff feec 	bl	8008dc0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008fe8:	f002 fb78 	bl	800b6dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008fec:	2301      	movs	r3, #1
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3710      	adds	r7, #16
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}
 8008ff6:	bf00      	nop
 8008ff8:	e000ed04 	.word	0xe000ed04

08008ffc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b08e      	sub	sp, #56	@ 0x38
 8009000:	af02      	add	r7, sp, #8
 8009002:	60f8      	str	r0, [r7, #12]
 8009004:	60b9      	str	r1, [r7, #8]
 8009006:	607a      	str	r2, [r7, #4]
 8009008:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d10b      	bne.n	8009028 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009014:	f383 8811 	msr	BASEPRI, r3
 8009018:	f3bf 8f6f 	isb	sy
 800901c:	f3bf 8f4f 	dsb	sy
 8009020:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009022:	bf00      	nop
 8009024:	bf00      	nop
 8009026:	e7fd      	b.n	8009024 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d10b      	bne.n	8009046 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800902e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009032:	f383 8811 	msr	BASEPRI, r3
 8009036:	f3bf 8f6f 	isb	sy
 800903a:	f3bf 8f4f 	dsb	sy
 800903e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009040:	bf00      	nop
 8009042:	bf00      	nop
 8009044:	e7fd      	b.n	8009042 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d002      	beq.n	8009052 <xQueueGenericCreateStatic+0x56>
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d001      	beq.n	8009056 <xQueueGenericCreateStatic+0x5a>
 8009052:	2301      	movs	r3, #1
 8009054:	e000      	b.n	8009058 <xQueueGenericCreateStatic+0x5c>
 8009056:	2300      	movs	r3, #0
 8009058:	2b00      	cmp	r3, #0
 800905a:	d10b      	bne.n	8009074 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800905c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009060:	f383 8811 	msr	BASEPRI, r3
 8009064:	f3bf 8f6f 	isb	sy
 8009068:	f3bf 8f4f 	dsb	sy
 800906c:	623b      	str	r3, [r7, #32]
}
 800906e:	bf00      	nop
 8009070:	bf00      	nop
 8009072:	e7fd      	b.n	8009070 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d102      	bne.n	8009080 <xQueueGenericCreateStatic+0x84>
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d101      	bne.n	8009084 <xQueueGenericCreateStatic+0x88>
 8009080:	2301      	movs	r3, #1
 8009082:	e000      	b.n	8009086 <xQueueGenericCreateStatic+0x8a>
 8009084:	2300      	movs	r3, #0
 8009086:	2b00      	cmp	r3, #0
 8009088:	d10b      	bne.n	80090a2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800908a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800908e:	f383 8811 	msr	BASEPRI, r3
 8009092:	f3bf 8f6f 	isb	sy
 8009096:	f3bf 8f4f 	dsb	sy
 800909a:	61fb      	str	r3, [r7, #28]
}
 800909c:	bf00      	nop
 800909e:	bf00      	nop
 80090a0:	e7fd      	b.n	800909e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80090a2:	2350      	movs	r3, #80	@ 0x50
 80090a4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	2b50      	cmp	r3, #80	@ 0x50
 80090aa:	d00b      	beq.n	80090c4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80090ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090b0:	f383 8811 	msr	BASEPRI, r3
 80090b4:	f3bf 8f6f 	isb	sy
 80090b8:	f3bf 8f4f 	dsb	sy
 80090bc:	61bb      	str	r3, [r7, #24]
}
 80090be:	bf00      	nop
 80090c0:	bf00      	nop
 80090c2:	e7fd      	b.n	80090c0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80090c4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80090ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d00d      	beq.n	80090ec <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80090d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090d2:	2201      	movs	r2, #1
 80090d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80090d8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80090dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090de:	9300      	str	r3, [sp, #0]
 80090e0:	4613      	mov	r3, r2
 80090e2:	687a      	ldr	r2, [r7, #4]
 80090e4:	68b9      	ldr	r1, [r7, #8]
 80090e6:	68f8      	ldr	r0, [r7, #12]
 80090e8:	f000 f840 	bl	800916c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80090ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3730      	adds	r7, #48	@ 0x30
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}

080090f6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80090f6:	b580      	push	{r7, lr}
 80090f8:	b08a      	sub	sp, #40	@ 0x28
 80090fa:	af02      	add	r7, sp, #8
 80090fc:	60f8      	str	r0, [r7, #12]
 80090fe:	60b9      	str	r1, [r7, #8]
 8009100:	4613      	mov	r3, r2
 8009102:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d10b      	bne.n	8009122 <xQueueGenericCreate+0x2c>
	__asm volatile
 800910a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800910e:	f383 8811 	msr	BASEPRI, r3
 8009112:	f3bf 8f6f 	isb	sy
 8009116:	f3bf 8f4f 	dsb	sy
 800911a:	613b      	str	r3, [r7, #16]
}
 800911c:	bf00      	nop
 800911e:	bf00      	nop
 8009120:	e7fd      	b.n	800911e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	68ba      	ldr	r2, [r7, #8]
 8009126:	fb02 f303 	mul.w	r3, r2, r3
 800912a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800912c:	69fb      	ldr	r3, [r7, #28]
 800912e:	3350      	adds	r3, #80	@ 0x50
 8009130:	4618      	mov	r0, r3
 8009132:	f002 fbc3 	bl	800b8bc <pvPortMalloc>
 8009136:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009138:	69bb      	ldr	r3, [r7, #24]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d011      	beq.n	8009162 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800913e:	69bb      	ldr	r3, [r7, #24]
 8009140:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	3350      	adds	r3, #80	@ 0x50
 8009146:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009148:	69bb      	ldr	r3, [r7, #24]
 800914a:	2200      	movs	r2, #0
 800914c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009150:	79fa      	ldrb	r2, [r7, #7]
 8009152:	69bb      	ldr	r3, [r7, #24]
 8009154:	9300      	str	r3, [sp, #0]
 8009156:	4613      	mov	r3, r2
 8009158:	697a      	ldr	r2, [r7, #20]
 800915a:	68b9      	ldr	r1, [r7, #8]
 800915c:	68f8      	ldr	r0, [r7, #12]
 800915e:	f000 f805 	bl	800916c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009162:	69bb      	ldr	r3, [r7, #24]
	}
 8009164:	4618      	mov	r0, r3
 8009166:	3720      	adds	r7, #32
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}

0800916c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b084      	sub	sp, #16
 8009170:	af00      	add	r7, sp, #0
 8009172:	60f8      	str	r0, [r7, #12]
 8009174:	60b9      	str	r1, [r7, #8]
 8009176:	607a      	str	r2, [r7, #4]
 8009178:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d103      	bne.n	8009188 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009180:	69bb      	ldr	r3, [r7, #24]
 8009182:	69ba      	ldr	r2, [r7, #24]
 8009184:	601a      	str	r2, [r3, #0]
 8009186:	e002      	b.n	800918e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009188:	69bb      	ldr	r3, [r7, #24]
 800918a:	687a      	ldr	r2, [r7, #4]
 800918c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800918e:	69bb      	ldr	r3, [r7, #24]
 8009190:	68fa      	ldr	r2, [r7, #12]
 8009192:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009194:	69bb      	ldr	r3, [r7, #24]
 8009196:	68ba      	ldr	r2, [r7, #8]
 8009198:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800919a:	2101      	movs	r1, #1
 800919c:	69b8      	ldr	r0, [r7, #24]
 800919e:	f7ff fec3 	bl	8008f28 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80091a2:	69bb      	ldr	r3, [r7, #24]
 80091a4:	78fa      	ldrb	r2, [r7, #3]
 80091a6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80091aa:	bf00      	nop
 80091ac:	3710      	adds	r7, #16
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}

080091b2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80091b2:	b580      	push	{r7, lr}
 80091b4:	b082      	sub	sp, #8
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d00e      	beq.n	80091de <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2200      	movs	r2, #0
 80091c4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2200      	movs	r2, #0
 80091ca:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2200      	movs	r2, #0
 80091d0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80091d2:	2300      	movs	r3, #0
 80091d4:	2200      	movs	r2, #0
 80091d6:	2100      	movs	r1, #0
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f000 f81d 	bl	8009218 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80091de:	bf00      	nop
 80091e0:	3708      	adds	r7, #8
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}

080091e6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80091e6:	b580      	push	{r7, lr}
 80091e8:	b086      	sub	sp, #24
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	4603      	mov	r3, r0
 80091ee:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80091f0:	2301      	movs	r3, #1
 80091f2:	617b      	str	r3, [r7, #20]
 80091f4:	2300      	movs	r3, #0
 80091f6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80091f8:	79fb      	ldrb	r3, [r7, #7]
 80091fa:	461a      	mov	r2, r3
 80091fc:	6939      	ldr	r1, [r7, #16]
 80091fe:	6978      	ldr	r0, [r7, #20]
 8009200:	f7ff ff79 	bl	80090f6 <xQueueGenericCreate>
 8009204:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009206:	68f8      	ldr	r0, [r7, #12]
 8009208:	f7ff ffd3 	bl	80091b2 <prvInitialiseMutex>

		return xNewQueue;
 800920c:	68fb      	ldr	r3, [r7, #12]
	}
 800920e:	4618      	mov	r0, r3
 8009210:	3718      	adds	r7, #24
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}
	...

08009218 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b08e      	sub	sp, #56	@ 0x38
 800921c:	af00      	add	r7, sp, #0
 800921e:	60f8      	str	r0, [r7, #12]
 8009220:	60b9      	str	r1, [r7, #8]
 8009222:	607a      	str	r2, [r7, #4]
 8009224:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009226:	2300      	movs	r3, #0
 8009228:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800922e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009230:	2b00      	cmp	r3, #0
 8009232:	d10b      	bne.n	800924c <xQueueGenericSend+0x34>
	__asm volatile
 8009234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009238:	f383 8811 	msr	BASEPRI, r3
 800923c:	f3bf 8f6f 	isb	sy
 8009240:	f3bf 8f4f 	dsb	sy
 8009244:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009246:	bf00      	nop
 8009248:	bf00      	nop
 800924a:	e7fd      	b.n	8009248 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d103      	bne.n	800925a <xQueueGenericSend+0x42>
 8009252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009256:	2b00      	cmp	r3, #0
 8009258:	d101      	bne.n	800925e <xQueueGenericSend+0x46>
 800925a:	2301      	movs	r3, #1
 800925c:	e000      	b.n	8009260 <xQueueGenericSend+0x48>
 800925e:	2300      	movs	r3, #0
 8009260:	2b00      	cmp	r3, #0
 8009262:	d10b      	bne.n	800927c <xQueueGenericSend+0x64>
	__asm volatile
 8009264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009268:	f383 8811 	msr	BASEPRI, r3
 800926c:	f3bf 8f6f 	isb	sy
 8009270:	f3bf 8f4f 	dsb	sy
 8009274:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009276:	bf00      	nop
 8009278:	bf00      	nop
 800927a:	e7fd      	b.n	8009278 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	2b02      	cmp	r3, #2
 8009280:	d103      	bne.n	800928a <xQueueGenericSend+0x72>
 8009282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009284:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009286:	2b01      	cmp	r3, #1
 8009288:	d101      	bne.n	800928e <xQueueGenericSend+0x76>
 800928a:	2301      	movs	r3, #1
 800928c:	e000      	b.n	8009290 <xQueueGenericSend+0x78>
 800928e:	2300      	movs	r3, #0
 8009290:	2b00      	cmp	r3, #0
 8009292:	d10b      	bne.n	80092ac <xQueueGenericSend+0x94>
	__asm volatile
 8009294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009298:	f383 8811 	msr	BASEPRI, r3
 800929c:	f3bf 8f6f 	isb	sy
 80092a0:	f3bf 8f4f 	dsb	sy
 80092a4:	623b      	str	r3, [r7, #32]
}
 80092a6:	bf00      	nop
 80092a8:	bf00      	nop
 80092aa:	e7fd      	b.n	80092a8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80092ac:	f001 fb76 	bl	800a99c <xTaskGetSchedulerState>
 80092b0:	4603      	mov	r3, r0
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d102      	bne.n	80092bc <xQueueGenericSend+0xa4>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d101      	bne.n	80092c0 <xQueueGenericSend+0xa8>
 80092bc:	2301      	movs	r3, #1
 80092be:	e000      	b.n	80092c2 <xQueueGenericSend+0xaa>
 80092c0:	2300      	movs	r3, #0
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d10b      	bne.n	80092de <xQueueGenericSend+0xc6>
	__asm volatile
 80092c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092ca:	f383 8811 	msr	BASEPRI, r3
 80092ce:	f3bf 8f6f 	isb	sy
 80092d2:	f3bf 8f4f 	dsb	sy
 80092d6:	61fb      	str	r3, [r7, #28]
}
 80092d8:	bf00      	nop
 80092da:	bf00      	nop
 80092dc:	e7fd      	b.n	80092da <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80092de:	f002 f9cb 	bl	800b678 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80092e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80092e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092ea:	429a      	cmp	r2, r3
 80092ec:	d302      	bcc.n	80092f4 <xQueueGenericSend+0xdc>
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	2b02      	cmp	r3, #2
 80092f2:	d129      	bne.n	8009348 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80092f4:	683a      	ldr	r2, [r7, #0]
 80092f6:	68b9      	ldr	r1, [r7, #8]
 80092f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80092fa:	f000 fb37 	bl	800996c <prvCopyDataToQueue>
 80092fe:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009304:	2b00      	cmp	r3, #0
 8009306:	d010      	beq.n	800932a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800930a:	3324      	adds	r3, #36	@ 0x24
 800930c:	4618      	mov	r0, r3
 800930e:	f001 f985 	bl	800a61c <xTaskRemoveFromEventList>
 8009312:	4603      	mov	r3, r0
 8009314:	2b00      	cmp	r3, #0
 8009316:	d013      	beq.n	8009340 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009318:	4b3f      	ldr	r3, [pc, #252]	@ (8009418 <xQueueGenericSend+0x200>)
 800931a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800931e:	601a      	str	r2, [r3, #0]
 8009320:	f3bf 8f4f 	dsb	sy
 8009324:	f3bf 8f6f 	isb	sy
 8009328:	e00a      	b.n	8009340 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800932a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800932c:	2b00      	cmp	r3, #0
 800932e:	d007      	beq.n	8009340 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009330:	4b39      	ldr	r3, [pc, #228]	@ (8009418 <xQueueGenericSend+0x200>)
 8009332:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009336:	601a      	str	r2, [r3, #0]
 8009338:	f3bf 8f4f 	dsb	sy
 800933c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009340:	f002 f9cc 	bl	800b6dc <vPortExitCritical>
				return pdPASS;
 8009344:	2301      	movs	r3, #1
 8009346:	e063      	b.n	8009410 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d103      	bne.n	8009356 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800934e:	f002 f9c5 	bl	800b6dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009352:	2300      	movs	r3, #0
 8009354:	e05c      	b.n	8009410 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009356:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009358:	2b00      	cmp	r3, #0
 800935a:	d106      	bne.n	800936a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800935c:	f107 0314 	add.w	r3, r7, #20
 8009360:	4618      	mov	r0, r3
 8009362:	f001 f9bf 	bl	800a6e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009366:	2301      	movs	r3, #1
 8009368:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800936a:	f002 f9b7 	bl	800b6dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800936e:	f000 ff2f 	bl	800a1d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009372:	f002 f981 	bl	800b678 <vPortEnterCritical>
 8009376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009378:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800937c:	b25b      	sxtb	r3, r3
 800937e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009382:	d103      	bne.n	800938c <xQueueGenericSend+0x174>
 8009384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009386:	2200      	movs	r2, #0
 8009388:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800938c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800938e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009392:	b25b      	sxtb	r3, r3
 8009394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009398:	d103      	bne.n	80093a2 <xQueueGenericSend+0x18a>
 800939a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800939c:	2200      	movs	r2, #0
 800939e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80093a2:	f002 f99b 	bl	800b6dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80093a6:	1d3a      	adds	r2, r7, #4
 80093a8:	f107 0314 	add.w	r3, r7, #20
 80093ac:	4611      	mov	r1, r2
 80093ae:	4618      	mov	r0, r3
 80093b0:	f001 f9ae 	bl	800a710 <xTaskCheckForTimeOut>
 80093b4:	4603      	mov	r3, r0
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d124      	bne.n	8009404 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80093ba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80093bc:	f000 fbce 	bl	8009b5c <prvIsQueueFull>
 80093c0:	4603      	mov	r3, r0
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d018      	beq.n	80093f8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80093c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093c8:	3310      	adds	r3, #16
 80093ca:	687a      	ldr	r2, [r7, #4]
 80093cc:	4611      	mov	r1, r2
 80093ce:	4618      	mov	r0, r3
 80093d0:	f001 f8d2 	bl	800a578 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80093d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80093d6:	f000 fb59 	bl	8009a8c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80093da:	f000 ff07 	bl	800a1ec <xTaskResumeAll>
 80093de:	4603      	mov	r3, r0
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	f47f af7c 	bne.w	80092de <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80093e6:	4b0c      	ldr	r3, [pc, #48]	@ (8009418 <xQueueGenericSend+0x200>)
 80093e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80093ec:	601a      	str	r2, [r3, #0]
 80093ee:	f3bf 8f4f 	dsb	sy
 80093f2:	f3bf 8f6f 	isb	sy
 80093f6:	e772      	b.n	80092de <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80093f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80093fa:	f000 fb47 	bl	8009a8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80093fe:	f000 fef5 	bl	800a1ec <xTaskResumeAll>
 8009402:	e76c      	b.n	80092de <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009404:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009406:	f000 fb41 	bl	8009a8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800940a:	f000 feef 	bl	800a1ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800940e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009410:	4618      	mov	r0, r3
 8009412:	3738      	adds	r7, #56	@ 0x38
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}
 8009418:	e000ed04 	.word	0xe000ed04

0800941c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b090      	sub	sp, #64	@ 0x40
 8009420:	af00      	add	r7, sp, #0
 8009422:	60f8      	str	r0, [r7, #12]
 8009424:	60b9      	str	r1, [r7, #8]
 8009426:	607a      	str	r2, [r7, #4]
 8009428:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800942e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009430:	2b00      	cmp	r3, #0
 8009432:	d10b      	bne.n	800944c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8009434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009438:	f383 8811 	msr	BASEPRI, r3
 800943c:	f3bf 8f6f 	isb	sy
 8009440:	f3bf 8f4f 	dsb	sy
 8009444:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009446:	bf00      	nop
 8009448:	bf00      	nop
 800944a:	e7fd      	b.n	8009448 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d103      	bne.n	800945a <xQueueGenericSendFromISR+0x3e>
 8009452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009456:	2b00      	cmp	r3, #0
 8009458:	d101      	bne.n	800945e <xQueueGenericSendFromISR+0x42>
 800945a:	2301      	movs	r3, #1
 800945c:	e000      	b.n	8009460 <xQueueGenericSendFromISR+0x44>
 800945e:	2300      	movs	r3, #0
 8009460:	2b00      	cmp	r3, #0
 8009462:	d10b      	bne.n	800947c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8009464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009468:	f383 8811 	msr	BASEPRI, r3
 800946c:	f3bf 8f6f 	isb	sy
 8009470:	f3bf 8f4f 	dsb	sy
 8009474:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009476:	bf00      	nop
 8009478:	bf00      	nop
 800947a:	e7fd      	b.n	8009478 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	2b02      	cmp	r3, #2
 8009480:	d103      	bne.n	800948a <xQueueGenericSendFromISR+0x6e>
 8009482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009484:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009486:	2b01      	cmp	r3, #1
 8009488:	d101      	bne.n	800948e <xQueueGenericSendFromISR+0x72>
 800948a:	2301      	movs	r3, #1
 800948c:	e000      	b.n	8009490 <xQueueGenericSendFromISR+0x74>
 800948e:	2300      	movs	r3, #0
 8009490:	2b00      	cmp	r3, #0
 8009492:	d10b      	bne.n	80094ac <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8009494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009498:	f383 8811 	msr	BASEPRI, r3
 800949c:	f3bf 8f6f 	isb	sy
 80094a0:	f3bf 8f4f 	dsb	sy
 80094a4:	623b      	str	r3, [r7, #32]
}
 80094a6:	bf00      	nop
 80094a8:	bf00      	nop
 80094aa:	e7fd      	b.n	80094a8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80094ac:	f002 f9c4 	bl	800b838 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80094b0:	f3ef 8211 	mrs	r2, BASEPRI
 80094b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094b8:	f383 8811 	msr	BASEPRI, r3
 80094bc:	f3bf 8f6f 	isb	sy
 80094c0:	f3bf 8f4f 	dsb	sy
 80094c4:	61fa      	str	r2, [r7, #28]
 80094c6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80094c8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80094ca:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80094cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80094d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094d4:	429a      	cmp	r2, r3
 80094d6:	d302      	bcc.n	80094de <xQueueGenericSendFromISR+0xc2>
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	2b02      	cmp	r3, #2
 80094dc:	d12f      	bne.n	800953e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80094de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094e0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80094e4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80094e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80094ee:	683a      	ldr	r2, [r7, #0]
 80094f0:	68b9      	ldr	r1, [r7, #8]
 80094f2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80094f4:	f000 fa3a 	bl	800996c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80094f8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80094fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009500:	d112      	bne.n	8009528 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009506:	2b00      	cmp	r3, #0
 8009508:	d016      	beq.n	8009538 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800950a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800950c:	3324      	adds	r3, #36	@ 0x24
 800950e:	4618      	mov	r0, r3
 8009510:	f001 f884 	bl	800a61c <xTaskRemoveFromEventList>
 8009514:	4603      	mov	r3, r0
 8009516:	2b00      	cmp	r3, #0
 8009518:	d00e      	beq.n	8009538 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d00b      	beq.n	8009538 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2201      	movs	r2, #1
 8009524:	601a      	str	r2, [r3, #0]
 8009526:	e007      	b.n	8009538 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009528:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800952c:	3301      	adds	r3, #1
 800952e:	b2db      	uxtb	r3, r3
 8009530:	b25a      	sxtb	r2, r3
 8009532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009534:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009538:	2301      	movs	r3, #1
 800953a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800953c:	e001      	b.n	8009542 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800953e:	2300      	movs	r3, #0
 8009540:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009542:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009544:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800954c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800954e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009550:	4618      	mov	r0, r3
 8009552:	3740      	adds	r7, #64	@ 0x40
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}

08009558 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b08c      	sub	sp, #48	@ 0x30
 800955c:	af00      	add	r7, sp, #0
 800955e:	60f8      	str	r0, [r7, #12]
 8009560:	60b9      	str	r1, [r7, #8]
 8009562:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009564:	2300      	movs	r3, #0
 8009566:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800956c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800956e:	2b00      	cmp	r3, #0
 8009570:	d10b      	bne.n	800958a <xQueueReceive+0x32>
	__asm volatile
 8009572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009576:	f383 8811 	msr	BASEPRI, r3
 800957a:	f3bf 8f6f 	isb	sy
 800957e:	f3bf 8f4f 	dsb	sy
 8009582:	623b      	str	r3, [r7, #32]
}
 8009584:	bf00      	nop
 8009586:	bf00      	nop
 8009588:	e7fd      	b.n	8009586 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d103      	bne.n	8009598 <xQueueReceive+0x40>
 8009590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009594:	2b00      	cmp	r3, #0
 8009596:	d101      	bne.n	800959c <xQueueReceive+0x44>
 8009598:	2301      	movs	r3, #1
 800959a:	e000      	b.n	800959e <xQueueReceive+0x46>
 800959c:	2300      	movs	r3, #0
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d10b      	bne.n	80095ba <xQueueReceive+0x62>
	__asm volatile
 80095a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095a6:	f383 8811 	msr	BASEPRI, r3
 80095aa:	f3bf 8f6f 	isb	sy
 80095ae:	f3bf 8f4f 	dsb	sy
 80095b2:	61fb      	str	r3, [r7, #28]
}
 80095b4:	bf00      	nop
 80095b6:	bf00      	nop
 80095b8:	e7fd      	b.n	80095b6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80095ba:	f001 f9ef 	bl	800a99c <xTaskGetSchedulerState>
 80095be:	4603      	mov	r3, r0
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d102      	bne.n	80095ca <xQueueReceive+0x72>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d101      	bne.n	80095ce <xQueueReceive+0x76>
 80095ca:	2301      	movs	r3, #1
 80095cc:	e000      	b.n	80095d0 <xQueueReceive+0x78>
 80095ce:	2300      	movs	r3, #0
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d10b      	bne.n	80095ec <xQueueReceive+0x94>
	__asm volatile
 80095d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095d8:	f383 8811 	msr	BASEPRI, r3
 80095dc:	f3bf 8f6f 	isb	sy
 80095e0:	f3bf 8f4f 	dsb	sy
 80095e4:	61bb      	str	r3, [r7, #24]
}
 80095e6:	bf00      	nop
 80095e8:	bf00      	nop
 80095ea:	e7fd      	b.n	80095e8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80095ec:	f002 f844 	bl	800b678 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80095f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095f4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80095f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d01f      	beq.n	800963c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80095fc:	68b9      	ldr	r1, [r7, #8]
 80095fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009600:	f000 fa1e 	bl	8009a40 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009606:	1e5a      	subs	r2, r3, #1
 8009608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800960a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800960c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800960e:	691b      	ldr	r3, [r3, #16]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d00f      	beq.n	8009634 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009616:	3310      	adds	r3, #16
 8009618:	4618      	mov	r0, r3
 800961a:	f000 ffff 	bl	800a61c <xTaskRemoveFromEventList>
 800961e:	4603      	mov	r3, r0
 8009620:	2b00      	cmp	r3, #0
 8009622:	d007      	beq.n	8009634 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009624:	4b3c      	ldr	r3, [pc, #240]	@ (8009718 <xQueueReceive+0x1c0>)
 8009626:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800962a:	601a      	str	r2, [r3, #0]
 800962c:	f3bf 8f4f 	dsb	sy
 8009630:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009634:	f002 f852 	bl	800b6dc <vPortExitCritical>
				return pdPASS;
 8009638:	2301      	movs	r3, #1
 800963a:	e069      	b.n	8009710 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d103      	bne.n	800964a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009642:	f002 f84b 	bl	800b6dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009646:	2300      	movs	r3, #0
 8009648:	e062      	b.n	8009710 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800964a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800964c:	2b00      	cmp	r3, #0
 800964e:	d106      	bne.n	800965e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009650:	f107 0310 	add.w	r3, r7, #16
 8009654:	4618      	mov	r0, r3
 8009656:	f001 f845 	bl	800a6e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800965a:	2301      	movs	r3, #1
 800965c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800965e:	f002 f83d 	bl	800b6dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009662:	f000 fdb5 	bl	800a1d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009666:	f002 f807 	bl	800b678 <vPortEnterCritical>
 800966a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800966c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009670:	b25b      	sxtb	r3, r3
 8009672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009676:	d103      	bne.n	8009680 <xQueueReceive+0x128>
 8009678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800967a:	2200      	movs	r2, #0
 800967c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009682:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009686:	b25b      	sxtb	r3, r3
 8009688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800968c:	d103      	bne.n	8009696 <xQueueReceive+0x13e>
 800968e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009690:	2200      	movs	r2, #0
 8009692:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009696:	f002 f821 	bl	800b6dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800969a:	1d3a      	adds	r2, r7, #4
 800969c:	f107 0310 	add.w	r3, r7, #16
 80096a0:	4611      	mov	r1, r2
 80096a2:	4618      	mov	r0, r3
 80096a4:	f001 f834 	bl	800a710 <xTaskCheckForTimeOut>
 80096a8:	4603      	mov	r3, r0
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d123      	bne.n	80096f6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80096ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80096b0:	f000 fa3e 	bl	8009b30 <prvIsQueueEmpty>
 80096b4:	4603      	mov	r3, r0
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d017      	beq.n	80096ea <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80096ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096bc:	3324      	adds	r3, #36	@ 0x24
 80096be:	687a      	ldr	r2, [r7, #4]
 80096c0:	4611      	mov	r1, r2
 80096c2:	4618      	mov	r0, r3
 80096c4:	f000 ff58 	bl	800a578 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80096c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80096ca:	f000 f9df 	bl	8009a8c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80096ce:	f000 fd8d 	bl	800a1ec <xTaskResumeAll>
 80096d2:	4603      	mov	r3, r0
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d189      	bne.n	80095ec <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80096d8:	4b0f      	ldr	r3, [pc, #60]	@ (8009718 <xQueueReceive+0x1c0>)
 80096da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80096de:	601a      	str	r2, [r3, #0]
 80096e0:	f3bf 8f4f 	dsb	sy
 80096e4:	f3bf 8f6f 	isb	sy
 80096e8:	e780      	b.n	80095ec <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80096ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80096ec:	f000 f9ce 	bl	8009a8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80096f0:	f000 fd7c 	bl	800a1ec <xTaskResumeAll>
 80096f4:	e77a      	b.n	80095ec <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80096f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80096f8:	f000 f9c8 	bl	8009a8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80096fc:	f000 fd76 	bl	800a1ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009700:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009702:	f000 fa15 	bl	8009b30 <prvIsQueueEmpty>
 8009706:	4603      	mov	r3, r0
 8009708:	2b00      	cmp	r3, #0
 800970a:	f43f af6f 	beq.w	80095ec <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800970e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009710:	4618      	mov	r0, r3
 8009712:	3730      	adds	r7, #48	@ 0x30
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}
 8009718:	e000ed04 	.word	0xe000ed04

0800971c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b08e      	sub	sp, #56	@ 0x38
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
 8009724:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009726:	2300      	movs	r3, #0
 8009728:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800972e:	2300      	movs	r3, #0
 8009730:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009734:	2b00      	cmp	r3, #0
 8009736:	d10b      	bne.n	8009750 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8009738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800973c:	f383 8811 	msr	BASEPRI, r3
 8009740:	f3bf 8f6f 	isb	sy
 8009744:	f3bf 8f4f 	dsb	sy
 8009748:	623b      	str	r3, [r7, #32]
}
 800974a:	bf00      	nop
 800974c:	bf00      	nop
 800974e:	e7fd      	b.n	800974c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009754:	2b00      	cmp	r3, #0
 8009756:	d00b      	beq.n	8009770 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8009758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800975c:	f383 8811 	msr	BASEPRI, r3
 8009760:	f3bf 8f6f 	isb	sy
 8009764:	f3bf 8f4f 	dsb	sy
 8009768:	61fb      	str	r3, [r7, #28]
}
 800976a:	bf00      	nop
 800976c:	bf00      	nop
 800976e:	e7fd      	b.n	800976c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009770:	f001 f914 	bl	800a99c <xTaskGetSchedulerState>
 8009774:	4603      	mov	r3, r0
 8009776:	2b00      	cmp	r3, #0
 8009778:	d102      	bne.n	8009780 <xQueueSemaphoreTake+0x64>
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d101      	bne.n	8009784 <xQueueSemaphoreTake+0x68>
 8009780:	2301      	movs	r3, #1
 8009782:	e000      	b.n	8009786 <xQueueSemaphoreTake+0x6a>
 8009784:	2300      	movs	r3, #0
 8009786:	2b00      	cmp	r3, #0
 8009788:	d10b      	bne.n	80097a2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800978a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800978e:	f383 8811 	msr	BASEPRI, r3
 8009792:	f3bf 8f6f 	isb	sy
 8009796:	f3bf 8f4f 	dsb	sy
 800979a:	61bb      	str	r3, [r7, #24]
}
 800979c:	bf00      	nop
 800979e:	bf00      	nop
 80097a0:	e7fd      	b.n	800979e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80097a2:	f001 ff69 	bl	800b678 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80097a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097aa:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80097ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d024      	beq.n	80097fc <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80097b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097b4:	1e5a      	subs	r2, r3, #1
 80097b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097b8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80097ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d104      	bne.n	80097cc <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80097c2:	f001 fa65 	bl	800ac90 <pvTaskIncrementMutexHeldCount>
 80097c6:	4602      	mov	r2, r0
 80097c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097ca:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80097cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097ce:	691b      	ldr	r3, [r3, #16]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d00f      	beq.n	80097f4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80097d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097d6:	3310      	adds	r3, #16
 80097d8:	4618      	mov	r0, r3
 80097da:	f000 ff1f 	bl	800a61c <xTaskRemoveFromEventList>
 80097de:	4603      	mov	r3, r0
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d007      	beq.n	80097f4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80097e4:	4b54      	ldr	r3, [pc, #336]	@ (8009938 <xQueueSemaphoreTake+0x21c>)
 80097e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80097ea:	601a      	str	r2, [r3, #0]
 80097ec:	f3bf 8f4f 	dsb	sy
 80097f0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80097f4:	f001 ff72 	bl	800b6dc <vPortExitCritical>
				return pdPASS;
 80097f8:	2301      	movs	r3, #1
 80097fa:	e098      	b.n	800992e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d112      	bne.n	8009828 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009804:	2b00      	cmp	r3, #0
 8009806:	d00b      	beq.n	8009820 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8009808:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800980c:	f383 8811 	msr	BASEPRI, r3
 8009810:	f3bf 8f6f 	isb	sy
 8009814:	f3bf 8f4f 	dsb	sy
 8009818:	617b      	str	r3, [r7, #20]
}
 800981a:	bf00      	nop
 800981c:	bf00      	nop
 800981e:	e7fd      	b.n	800981c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009820:	f001 ff5c 	bl	800b6dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009824:	2300      	movs	r3, #0
 8009826:	e082      	b.n	800992e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009828:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800982a:	2b00      	cmp	r3, #0
 800982c:	d106      	bne.n	800983c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800982e:	f107 030c 	add.w	r3, r7, #12
 8009832:	4618      	mov	r0, r3
 8009834:	f000 ff56 	bl	800a6e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009838:	2301      	movs	r3, #1
 800983a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800983c:	f001 ff4e 	bl	800b6dc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009840:	f000 fcc6 	bl	800a1d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009844:	f001 ff18 	bl	800b678 <vPortEnterCritical>
 8009848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800984a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800984e:	b25b      	sxtb	r3, r3
 8009850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009854:	d103      	bne.n	800985e <xQueueSemaphoreTake+0x142>
 8009856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009858:	2200      	movs	r2, #0
 800985a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800985e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009860:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009864:	b25b      	sxtb	r3, r3
 8009866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800986a:	d103      	bne.n	8009874 <xQueueSemaphoreTake+0x158>
 800986c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800986e:	2200      	movs	r2, #0
 8009870:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009874:	f001 ff32 	bl	800b6dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009878:	463a      	mov	r2, r7
 800987a:	f107 030c 	add.w	r3, r7, #12
 800987e:	4611      	mov	r1, r2
 8009880:	4618      	mov	r0, r3
 8009882:	f000 ff45 	bl	800a710 <xTaskCheckForTimeOut>
 8009886:	4603      	mov	r3, r0
 8009888:	2b00      	cmp	r3, #0
 800988a:	d132      	bne.n	80098f2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800988c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800988e:	f000 f94f 	bl	8009b30 <prvIsQueueEmpty>
 8009892:	4603      	mov	r3, r0
 8009894:	2b00      	cmp	r3, #0
 8009896:	d026      	beq.n	80098e6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d109      	bne.n	80098b4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80098a0:	f001 feea 	bl	800b678 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80098a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098a6:	689b      	ldr	r3, [r3, #8]
 80098a8:	4618      	mov	r0, r3
 80098aa:	f001 f895 	bl	800a9d8 <xTaskPriorityInherit>
 80098ae:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80098b0:	f001 ff14 	bl	800b6dc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80098b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098b6:	3324      	adds	r3, #36	@ 0x24
 80098b8:	683a      	ldr	r2, [r7, #0]
 80098ba:	4611      	mov	r1, r2
 80098bc:	4618      	mov	r0, r3
 80098be:	f000 fe5b 	bl	800a578 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80098c2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80098c4:	f000 f8e2 	bl	8009a8c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80098c8:	f000 fc90 	bl	800a1ec <xTaskResumeAll>
 80098cc:	4603      	mov	r3, r0
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	f47f af67 	bne.w	80097a2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80098d4:	4b18      	ldr	r3, [pc, #96]	@ (8009938 <xQueueSemaphoreTake+0x21c>)
 80098d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80098da:	601a      	str	r2, [r3, #0]
 80098dc:	f3bf 8f4f 	dsb	sy
 80098e0:	f3bf 8f6f 	isb	sy
 80098e4:	e75d      	b.n	80097a2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80098e6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80098e8:	f000 f8d0 	bl	8009a8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80098ec:	f000 fc7e 	bl	800a1ec <xTaskResumeAll>
 80098f0:	e757      	b.n	80097a2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80098f2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80098f4:	f000 f8ca 	bl	8009a8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80098f8:	f000 fc78 	bl	800a1ec <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80098fc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80098fe:	f000 f917 	bl	8009b30 <prvIsQueueEmpty>
 8009902:	4603      	mov	r3, r0
 8009904:	2b00      	cmp	r3, #0
 8009906:	f43f af4c 	beq.w	80097a2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800990a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800990c:	2b00      	cmp	r3, #0
 800990e:	d00d      	beq.n	800992c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8009910:	f001 feb2 	bl	800b678 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009914:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009916:	f000 f811 	bl	800993c <prvGetDisinheritPriorityAfterTimeout>
 800991a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800991c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800991e:	689b      	ldr	r3, [r3, #8]
 8009920:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009922:	4618      	mov	r0, r3
 8009924:	f001 f930 	bl	800ab88 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009928:	f001 fed8 	bl	800b6dc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800992c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800992e:	4618      	mov	r0, r3
 8009930:	3738      	adds	r7, #56	@ 0x38
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}
 8009936:	bf00      	nop
 8009938:	e000ed04 	.word	0xe000ed04

0800993c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800993c:	b480      	push	{r7}
 800993e:	b085      	sub	sp, #20
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009948:	2b00      	cmp	r3, #0
 800994a:	d006      	beq.n	800995a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8009956:	60fb      	str	r3, [r7, #12]
 8009958:	e001      	b.n	800995e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800995a:	2300      	movs	r3, #0
 800995c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800995e:	68fb      	ldr	r3, [r7, #12]
	}
 8009960:	4618      	mov	r0, r3
 8009962:	3714      	adds	r7, #20
 8009964:	46bd      	mov	sp, r7
 8009966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996a:	4770      	bx	lr

0800996c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b086      	sub	sp, #24
 8009970:	af00      	add	r7, sp, #0
 8009972:	60f8      	str	r0, [r7, #12]
 8009974:	60b9      	str	r1, [r7, #8]
 8009976:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009978:	2300      	movs	r3, #0
 800997a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009980:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009986:	2b00      	cmp	r3, #0
 8009988:	d10d      	bne.n	80099a6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d14d      	bne.n	8009a2e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	689b      	ldr	r3, [r3, #8]
 8009996:	4618      	mov	r0, r3
 8009998:	f001 f886 	bl	800aaa8 <xTaskPriorityDisinherit>
 800999c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	2200      	movs	r2, #0
 80099a2:	609a      	str	r2, [r3, #8]
 80099a4:	e043      	b.n	8009a2e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d119      	bne.n	80099e0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	6858      	ldr	r0, [r3, #4]
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099b4:	461a      	mov	r2, r3
 80099b6:	68b9      	ldr	r1, [r7, #8]
 80099b8:	f002 ff84 	bl	800c8c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	685a      	ldr	r2, [r3, #4]
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099c4:	441a      	add	r2, r3
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	685a      	ldr	r2, [r3, #4]
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	689b      	ldr	r3, [r3, #8]
 80099d2:	429a      	cmp	r2, r3
 80099d4:	d32b      	bcc.n	8009a2e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	681a      	ldr	r2, [r3, #0]
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	605a      	str	r2, [r3, #4]
 80099de:	e026      	b.n	8009a2e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	68d8      	ldr	r0, [r3, #12]
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099e8:	461a      	mov	r2, r3
 80099ea:	68b9      	ldr	r1, [r7, #8]
 80099ec:	f002 ff6a 	bl	800c8c4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	68da      	ldr	r2, [r3, #12]
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099f8:	425b      	negs	r3, r3
 80099fa:	441a      	add	r2, r3
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	68da      	ldr	r2, [r3, #12]
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	429a      	cmp	r2, r3
 8009a0a:	d207      	bcs.n	8009a1c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	689a      	ldr	r2, [r3, #8]
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a14:	425b      	negs	r3, r3
 8009a16:	441a      	add	r2, r3
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2b02      	cmp	r3, #2
 8009a20:	d105      	bne.n	8009a2e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009a22:	693b      	ldr	r3, [r7, #16]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d002      	beq.n	8009a2e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	3b01      	subs	r3, #1
 8009a2c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009a2e:	693b      	ldr	r3, [r7, #16]
 8009a30:	1c5a      	adds	r2, r3, #1
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009a36:	697b      	ldr	r3, [r7, #20]
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	3718      	adds	r7, #24
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}

08009a40 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b082      	sub	sp, #8
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
 8009a48:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d018      	beq.n	8009a84 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	68da      	ldr	r2, [r3, #12]
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a5a:	441a      	add	r2, r3
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	68da      	ldr	r2, [r3, #12]
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	689b      	ldr	r3, [r3, #8]
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	d303      	bcc.n	8009a74 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681a      	ldr	r2, [r3, #0]
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	68d9      	ldr	r1, [r3, #12]
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a7c:	461a      	mov	r2, r3
 8009a7e:	6838      	ldr	r0, [r7, #0]
 8009a80:	f002 ff20 	bl	800c8c4 <memcpy>
	}
}
 8009a84:	bf00      	nop
 8009a86:	3708      	adds	r7, #8
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}

08009a8c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b084      	sub	sp, #16
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009a94:	f001 fdf0 	bl	800b678 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009a9e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009aa0:	e011      	b.n	8009ac6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d012      	beq.n	8009ad0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	3324      	adds	r3, #36	@ 0x24
 8009aae:	4618      	mov	r0, r3
 8009ab0:	f000 fdb4 	bl	800a61c <xTaskRemoveFromEventList>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d001      	beq.n	8009abe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009aba:	f000 fe8d 	bl	800a7d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009abe:	7bfb      	ldrb	r3, [r7, #15]
 8009ac0:	3b01      	subs	r3, #1
 8009ac2:	b2db      	uxtb	r3, r3
 8009ac4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009ac6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	dce9      	bgt.n	8009aa2 <prvUnlockQueue+0x16>
 8009ace:	e000      	b.n	8009ad2 <prvUnlockQueue+0x46>
					break;
 8009ad0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	22ff      	movs	r2, #255	@ 0xff
 8009ad6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009ada:	f001 fdff 	bl	800b6dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009ade:	f001 fdcb 	bl	800b678 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009ae8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009aea:	e011      	b.n	8009b10 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	691b      	ldr	r3, [r3, #16]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d012      	beq.n	8009b1a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	3310      	adds	r3, #16
 8009af8:	4618      	mov	r0, r3
 8009afa:	f000 fd8f 	bl	800a61c <xTaskRemoveFromEventList>
 8009afe:	4603      	mov	r3, r0
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d001      	beq.n	8009b08 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009b04:	f000 fe68 	bl	800a7d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009b08:	7bbb      	ldrb	r3, [r7, #14]
 8009b0a:	3b01      	subs	r3, #1
 8009b0c:	b2db      	uxtb	r3, r3
 8009b0e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009b10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	dce9      	bgt.n	8009aec <prvUnlockQueue+0x60>
 8009b18:	e000      	b.n	8009b1c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009b1a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	22ff      	movs	r2, #255	@ 0xff
 8009b20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009b24:	f001 fdda 	bl	800b6dc <vPortExitCritical>
}
 8009b28:	bf00      	nop
 8009b2a:	3710      	adds	r7, #16
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}

08009b30 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b084      	sub	sp, #16
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009b38:	f001 fd9e 	bl	800b678 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d102      	bne.n	8009b4a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009b44:	2301      	movs	r3, #1
 8009b46:	60fb      	str	r3, [r7, #12]
 8009b48:	e001      	b.n	8009b4e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009b4e:	f001 fdc5 	bl	800b6dc <vPortExitCritical>

	return xReturn;
 8009b52:	68fb      	ldr	r3, [r7, #12]
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3710      	adds	r7, #16
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}

08009b5c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b084      	sub	sp, #16
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009b64:	f001 fd88 	bl	800b678 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b70:	429a      	cmp	r2, r3
 8009b72:	d102      	bne.n	8009b7a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009b74:	2301      	movs	r3, #1
 8009b76:	60fb      	str	r3, [r7, #12]
 8009b78:	e001      	b.n	8009b7e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009b7e:	f001 fdad 	bl	800b6dc <vPortExitCritical>

	return xReturn;
 8009b82:	68fb      	ldr	r3, [r7, #12]
}
 8009b84:	4618      	mov	r0, r3
 8009b86:	3710      	adds	r7, #16
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd80      	pop	{r7, pc}

08009b8c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009b8c:	b480      	push	{r7}
 8009b8e:	b085      	sub	sp, #20
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
 8009b94:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009b96:	2300      	movs	r3, #0
 8009b98:	60fb      	str	r3, [r7, #12]
 8009b9a:	e014      	b.n	8009bc6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009b9c:	4a0f      	ldr	r2, [pc, #60]	@ (8009bdc <vQueueAddToRegistry+0x50>)
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d10b      	bne.n	8009bc0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009ba8:	490c      	ldr	r1, [pc, #48]	@ (8009bdc <vQueueAddToRegistry+0x50>)
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	683a      	ldr	r2, [r7, #0]
 8009bae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009bb2:	4a0a      	ldr	r2, [pc, #40]	@ (8009bdc <vQueueAddToRegistry+0x50>)
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	00db      	lsls	r3, r3, #3
 8009bb8:	4413      	add	r3, r2
 8009bba:	687a      	ldr	r2, [r7, #4]
 8009bbc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009bbe:	e006      	b.n	8009bce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	3301      	adds	r3, #1
 8009bc4:	60fb      	str	r3, [r7, #12]
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	2b07      	cmp	r3, #7
 8009bca:	d9e7      	bls.n	8009b9c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009bcc:	bf00      	nop
 8009bce:	bf00      	nop
 8009bd0:	3714      	adds	r7, #20
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd8:	4770      	bx	lr
 8009bda:	bf00      	nop
 8009bdc:	20000c4c 	.word	0x20000c4c

08009be0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b086      	sub	sp, #24
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	60f8      	str	r0, [r7, #12]
 8009be8:	60b9      	str	r1, [r7, #8]
 8009bea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009bf0:	f001 fd42 	bl	800b678 <vPortEnterCritical>
 8009bf4:	697b      	ldr	r3, [r7, #20]
 8009bf6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009bfa:	b25b      	sxtb	r3, r3
 8009bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c00:	d103      	bne.n	8009c0a <vQueueWaitForMessageRestricted+0x2a>
 8009c02:	697b      	ldr	r3, [r7, #20]
 8009c04:	2200      	movs	r2, #0
 8009c06:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009c10:	b25b      	sxtb	r3, r3
 8009c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c16:	d103      	bne.n	8009c20 <vQueueWaitForMessageRestricted+0x40>
 8009c18:	697b      	ldr	r3, [r7, #20]
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009c20:	f001 fd5c 	bl	800b6dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d106      	bne.n	8009c3a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009c2c:	697b      	ldr	r3, [r7, #20]
 8009c2e:	3324      	adds	r3, #36	@ 0x24
 8009c30:	687a      	ldr	r2, [r7, #4]
 8009c32:	68b9      	ldr	r1, [r7, #8]
 8009c34:	4618      	mov	r0, r3
 8009c36:	f000 fcc5 	bl	800a5c4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009c3a:	6978      	ldr	r0, [r7, #20]
 8009c3c:	f7ff ff26 	bl	8009a8c <prvUnlockQueue>
	}
 8009c40:	bf00      	nop
 8009c42:	3718      	adds	r7, #24
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}

08009c48 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b08e      	sub	sp, #56	@ 0x38
 8009c4c:	af04      	add	r7, sp, #16
 8009c4e:	60f8      	str	r0, [r7, #12]
 8009c50:	60b9      	str	r1, [r7, #8]
 8009c52:	607a      	str	r2, [r7, #4]
 8009c54:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009c56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d10b      	bne.n	8009c74 <xTaskCreateStatic+0x2c>
	__asm volatile
 8009c5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c60:	f383 8811 	msr	BASEPRI, r3
 8009c64:	f3bf 8f6f 	isb	sy
 8009c68:	f3bf 8f4f 	dsb	sy
 8009c6c:	623b      	str	r3, [r7, #32]
}
 8009c6e:	bf00      	nop
 8009c70:	bf00      	nop
 8009c72:	e7fd      	b.n	8009c70 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009c74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d10b      	bne.n	8009c92 <xTaskCreateStatic+0x4a>
	__asm volatile
 8009c7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c7e:	f383 8811 	msr	BASEPRI, r3
 8009c82:	f3bf 8f6f 	isb	sy
 8009c86:	f3bf 8f4f 	dsb	sy
 8009c8a:	61fb      	str	r3, [r7, #28]
}
 8009c8c:	bf00      	nop
 8009c8e:	bf00      	nop
 8009c90:	e7fd      	b.n	8009c8e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009c92:	235c      	movs	r3, #92	@ 0x5c
 8009c94:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009c96:	693b      	ldr	r3, [r7, #16]
 8009c98:	2b5c      	cmp	r3, #92	@ 0x5c
 8009c9a:	d00b      	beq.n	8009cb4 <xTaskCreateStatic+0x6c>
	__asm volatile
 8009c9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ca0:	f383 8811 	msr	BASEPRI, r3
 8009ca4:	f3bf 8f6f 	isb	sy
 8009ca8:	f3bf 8f4f 	dsb	sy
 8009cac:	61bb      	str	r3, [r7, #24]
}
 8009cae:	bf00      	nop
 8009cb0:	bf00      	nop
 8009cb2:	e7fd      	b.n	8009cb0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009cb4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009cb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d01e      	beq.n	8009cfa <xTaskCreateStatic+0xb2>
 8009cbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d01b      	beq.n	8009cfa <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cc4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cc8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009cca:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cce:	2202      	movs	r2, #2
 8009cd0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	9303      	str	r3, [sp, #12]
 8009cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cda:	9302      	str	r3, [sp, #8]
 8009cdc:	f107 0314 	add.w	r3, r7, #20
 8009ce0:	9301      	str	r3, [sp, #4]
 8009ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ce4:	9300      	str	r3, [sp, #0]
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	687a      	ldr	r2, [r7, #4]
 8009cea:	68b9      	ldr	r1, [r7, #8]
 8009cec:	68f8      	ldr	r0, [r7, #12]
 8009cee:	f000 f850 	bl	8009d92 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009cf2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009cf4:	f000 f8de 	bl	8009eb4 <prvAddNewTaskToReadyList>
 8009cf8:	e001      	b.n	8009cfe <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009cfe:	697b      	ldr	r3, [r7, #20]
	}
 8009d00:	4618      	mov	r0, r3
 8009d02:	3728      	adds	r7, #40	@ 0x28
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}

08009d08 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b08c      	sub	sp, #48	@ 0x30
 8009d0c:	af04      	add	r7, sp, #16
 8009d0e:	60f8      	str	r0, [r7, #12]
 8009d10:	60b9      	str	r1, [r7, #8]
 8009d12:	603b      	str	r3, [r7, #0]
 8009d14:	4613      	mov	r3, r2
 8009d16:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009d18:	88fb      	ldrh	r3, [r7, #6]
 8009d1a:	009b      	lsls	r3, r3, #2
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f001 fdcd 	bl	800b8bc <pvPortMalloc>
 8009d22:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009d24:	697b      	ldr	r3, [r7, #20]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d00e      	beq.n	8009d48 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009d2a:	205c      	movs	r0, #92	@ 0x5c
 8009d2c:	f001 fdc6 	bl	800b8bc <pvPortMalloc>
 8009d30:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009d32:	69fb      	ldr	r3, [r7, #28]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d003      	beq.n	8009d40 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009d38:	69fb      	ldr	r3, [r7, #28]
 8009d3a:	697a      	ldr	r2, [r7, #20]
 8009d3c:	631a      	str	r2, [r3, #48]	@ 0x30
 8009d3e:	e005      	b.n	8009d4c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009d40:	6978      	ldr	r0, [r7, #20]
 8009d42:	f001 fe89 	bl	800ba58 <vPortFree>
 8009d46:	e001      	b.n	8009d4c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009d4c:	69fb      	ldr	r3, [r7, #28]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d017      	beq.n	8009d82 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009d52:	69fb      	ldr	r3, [r7, #28]
 8009d54:	2200      	movs	r2, #0
 8009d56:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009d5a:	88fa      	ldrh	r2, [r7, #6]
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	9303      	str	r3, [sp, #12]
 8009d60:	69fb      	ldr	r3, [r7, #28]
 8009d62:	9302      	str	r3, [sp, #8]
 8009d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d66:	9301      	str	r3, [sp, #4]
 8009d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d6a:	9300      	str	r3, [sp, #0]
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	68b9      	ldr	r1, [r7, #8]
 8009d70:	68f8      	ldr	r0, [r7, #12]
 8009d72:	f000 f80e 	bl	8009d92 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009d76:	69f8      	ldr	r0, [r7, #28]
 8009d78:	f000 f89c 	bl	8009eb4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	61bb      	str	r3, [r7, #24]
 8009d80:	e002      	b.n	8009d88 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009d82:	f04f 33ff 	mov.w	r3, #4294967295
 8009d86:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009d88:	69bb      	ldr	r3, [r7, #24]
	}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3720      	adds	r7, #32
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}

08009d92 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009d92:	b580      	push	{r7, lr}
 8009d94:	b088      	sub	sp, #32
 8009d96:	af00      	add	r7, sp, #0
 8009d98:	60f8      	str	r0, [r7, #12]
 8009d9a:	60b9      	str	r1, [r7, #8]
 8009d9c:	607a      	str	r2, [r7, #4]
 8009d9e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009da2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	009b      	lsls	r3, r3, #2
 8009da8:	461a      	mov	r2, r3
 8009daa:	21a5      	movs	r1, #165	@ 0xa5
 8009dac:	f002 fd2a 	bl	800c804 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009db2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009dba:	3b01      	subs	r3, #1
 8009dbc:	009b      	lsls	r3, r3, #2
 8009dbe:	4413      	add	r3, r2
 8009dc0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009dc2:	69bb      	ldr	r3, [r7, #24]
 8009dc4:	f023 0307 	bic.w	r3, r3, #7
 8009dc8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009dca:	69bb      	ldr	r3, [r7, #24]
 8009dcc:	f003 0307 	and.w	r3, r3, #7
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d00b      	beq.n	8009dec <prvInitialiseNewTask+0x5a>
	__asm volatile
 8009dd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dd8:	f383 8811 	msr	BASEPRI, r3
 8009ddc:	f3bf 8f6f 	isb	sy
 8009de0:	f3bf 8f4f 	dsb	sy
 8009de4:	617b      	str	r3, [r7, #20]
}
 8009de6:	bf00      	nop
 8009de8:	bf00      	nop
 8009dea:	e7fd      	b.n	8009de8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d01f      	beq.n	8009e32 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009df2:	2300      	movs	r3, #0
 8009df4:	61fb      	str	r3, [r7, #28]
 8009df6:	e012      	b.n	8009e1e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009df8:	68ba      	ldr	r2, [r7, #8]
 8009dfa:	69fb      	ldr	r3, [r7, #28]
 8009dfc:	4413      	add	r3, r2
 8009dfe:	7819      	ldrb	r1, [r3, #0]
 8009e00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e02:	69fb      	ldr	r3, [r7, #28]
 8009e04:	4413      	add	r3, r2
 8009e06:	3334      	adds	r3, #52	@ 0x34
 8009e08:	460a      	mov	r2, r1
 8009e0a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009e0c:	68ba      	ldr	r2, [r7, #8]
 8009e0e:	69fb      	ldr	r3, [r7, #28]
 8009e10:	4413      	add	r3, r2
 8009e12:	781b      	ldrb	r3, [r3, #0]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d006      	beq.n	8009e26 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009e18:	69fb      	ldr	r3, [r7, #28]
 8009e1a:	3301      	adds	r3, #1
 8009e1c:	61fb      	str	r3, [r7, #28]
 8009e1e:	69fb      	ldr	r3, [r7, #28]
 8009e20:	2b0f      	cmp	r3, #15
 8009e22:	d9e9      	bls.n	8009df8 <prvInitialiseNewTask+0x66>
 8009e24:	e000      	b.n	8009e28 <prvInitialiseNewTask+0x96>
			{
				break;
 8009e26:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009e30:	e003      	b.n	8009e3a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e34:	2200      	movs	r2, #0
 8009e36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e3c:	2b37      	cmp	r3, #55	@ 0x37
 8009e3e:	d901      	bls.n	8009e44 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009e40:	2337      	movs	r3, #55	@ 0x37
 8009e42:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e46:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009e48:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009e4e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e52:	2200      	movs	r2, #0
 8009e54:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e58:	3304      	adds	r3, #4
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f7fe ffd0 	bl	8008e00 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e62:	3318      	adds	r3, #24
 8009e64:	4618      	mov	r0, r3
 8009e66:	f7fe ffcb 	bl	8008e00 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e6e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e72:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e78:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e7e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e82:	2200      	movs	r2, #0
 8009e84:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e88:	2200      	movs	r2, #0
 8009e8a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009e8e:	683a      	ldr	r2, [r7, #0]
 8009e90:	68f9      	ldr	r1, [r7, #12]
 8009e92:	69b8      	ldr	r0, [r7, #24]
 8009e94:	f001 fabe 	bl	800b414 <pxPortInitialiseStack>
 8009e98:	4602      	mov	r2, r0
 8009e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e9c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d002      	beq.n	8009eaa <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ea6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ea8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009eaa:	bf00      	nop
 8009eac:	3720      	adds	r7, #32
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bd80      	pop	{r7, pc}
	...

08009eb4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b082      	sub	sp, #8
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009ebc:	f001 fbdc 	bl	800b678 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009ec0:	4b2d      	ldr	r3, [pc, #180]	@ (8009f78 <prvAddNewTaskToReadyList+0xc4>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	3301      	adds	r3, #1
 8009ec6:	4a2c      	ldr	r2, [pc, #176]	@ (8009f78 <prvAddNewTaskToReadyList+0xc4>)
 8009ec8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009eca:	4b2c      	ldr	r3, [pc, #176]	@ (8009f7c <prvAddNewTaskToReadyList+0xc8>)
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d109      	bne.n	8009ee6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009ed2:	4a2a      	ldr	r2, [pc, #168]	@ (8009f7c <prvAddNewTaskToReadyList+0xc8>)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009ed8:	4b27      	ldr	r3, [pc, #156]	@ (8009f78 <prvAddNewTaskToReadyList+0xc4>)
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	2b01      	cmp	r3, #1
 8009ede:	d110      	bne.n	8009f02 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009ee0:	f000 fc9e 	bl	800a820 <prvInitialiseTaskLists>
 8009ee4:	e00d      	b.n	8009f02 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009ee6:	4b26      	ldr	r3, [pc, #152]	@ (8009f80 <prvAddNewTaskToReadyList+0xcc>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d109      	bne.n	8009f02 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009eee:	4b23      	ldr	r3, [pc, #140]	@ (8009f7c <prvAddNewTaskToReadyList+0xc8>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ef8:	429a      	cmp	r2, r3
 8009efa:	d802      	bhi.n	8009f02 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009efc:	4a1f      	ldr	r2, [pc, #124]	@ (8009f7c <prvAddNewTaskToReadyList+0xc8>)
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009f02:	4b20      	ldr	r3, [pc, #128]	@ (8009f84 <prvAddNewTaskToReadyList+0xd0>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	3301      	adds	r3, #1
 8009f08:	4a1e      	ldr	r2, [pc, #120]	@ (8009f84 <prvAddNewTaskToReadyList+0xd0>)
 8009f0a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009f0c:	4b1d      	ldr	r3, [pc, #116]	@ (8009f84 <prvAddNewTaskToReadyList+0xd0>)
 8009f0e:	681a      	ldr	r2, [r3, #0]
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f18:	4b1b      	ldr	r3, [pc, #108]	@ (8009f88 <prvAddNewTaskToReadyList+0xd4>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	429a      	cmp	r2, r3
 8009f1e:	d903      	bls.n	8009f28 <prvAddNewTaskToReadyList+0x74>
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f24:	4a18      	ldr	r2, [pc, #96]	@ (8009f88 <prvAddNewTaskToReadyList+0xd4>)
 8009f26:	6013      	str	r3, [r2, #0]
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f2c:	4613      	mov	r3, r2
 8009f2e:	009b      	lsls	r3, r3, #2
 8009f30:	4413      	add	r3, r2
 8009f32:	009b      	lsls	r3, r3, #2
 8009f34:	4a15      	ldr	r2, [pc, #84]	@ (8009f8c <prvAddNewTaskToReadyList+0xd8>)
 8009f36:	441a      	add	r2, r3
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	3304      	adds	r3, #4
 8009f3c:	4619      	mov	r1, r3
 8009f3e:	4610      	mov	r0, r2
 8009f40:	f7fe ff6b 	bl	8008e1a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009f44:	f001 fbca 	bl	800b6dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009f48:	4b0d      	ldr	r3, [pc, #52]	@ (8009f80 <prvAddNewTaskToReadyList+0xcc>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d00e      	beq.n	8009f6e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009f50:	4b0a      	ldr	r3, [pc, #40]	@ (8009f7c <prvAddNewTaskToReadyList+0xc8>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f5a:	429a      	cmp	r2, r3
 8009f5c:	d207      	bcs.n	8009f6e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009f5e:	4b0c      	ldr	r3, [pc, #48]	@ (8009f90 <prvAddNewTaskToReadyList+0xdc>)
 8009f60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f64:	601a      	str	r2, [r3, #0]
 8009f66:	f3bf 8f4f 	dsb	sy
 8009f6a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f6e:	bf00      	nop
 8009f70:	3708      	adds	r7, #8
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}
 8009f76:	bf00      	nop
 8009f78:	20001160 	.word	0x20001160
 8009f7c:	20000c8c 	.word	0x20000c8c
 8009f80:	2000116c 	.word	0x2000116c
 8009f84:	2000117c 	.word	0x2000117c
 8009f88:	20001168 	.word	0x20001168
 8009f8c:	20000c90 	.word	0x20000c90
 8009f90:	e000ed04 	.word	0xe000ed04

08009f94 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b08a      	sub	sp, #40	@ 0x28
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
 8009f9c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d10b      	bne.n	8009fc0 <vTaskDelayUntil+0x2c>
	__asm volatile
 8009fa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fac:	f383 8811 	msr	BASEPRI, r3
 8009fb0:	f3bf 8f6f 	isb	sy
 8009fb4:	f3bf 8f4f 	dsb	sy
 8009fb8:	617b      	str	r3, [r7, #20]
}
 8009fba:	bf00      	nop
 8009fbc:	bf00      	nop
 8009fbe:	e7fd      	b.n	8009fbc <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d10b      	bne.n	8009fde <vTaskDelayUntil+0x4a>
	__asm volatile
 8009fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fca:	f383 8811 	msr	BASEPRI, r3
 8009fce:	f3bf 8f6f 	isb	sy
 8009fd2:	f3bf 8f4f 	dsb	sy
 8009fd6:	613b      	str	r3, [r7, #16]
}
 8009fd8:	bf00      	nop
 8009fda:	bf00      	nop
 8009fdc:	e7fd      	b.n	8009fda <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 8009fde:	4b2a      	ldr	r3, [pc, #168]	@ (800a088 <vTaskDelayUntil+0xf4>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d00b      	beq.n	8009ffe <vTaskDelayUntil+0x6a>
	__asm volatile
 8009fe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fea:	f383 8811 	msr	BASEPRI, r3
 8009fee:	f3bf 8f6f 	isb	sy
 8009ff2:	f3bf 8f4f 	dsb	sy
 8009ff6:	60fb      	str	r3, [r7, #12]
}
 8009ff8:	bf00      	nop
 8009ffa:	bf00      	nop
 8009ffc:	e7fd      	b.n	8009ffa <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 8009ffe:	f000 f8e7 	bl	800a1d0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800a002:	4b22      	ldr	r3, [pc, #136]	@ (800a08c <vTaskDelayUntil+0xf8>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	683a      	ldr	r2, [r7, #0]
 800a00e:	4413      	add	r3, r2
 800a010:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	6a3a      	ldr	r2, [r7, #32]
 800a018:	429a      	cmp	r2, r3
 800a01a:	d20b      	bcs.n	800a034 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	69fa      	ldr	r2, [r7, #28]
 800a022:	429a      	cmp	r2, r3
 800a024:	d211      	bcs.n	800a04a <vTaskDelayUntil+0xb6>
 800a026:	69fa      	ldr	r2, [r7, #28]
 800a028:	6a3b      	ldr	r3, [r7, #32]
 800a02a:	429a      	cmp	r2, r3
 800a02c:	d90d      	bls.n	800a04a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800a02e:	2301      	movs	r3, #1
 800a030:	627b      	str	r3, [r7, #36]	@ 0x24
 800a032:	e00a      	b.n	800a04a <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	69fa      	ldr	r2, [r7, #28]
 800a03a:	429a      	cmp	r2, r3
 800a03c:	d303      	bcc.n	800a046 <vTaskDelayUntil+0xb2>
 800a03e:	69fa      	ldr	r2, [r7, #28]
 800a040:	6a3b      	ldr	r3, [r7, #32]
 800a042:	429a      	cmp	r2, r3
 800a044:	d901      	bls.n	800a04a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800a046:	2301      	movs	r3, #1
 800a048:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	69fa      	ldr	r2, [r7, #28]
 800a04e:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800a050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a052:	2b00      	cmp	r3, #0
 800a054:	d006      	beq.n	800a064 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800a056:	69fa      	ldr	r2, [r7, #28]
 800a058:	6a3b      	ldr	r3, [r7, #32]
 800a05a:	1ad3      	subs	r3, r2, r3
 800a05c:	2100      	movs	r1, #0
 800a05e:	4618      	mov	r0, r3
 800a060:	f000 fe2a 	bl	800acb8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800a064:	f000 f8c2 	bl	800a1ec <xTaskResumeAll>
 800a068:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a06a:	69bb      	ldr	r3, [r7, #24]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d107      	bne.n	800a080 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 800a070:	4b07      	ldr	r3, [pc, #28]	@ (800a090 <vTaskDelayUntil+0xfc>)
 800a072:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a076:	601a      	str	r2, [r3, #0]
 800a078:	f3bf 8f4f 	dsb	sy
 800a07c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a080:	bf00      	nop
 800a082:	3728      	adds	r7, #40	@ 0x28
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}
 800a088:	20001188 	.word	0x20001188
 800a08c:	20001164 	.word	0x20001164
 800a090:	e000ed04 	.word	0xe000ed04

0800a094 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a094:	b580      	push	{r7, lr}
 800a096:	b084      	sub	sp, #16
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a09c:	2300      	movs	r3, #0
 800a09e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d018      	beq.n	800a0d8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a0a6:	4b14      	ldr	r3, [pc, #80]	@ (800a0f8 <vTaskDelay+0x64>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d00b      	beq.n	800a0c6 <vTaskDelay+0x32>
	__asm volatile
 800a0ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0b2:	f383 8811 	msr	BASEPRI, r3
 800a0b6:	f3bf 8f6f 	isb	sy
 800a0ba:	f3bf 8f4f 	dsb	sy
 800a0be:	60bb      	str	r3, [r7, #8]
}
 800a0c0:	bf00      	nop
 800a0c2:	bf00      	nop
 800a0c4:	e7fd      	b.n	800a0c2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a0c6:	f000 f883 	bl	800a1d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a0ca:	2100      	movs	r1, #0
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	f000 fdf3 	bl	800acb8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a0d2:	f000 f88b 	bl	800a1ec <xTaskResumeAll>
 800a0d6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d107      	bne.n	800a0ee <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a0de:	4b07      	ldr	r3, [pc, #28]	@ (800a0fc <vTaskDelay+0x68>)
 800a0e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a0e4:	601a      	str	r2, [r3, #0]
 800a0e6:	f3bf 8f4f 	dsb	sy
 800a0ea:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a0ee:	bf00      	nop
 800a0f0:	3710      	adds	r7, #16
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}
 800a0f6:	bf00      	nop
 800a0f8:	20001188 	.word	0x20001188
 800a0fc:	e000ed04 	.word	0xe000ed04

0800a100 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b08a      	sub	sp, #40	@ 0x28
 800a104:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a106:	2300      	movs	r3, #0
 800a108:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a10a:	2300      	movs	r3, #0
 800a10c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a10e:	463a      	mov	r2, r7
 800a110:	1d39      	adds	r1, r7, #4
 800a112:	f107 0308 	add.w	r3, r7, #8
 800a116:	4618      	mov	r0, r3
 800a118:	f7fe fe1e 	bl	8008d58 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a11c:	6839      	ldr	r1, [r7, #0]
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	68ba      	ldr	r2, [r7, #8]
 800a122:	9202      	str	r2, [sp, #8]
 800a124:	9301      	str	r3, [sp, #4]
 800a126:	2300      	movs	r3, #0
 800a128:	9300      	str	r3, [sp, #0]
 800a12a:	2300      	movs	r3, #0
 800a12c:	460a      	mov	r2, r1
 800a12e:	4922      	ldr	r1, [pc, #136]	@ (800a1b8 <vTaskStartScheduler+0xb8>)
 800a130:	4822      	ldr	r0, [pc, #136]	@ (800a1bc <vTaskStartScheduler+0xbc>)
 800a132:	f7ff fd89 	bl	8009c48 <xTaskCreateStatic>
 800a136:	4603      	mov	r3, r0
 800a138:	4a21      	ldr	r2, [pc, #132]	@ (800a1c0 <vTaskStartScheduler+0xc0>)
 800a13a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a13c:	4b20      	ldr	r3, [pc, #128]	@ (800a1c0 <vTaskStartScheduler+0xc0>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d002      	beq.n	800a14a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a144:	2301      	movs	r3, #1
 800a146:	617b      	str	r3, [r7, #20]
 800a148:	e001      	b.n	800a14e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a14a:	2300      	movs	r3, #0
 800a14c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	2b01      	cmp	r3, #1
 800a152:	d102      	bne.n	800a15a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a154:	f000 fe04 	bl	800ad60 <xTimerCreateTimerTask>
 800a158:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	2b01      	cmp	r3, #1
 800a15e:	d116      	bne.n	800a18e <vTaskStartScheduler+0x8e>
	__asm volatile
 800a160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a164:	f383 8811 	msr	BASEPRI, r3
 800a168:	f3bf 8f6f 	isb	sy
 800a16c:	f3bf 8f4f 	dsb	sy
 800a170:	613b      	str	r3, [r7, #16]
}
 800a172:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a174:	4b13      	ldr	r3, [pc, #76]	@ (800a1c4 <vTaskStartScheduler+0xc4>)
 800a176:	f04f 32ff 	mov.w	r2, #4294967295
 800a17a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a17c:	4b12      	ldr	r3, [pc, #72]	@ (800a1c8 <vTaskStartScheduler+0xc8>)
 800a17e:	2201      	movs	r2, #1
 800a180:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a182:	4b12      	ldr	r3, [pc, #72]	@ (800a1cc <vTaskStartScheduler+0xcc>)
 800a184:	2200      	movs	r2, #0
 800a186:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a188:	f001 f9d2 	bl	800b530 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a18c:	e00f      	b.n	800a1ae <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a18e:	697b      	ldr	r3, [r7, #20]
 800a190:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a194:	d10b      	bne.n	800a1ae <vTaskStartScheduler+0xae>
	__asm volatile
 800a196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a19a:	f383 8811 	msr	BASEPRI, r3
 800a19e:	f3bf 8f6f 	isb	sy
 800a1a2:	f3bf 8f4f 	dsb	sy
 800a1a6:	60fb      	str	r3, [r7, #12]
}
 800a1a8:	bf00      	nop
 800a1aa:	bf00      	nop
 800a1ac:	e7fd      	b.n	800a1aa <vTaskStartScheduler+0xaa>
}
 800a1ae:	bf00      	nop
 800a1b0:	3718      	adds	r7, #24
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}
 800a1b6:	bf00      	nop
 800a1b8:	0800db88 	.word	0x0800db88
 800a1bc:	0800a7f1 	.word	0x0800a7f1
 800a1c0:	20001184 	.word	0x20001184
 800a1c4:	20001180 	.word	0x20001180
 800a1c8:	2000116c 	.word	0x2000116c
 800a1cc:	20001164 	.word	0x20001164

0800a1d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a1d4:	4b04      	ldr	r3, [pc, #16]	@ (800a1e8 <vTaskSuspendAll+0x18>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	3301      	adds	r3, #1
 800a1da:	4a03      	ldr	r2, [pc, #12]	@ (800a1e8 <vTaskSuspendAll+0x18>)
 800a1dc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a1de:	bf00      	nop
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e6:	4770      	bx	lr
 800a1e8:	20001188 	.word	0x20001188

0800a1ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b084      	sub	sp, #16
 800a1f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a1fa:	4b42      	ldr	r3, [pc, #264]	@ (800a304 <xTaskResumeAll+0x118>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d10b      	bne.n	800a21a <xTaskResumeAll+0x2e>
	__asm volatile
 800a202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a206:	f383 8811 	msr	BASEPRI, r3
 800a20a:	f3bf 8f6f 	isb	sy
 800a20e:	f3bf 8f4f 	dsb	sy
 800a212:	603b      	str	r3, [r7, #0]
}
 800a214:	bf00      	nop
 800a216:	bf00      	nop
 800a218:	e7fd      	b.n	800a216 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a21a:	f001 fa2d 	bl	800b678 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a21e:	4b39      	ldr	r3, [pc, #228]	@ (800a304 <xTaskResumeAll+0x118>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	3b01      	subs	r3, #1
 800a224:	4a37      	ldr	r2, [pc, #220]	@ (800a304 <xTaskResumeAll+0x118>)
 800a226:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a228:	4b36      	ldr	r3, [pc, #216]	@ (800a304 <xTaskResumeAll+0x118>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d162      	bne.n	800a2f6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a230:	4b35      	ldr	r3, [pc, #212]	@ (800a308 <xTaskResumeAll+0x11c>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d05e      	beq.n	800a2f6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a238:	e02f      	b.n	800a29a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a23a:	4b34      	ldr	r3, [pc, #208]	@ (800a30c <xTaskResumeAll+0x120>)
 800a23c:	68db      	ldr	r3, [r3, #12]
 800a23e:	68db      	ldr	r3, [r3, #12]
 800a240:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	3318      	adds	r3, #24
 800a246:	4618      	mov	r0, r3
 800a248:	f7fe fe44 	bl	8008ed4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	3304      	adds	r3, #4
 800a250:	4618      	mov	r0, r3
 800a252:	f7fe fe3f 	bl	8008ed4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a25a:	4b2d      	ldr	r3, [pc, #180]	@ (800a310 <xTaskResumeAll+0x124>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	429a      	cmp	r2, r3
 800a260:	d903      	bls.n	800a26a <xTaskResumeAll+0x7e>
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a266:	4a2a      	ldr	r2, [pc, #168]	@ (800a310 <xTaskResumeAll+0x124>)
 800a268:	6013      	str	r3, [r2, #0]
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a26e:	4613      	mov	r3, r2
 800a270:	009b      	lsls	r3, r3, #2
 800a272:	4413      	add	r3, r2
 800a274:	009b      	lsls	r3, r3, #2
 800a276:	4a27      	ldr	r2, [pc, #156]	@ (800a314 <xTaskResumeAll+0x128>)
 800a278:	441a      	add	r2, r3
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	3304      	adds	r3, #4
 800a27e:	4619      	mov	r1, r3
 800a280:	4610      	mov	r0, r2
 800a282:	f7fe fdca 	bl	8008e1a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a28a:	4b23      	ldr	r3, [pc, #140]	@ (800a318 <xTaskResumeAll+0x12c>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a290:	429a      	cmp	r2, r3
 800a292:	d302      	bcc.n	800a29a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800a294:	4b21      	ldr	r3, [pc, #132]	@ (800a31c <xTaskResumeAll+0x130>)
 800a296:	2201      	movs	r2, #1
 800a298:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a29a:	4b1c      	ldr	r3, [pc, #112]	@ (800a30c <xTaskResumeAll+0x120>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d1cb      	bne.n	800a23a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d001      	beq.n	800a2ac <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a2a8:	f000 fb58 	bl	800a95c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a2ac:	4b1c      	ldr	r3, [pc, #112]	@ (800a320 <xTaskResumeAll+0x134>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d010      	beq.n	800a2da <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a2b8:	f000 f846 	bl	800a348 <xTaskIncrementTick>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d002      	beq.n	800a2c8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800a2c2:	4b16      	ldr	r3, [pc, #88]	@ (800a31c <xTaskResumeAll+0x130>)
 800a2c4:	2201      	movs	r2, #1
 800a2c6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	3b01      	subs	r3, #1
 800a2cc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d1f1      	bne.n	800a2b8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800a2d4:	4b12      	ldr	r3, [pc, #72]	@ (800a320 <xTaskResumeAll+0x134>)
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a2da:	4b10      	ldr	r3, [pc, #64]	@ (800a31c <xTaskResumeAll+0x130>)
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d009      	beq.n	800a2f6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a2e6:	4b0f      	ldr	r3, [pc, #60]	@ (800a324 <xTaskResumeAll+0x138>)
 800a2e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a2ec:	601a      	str	r2, [r3, #0]
 800a2ee:	f3bf 8f4f 	dsb	sy
 800a2f2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a2f6:	f001 f9f1 	bl	800b6dc <vPortExitCritical>

	return xAlreadyYielded;
 800a2fa:	68bb      	ldr	r3, [r7, #8]
}
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	3710      	adds	r7, #16
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}
 800a304:	20001188 	.word	0x20001188
 800a308:	20001160 	.word	0x20001160
 800a30c:	20001120 	.word	0x20001120
 800a310:	20001168 	.word	0x20001168
 800a314:	20000c90 	.word	0x20000c90
 800a318:	20000c8c 	.word	0x20000c8c
 800a31c:	20001174 	.word	0x20001174
 800a320:	20001170 	.word	0x20001170
 800a324:	e000ed04 	.word	0xe000ed04

0800a328 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a328:	b480      	push	{r7}
 800a32a:	b083      	sub	sp, #12
 800a32c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a32e:	4b05      	ldr	r3, [pc, #20]	@ (800a344 <xTaskGetTickCount+0x1c>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a334:	687b      	ldr	r3, [r7, #4]
}
 800a336:	4618      	mov	r0, r3
 800a338:	370c      	adds	r7, #12
 800a33a:	46bd      	mov	sp, r7
 800a33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a340:	4770      	bx	lr
 800a342:	bf00      	nop
 800a344:	20001164 	.word	0x20001164

0800a348 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b086      	sub	sp, #24
 800a34c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a34e:	2300      	movs	r3, #0
 800a350:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a352:	4b4f      	ldr	r3, [pc, #316]	@ (800a490 <xTaskIncrementTick+0x148>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	2b00      	cmp	r3, #0
 800a358:	f040 8090 	bne.w	800a47c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a35c:	4b4d      	ldr	r3, [pc, #308]	@ (800a494 <xTaskIncrementTick+0x14c>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	3301      	adds	r3, #1
 800a362:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a364:	4a4b      	ldr	r2, [pc, #300]	@ (800a494 <xTaskIncrementTick+0x14c>)
 800a366:	693b      	ldr	r3, [r7, #16]
 800a368:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a36a:	693b      	ldr	r3, [r7, #16]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d121      	bne.n	800a3b4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a370:	4b49      	ldr	r3, [pc, #292]	@ (800a498 <xTaskIncrementTick+0x150>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d00b      	beq.n	800a392 <xTaskIncrementTick+0x4a>
	__asm volatile
 800a37a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a37e:	f383 8811 	msr	BASEPRI, r3
 800a382:	f3bf 8f6f 	isb	sy
 800a386:	f3bf 8f4f 	dsb	sy
 800a38a:	603b      	str	r3, [r7, #0]
}
 800a38c:	bf00      	nop
 800a38e:	bf00      	nop
 800a390:	e7fd      	b.n	800a38e <xTaskIncrementTick+0x46>
 800a392:	4b41      	ldr	r3, [pc, #260]	@ (800a498 <xTaskIncrementTick+0x150>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	60fb      	str	r3, [r7, #12]
 800a398:	4b40      	ldr	r3, [pc, #256]	@ (800a49c <xTaskIncrementTick+0x154>)
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	4a3e      	ldr	r2, [pc, #248]	@ (800a498 <xTaskIncrementTick+0x150>)
 800a39e:	6013      	str	r3, [r2, #0]
 800a3a0:	4a3e      	ldr	r2, [pc, #248]	@ (800a49c <xTaskIncrementTick+0x154>)
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	6013      	str	r3, [r2, #0]
 800a3a6:	4b3e      	ldr	r3, [pc, #248]	@ (800a4a0 <xTaskIncrementTick+0x158>)
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	3301      	adds	r3, #1
 800a3ac:	4a3c      	ldr	r2, [pc, #240]	@ (800a4a0 <xTaskIncrementTick+0x158>)
 800a3ae:	6013      	str	r3, [r2, #0]
 800a3b0:	f000 fad4 	bl	800a95c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a3b4:	4b3b      	ldr	r3, [pc, #236]	@ (800a4a4 <xTaskIncrementTick+0x15c>)
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	693a      	ldr	r2, [r7, #16]
 800a3ba:	429a      	cmp	r2, r3
 800a3bc:	d349      	bcc.n	800a452 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a3be:	4b36      	ldr	r3, [pc, #216]	@ (800a498 <xTaskIncrementTick+0x150>)
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d104      	bne.n	800a3d2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a3c8:	4b36      	ldr	r3, [pc, #216]	@ (800a4a4 <xTaskIncrementTick+0x15c>)
 800a3ca:	f04f 32ff 	mov.w	r2, #4294967295
 800a3ce:	601a      	str	r2, [r3, #0]
					break;
 800a3d0:	e03f      	b.n	800a452 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3d2:	4b31      	ldr	r3, [pc, #196]	@ (800a498 <xTaskIncrementTick+0x150>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	68db      	ldr	r3, [r3, #12]
 800a3d8:	68db      	ldr	r3, [r3, #12]
 800a3da:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	685b      	ldr	r3, [r3, #4]
 800a3e0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a3e2:	693a      	ldr	r2, [r7, #16]
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	429a      	cmp	r2, r3
 800a3e8:	d203      	bcs.n	800a3f2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a3ea:	4a2e      	ldr	r2, [pc, #184]	@ (800a4a4 <xTaskIncrementTick+0x15c>)
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a3f0:	e02f      	b.n	800a452 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	3304      	adds	r3, #4
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f7fe fd6c 	bl	8008ed4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a3fc:	68bb      	ldr	r3, [r7, #8]
 800a3fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a400:	2b00      	cmp	r3, #0
 800a402:	d004      	beq.n	800a40e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a404:	68bb      	ldr	r3, [r7, #8]
 800a406:	3318      	adds	r3, #24
 800a408:	4618      	mov	r0, r3
 800a40a:	f7fe fd63 	bl	8008ed4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a412:	4b25      	ldr	r3, [pc, #148]	@ (800a4a8 <xTaskIncrementTick+0x160>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	429a      	cmp	r2, r3
 800a418:	d903      	bls.n	800a422 <xTaskIncrementTick+0xda>
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a41e:	4a22      	ldr	r2, [pc, #136]	@ (800a4a8 <xTaskIncrementTick+0x160>)
 800a420:	6013      	str	r3, [r2, #0]
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a426:	4613      	mov	r3, r2
 800a428:	009b      	lsls	r3, r3, #2
 800a42a:	4413      	add	r3, r2
 800a42c:	009b      	lsls	r3, r3, #2
 800a42e:	4a1f      	ldr	r2, [pc, #124]	@ (800a4ac <xTaskIncrementTick+0x164>)
 800a430:	441a      	add	r2, r3
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	3304      	adds	r3, #4
 800a436:	4619      	mov	r1, r3
 800a438:	4610      	mov	r0, r2
 800a43a:	f7fe fcee 	bl	8008e1a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a442:	4b1b      	ldr	r3, [pc, #108]	@ (800a4b0 <xTaskIncrementTick+0x168>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a448:	429a      	cmp	r2, r3
 800a44a:	d3b8      	bcc.n	800a3be <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a44c:	2301      	movs	r3, #1
 800a44e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a450:	e7b5      	b.n	800a3be <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a452:	4b17      	ldr	r3, [pc, #92]	@ (800a4b0 <xTaskIncrementTick+0x168>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a458:	4914      	ldr	r1, [pc, #80]	@ (800a4ac <xTaskIncrementTick+0x164>)
 800a45a:	4613      	mov	r3, r2
 800a45c:	009b      	lsls	r3, r3, #2
 800a45e:	4413      	add	r3, r2
 800a460:	009b      	lsls	r3, r3, #2
 800a462:	440b      	add	r3, r1
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	2b01      	cmp	r3, #1
 800a468:	d901      	bls.n	800a46e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800a46a:	2301      	movs	r3, #1
 800a46c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a46e:	4b11      	ldr	r3, [pc, #68]	@ (800a4b4 <xTaskIncrementTick+0x16c>)
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d007      	beq.n	800a486 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800a476:	2301      	movs	r3, #1
 800a478:	617b      	str	r3, [r7, #20]
 800a47a:	e004      	b.n	800a486 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a47c:	4b0e      	ldr	r3, [pc, #56]	@ (800a4b8 <xTaskIncrementTick+0x170>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	3301      	adds	r3, #1
 800a482:	4a0d      	ldr	r2, [pc, #52]	@ (800a4b8 <xTaskIncrementTick+0x170>)
 800a484:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a486:	697b      	ldr	r3, [r7, #20]
}
 800a488:	4618      	mov	r0, r3
 800a48a:	3718      	adds	r7, #24
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd80      	pop	{r7, pc}
 800a490:	20001188 	.word	0x20001188
 800a494:	20001164 	.word	0x20001164
 800a498:	20001118 	.word	0x20001118
 800a49c:	2000111c 	.word	0x2000111c
 800a4a0:	20001178 	.word	0x20001178
 800a4a4:	20001180 	.word	0x20001180
 800a4a8:	20001168 	.word	0x20001168
 800a4ac:	20000c90 	.word	0x20000c90
 800a4b0:	20000c8c 	.word	0x20000c8c
 800a4b4:	20001174 	.word	0x20001174
 800a4b8:	20001170 	.word	0x20001170

0800a4bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a4bc:	b480      	push	{r7}
 800a4be:	b085      	sub	sp, #20
 800a4c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a4c2:	4b28      	ldr	r3, [pc, #160]	@ (800a564 <vTaskSwitchContext+0xa8>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d003      	beq.n	800a4d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a4ca:	4b27      	ldr	r3, [pc, #156]	@ (800a568 <vTaskSwitchContext+0xac>)
 800a4cc:	2201      	movs	r2, #1
 800a4ce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a4d0:	e042      	b.n	800a558 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800a4d2:	4b25      	ldr	r3, [pc, #148]	@ (800a568 <vTaskSwitchContext+0xac>)
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4d8:	4b24      	ldr	r3, [pc, #144]	@ (800a56c <vTaskSwitchContext+0xb0>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	60fb      	str	r3, [r7, #12]
 800a4de:	e011      	b.n	800a504 <vTaskSwitchContext+0x48>
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d10b      	bne.n	800a4fe <vTaskSwitchContext+0x42>
	__asm volatile
 800a4e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4ea:	f383 8811 	msr	BASEPRI, r3
 800a4ee:	f3bf 8f6f 	isb	sy
 800a4f2:	f3bf 8f4f 	dsb	sy
 800a4f6:	607b      	str	r3, [r7, #4]
}
 800a4f8:	bf00      	nop
 800a4fa:	bf00      	nop
 800a4fc:	e7fd      	b.n	800a4fa <vTaskSwitchContext+0x3e>
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	3b01      	subs	r3, #1
 800a502:	60fb      	str	r3, [r7, #12]
 800a504:	491a      	ldr	r1, [pc, #104]	@ (800a570 <vTaskSwitchContext+0xb4>)
 800a506:	68fa      	ldr	r2, [r7, #12]
 800a508:	4613      	mov	r3, r2
 800a50a:	009b      	lsls	r3, r3, #2
 800a50c:	4413      	add	r3, r2
 800a50e:	009b      	lsls	r3, r3, #2
 800a510:	440b      	add	r3, r1
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d0e3      	beq.n	800a4e0 <vTaskSwitchContext+0x24>
 800a518:	68fa      	ldr	r2, [r7, #12]
 800a51a:	4613      	mov	r3, r2
 800a51c:	009b      	lsls	r3, r3, #2
 800a51e:	4413      	add	r3, r2
 800a520:	009b      	lsls	r3, r3, #2
 800a522:	4a13      	ldr	r2, [pc, #76]	@ (800a570 <vTaskSwitchContext+0xb4>)
 800a524:	4413      	add	r3, r2
 800a526:	60bb      	str	r3, [r7, #8]
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	685b      	ldr	r3, [r3, #4]
 800a52c:	685a      	ldr	r2, [r3, #4]
 800a52e:	68bb      	ldr	r3, [r7, #8]
 800a530:	605a      	str	r2, [r3, #4]
 800a532:	68bb      	ldr	r3, [r7, #8]
 800a534:	685a      	ldr	r2, [r3, #4]
 800a536:	68bb      	ldr	r3, [r7, #8]
 800a538:	3308      	adds	r3, #8
 800a53a:	429a      	cmp	r2, r3
 800a53c:	d104      	bne.n	800a548 <vTaskSwitchContext+0x8c>
 800a53e:	68bb      	ldr	r3, [r7, #8]
 800a540:	685b      	ldr	r3, [r3, #4]
 800a542:	685a      	ldr	r2, [r3, #4]
 800a544:	68bb      	ldr	r3, [r7, #8]
 800a546:	605a      	str	r2, [r3, #4]
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	685b      	ldr	r3, [r3, #4]
 800a54c:	68db      	ldr	r3, [r3, #12]
 800a54e:	4a09      	ldr	r2, [pc, #36]	@ (800a574 <vTaskSwitchContext+0xb8>)
 800a550:	6013      	str	r3, [r2, #0]
 800a552:	4a06      	ldr	r2, [pc, #24]	@ (800a56c <vTaskSwitchContext+0xb0>)
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	6013      	str	r3, [r2, #0]
}
 800a558:	bf00      	nop
 800a55a:	3714      	adds	r7, #20
 800a55c:	46bd      	mov	sp, r7
 800a55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a562:	4770      	bx	lr
 800a564:	20001188 	.word	0x20001188
 800a568:	20001174 	.word	0x20001174
 800a56c:	20001168 	.word	0x20001168
 800a570:	20000c90 	.word	0x20000c90
 800a574:	20000c8c 	.word	0x20000c8c

0800a578 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b084      	sub	sp, #16
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
 800a580:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d10b      	bne.n	800a5a0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a58c:	f383 8811 	msr	BASEPRI, r3
 800a590:	f3bf 8f6f 	isb	sy
 800a594:	f3bf 8f4f 	dsb	sy
 800a598:	60fb      	str	r3, [r7, #12]
}
 800a59a:	bf00      	nop
 800a59c:	bf00      	nop
 800a59e:	e7fd      	b.n	800a59c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a5a0:	4b07      	ldr	r3, [pc, #28]	@ (800a5c0 <vTaskPlaceOnEventList+0x48>)
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	3318      	adds	r3, #24
 800a5a6:	4619      	mov	r1, r3
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f7fe fc5a 	bl	8008e62 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a5ae:	2101      	movs	r1, #1
 800a5b0:	6838      	ldr	r0, [r7, #0]
 800a5b2:	f000 fb81 	bl	800acb8 <prvAddCurrentTaskToDelayedList>
}
 800a5b6:	bf00      	nop
 800a5b8:	3710      	adds	r7, #16
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}
 800a5be:	bf00      	nop
 800a5c0:	20000c8c 	.word	0x20000c8c

0800a5c4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b086      	sub	sp, #24
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	60f8      	str	r0, [r7, #12]
 800a5cc:	60b9      	str	r1, [r7, #8]
 800a5ce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d10b      	bne.n	800a5ee <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800a5d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5da:	f383 8811 	msr	BASEPRI, r3
 800a5de:	f3bf 8f6f 	isb	sy
 800a5e2:	f3bf 8f4f 	dsb	sy
 800a5e6:	617b      	str	r3, [r7, #20]
}
 800a5e8:	bf00      	nop
 800a5ea:	bf00      	nop
 800a5ec:	e7fd      	b.n	800a5ea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a5ee:	4b0a      	ldr	r3, [pc, #40]	@ (800a618 <vTaskPlaceOnEventListRestricted+0x54>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	3318      	adds	r3, #24
 800a5f4:	4619      	mov	r1, r3
 800a5f6:	68f8      	ldr	r0, [r7, #12]
 800a5f8:	f7fe fc0f 	bl	8008e1a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d002      	beq.n	800a608 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800a602:	f04f 33ff 	mov.w	r3, #4294967295
 800a606:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a608:	6879      	ldr	r1, [r7, #4]
 800a60a:	68b8      	ldr	r0, [r7, #8]
 800a60c:	f000 fb54 	bl	800acb8 <prvAddCurrentTaskToDelayedList>
	}
 800a610:	bf00      	nop
 800a612:	3718      	adds	r7, #24
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}
 800a618:	20000c8c 	.word	0x20000c8c

0800a61c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b086      	sub	sp, #24
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	68db      	ldr	r3, [r3, #12]
 800a628:	68db      	ldr	r3, [r3, #12]
 800a62a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a62c:	693b      	ldr	r3, [r7, #16]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d10b      	bne.n	800a64a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800a632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a636:	f383 8811 	msr	BASEPRI, r3
 800a63a:	f3bf 8f6f 	isb	sy
 800a63e:	f3bf 8f4f 	dsb	sy
 800a642:	60fb      	str	r3, [r7, #12]
}
 800a644:	bf00      	nop
 800a646:	bf00      	nop
 800a648:	e7fd      	b.n	800a646 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a64a:	693b      	ldr	r3, [r7, #16]
 800a64c:	3318      	adds	r3, #24
 800a64e:	4618      	mov	r0, r3
 800a650:	f7fe fc40 	bl	8008ed4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a654:	4b1d      	ldr	r3, [pc, #116]	@ (800a6cc <xTaskRemoveFromEventList+0xb0>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d11d      	bne.n	800a698 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a65c:	693b      	ldr	r3, [r7, #16]
 800a65e:	3304      	adds	r3, #4
 800a660:	4618      	mov	r0, r3
 800a662:	f7fe fc37 	bl	8008ed4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a666:	693b      	ldr	r3, [r7, #16]
 800a668:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a66a:	4b19      	ldr	r3, [pc, #100]	@ (800a6d0 <xTaskRemoveFromEventList+0xb4>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	429a      	cmp	r2, r3
 800a670:	d903      	bls.n	800a67a <xTaskRemoveFromEventList+0x5e>
 800a672:	693b      	ldr	r3, [r7, #16]
 800a674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a676:	4a16      	ldr	r2, [pc, #88]	@ (800a6d0 <xTaskRemoveFromEventList+0xb4>)
 800a678:	6013      	str	r3, [r2, #0]
 800a67a:	693b      	ldr	r3, [r7, #16]
 800a67c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a67e:	4613      	mov	r3, r2
 800a680:	009b      	lsls	r3, r3, #2
 800a682:	4413      	add	r3, r2
 800a684:	009b      	lsls	r3, r3, #2
 800a686:	4a13      	ldr	r2, [pc, #76]	@ (800a6d4 <xTaskRemoveFromEventList+0xb8>)
 800a688:	441a      	add	r2, r3
 800a68a:	693b      	ldr	r3, [r7, #16]
 800a68c:	3304      	adds	r3, #4
 800a68e:	4619      	mov	r1, r3
 800a690:	4610      	mov	r0, r2
 800a692:	f7fe fbc2 	bl	8008e1a <vListInsertEnd>
 800a696:	e005      	b.n	800a6a4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a698:	693b      	ldr	r3, [r7, #16]
 800a69a:	3318      	adds	r3, #24
 800a69c:	4619      	mov	r1, r3
 800a69e:	480e      	ldr	r0, [pc, #56]	@ (800a6d8 <xTaskRemoveFromEventList+0xbc>)
 800a6a0:	f7fe fbbb 	bl	8008e1a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a6a4:	693b      	ldr	r3, [r7, #16]
 800a6a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6a8:	4b0c      	ldr	r3, [pc, #48]	@ (800a6dc <xTaskRemoveFromEventList+0xc0>)
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6ae:	429a      	cmp	r2, r3
 800a6b0:	d905      	bls.n	800a6be <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a6b6:	4b0a      	ldr	r3, [pc, #40]	@ (800a6e0 <xTaskRemoveFromEventList+0xc4>)
 800a6b8:	2201      	movs	r2, #1
 800a6ba:	601a      	str	r2, [r3, #0]
 800a6bc:	e001      	b.n	800a6c2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a6c2:	697b      	ldr	r3, [r7, #20]
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	3718      	adds	r7, #24
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd80      	pop	{r7, pc}
 800a6cc:	20001188 	.word	0x20001188
 800a6d0:	20001168 	.word	0x20001168
 800a6d4:	20000c90 	.word	0x20000c90
 800a6d8:	20001120 	.word	0x20001120
 800a6dc:	20000c8c 	.word	0x20000c8c
 800a6e0:	20001174 	.word	0x20001174

0800a6e4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b083      	sub	sp, #12
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a6ec:	4b06      	ldr	r3, [pc, #24]	@ (800a708 <vTaskInternalSetTimeOutState+0x24>)
 800a6ee:	681a      	ldr	r2, [r3, #0]
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a6f4:	4b05      	ldr	r3, [pc, #20]	@ (800a70c <vTaskInternalSetTimeOutState+0x28>)
 800a6f6:	681a      	ldr	r2, [r3, #0]
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	605a      	str	r2, [r3, #4]
}
 800a6fc:	bf00      	nop
 800a6fe:	370c      	adds	r7, #12
 800a700:	46bd      	mov	sp, r7
 800a702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a706:	4770      	bx	lr
 800a708:	20001178 	.word	0x20001178
 800a70c:	20001164 	.word	0x20001164

0800a710 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b088      	sub	sp, #32
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
 800a718:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d10b      	bne.n	800a738 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a724:	f383 8811 	msr	BASEPRI, r3
 800a728:	f3bf 8f6f 	isb	sy
 800a72c:	f3bf 8f4f 	dsb	sy
 800a730:	613b      	str	r3, [r7, #16]
}
 800a732:	bf00      	nop
 800a734:	bf00      	nop
 800a736:	e7fd      	b.n	800a734 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d10b      	bne.n	800a756 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a73e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a742:	f383 8811 	msr	BASEPRI, r3
 800a746:	f3bf 8f6f 	isb	sy
 800a74a:	f3bf 8f4f 	dsb	sy
 800a74e:	60fb      	str	r3, [r7, #12]
}
 800a750:	bf00      	nop
 800a752:	bf00      	nop
 800a754:	e7fd      	b.n	800a752 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a756:	f000 ff8f 	bl	800b678 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a75a:	4b1d      	ldr	r3, [pc, #116]	@ (800a7d0 <xTaskCheckForTimeOut+0xc0>)
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	685b      	ldr	r3, [r3, #4]
 800a764:	69ba      	ldr	r2, [r7, #24]
 800a766:	1ad3      	subs	r3, r2, r3
 800a768:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a772:	d102      	bne.n	800a77a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a774:	2300      	movs	r3, #0
 800a776:	61fb      	str	r3, [r7, #28]
 800a778:	e023      	b.n	800a7c2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681a      	ldr	r2, [r3, #0]
 800a77e:	4b15      	ldr	r3, [pc, #84]	@ (800a7d4 <xTaskCheckForTimeOut+0xc4>)
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	429a      	cmp	r2, r3
 800a784:	d007      	beq.n	800a796 <xTaskCheckForTimeOut+0x86>
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	685b      	ldr	r3, [r3, #4]
 800a78a:	69ba      	ldr	r2, [r7, #24]
 800a78c:	429a      	cmp	r2, r3
 800a78e:	d302      	bcc.n	800a796 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a790:	2301      	movs	r3, #1
 800a792:	61fb      	str	r3, [r7, #28]
 800a794:	e015      	b.n	800a7c2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	697a      	ldr	r2, [r7, #20]
 800a79c:	429a      	cmp	r2, r3
 800a79e:	d20b      	bcs.n	800a7b8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	681a      	ldr	r2, [r3, #0]
 800a7a4:	697b      	ldr	r3, [r7, #20]
 800a7a6:	1ad2      	subs	r2, r2, r3
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f7ff ff99 	bl	800a6e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	61fb      	str	r3, [r7, #28]
 800a7b6:	e004      	b.n	800a7c2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a7be:	2301      	movs	r3, #1
 800a7c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a7c2:	f000 ff8b 	bl	800b6dc <vPortExitCritical>

	return xReturn;
 800a7c6:	69fb      	ldr	r3, [r7, #28]
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3720      	adds	r7, #32
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}
 800a7d0:	20001164 	.word	0x20001164
 800a7d4:	20001178 	.word	0x20001178

0800a7d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a7d8:	b480      	push	{r7}
 800a7da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a7dc:	4b03      	ldr	r3, [pc, #12]	@ (800a7ec <vTaskMissedYield+0x14>)
 800a7de:	2201      	movs	r2, #1
 800a7e0:	601a      	str	r2, [r3, #0]
}
 800a7e2:	bf00      	nop
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ea:	4770      	bx	lr
 800a7ec:	20001174 	.word	0x20001174

0800a7f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b082      	sub	sp, #8
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a7f8:	f000 f852 	bl	800a8a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a7fc:	4b06      	ldr	r3, [pc, #24]	@ (800a818 <prvIdleTask+0x28>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	2b01      	cmp	r3, #1
 800a802:	d9f9      	bls.n	800a7f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a804:	4b05      	ldr	r3, [pc, #20]	@ (800a81c <prvIdleTask+0x2c>)
 800a806:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a80a:	601a      	str	r2, [r3, #0]
 800a80c:	f3bf 8f4f 	dsb	sy
 800a810:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a814:	e7f0      	b.n	800a7f8 <prvIdleTask+0x8>
 800a816:	bf00      	nop
 800a818:	20000c90 	.word	0x20000c90
 800a81c:	e000ed04 	.word	0xe000ed04

0800a820 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b082      	sub	sp, #8
 800a824:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a826:	2300      	movs	r3, #0
 800a828:	607b      	str	r3, [r7, #4]
 800a82a:	e00c      	b.n	800a846 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a82c:	687a      	ldr	r2, [r7, #4]
 800a82e:	4613      	mov	r3, r2
 800a830:	009b      	lsls	r3, r3, #2
 800a832:	4413      	add	r3, r2
 800a834:	009b      	lsls	r3, r3, #2
 800a836:	4a12      	ldr	r2, [pc, #72]	@ (800a880 <prvInitialiseTaskLists+0x60>)
 800a838:	4413      	add	r3, r2
 800a83a:	4618      	mov	r0, r3
 800a83c:	f7fe fac0 	bl	8008dc0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	3301      	adds	r3, #1
 800a844:	607b      	str	r3, [r7, #4]
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2b37      	cmp	r3, #55	@ 0x37
 800a84a:	d9ef      	bls.n	800a82c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a84c:	480d      	ldr	r0, [pc, #52]	@ (800a884 <prvInitialiseTaskLists+0x64>)
 800a84e:	f7fe fab7 	bl	8008dc0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a852:	480d      	ldr	r0, [pc, #52]	@ (800a888 <prvInitialiseTaskLists+0x68>)
 800a854:	f7fe fab4 	bl	8008dc0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a858:	480c      	ldr	r0, [pc, #48]	@ (800a88c <prvInitialiseTaskLists+0x6c>)
 800a85a:	f7fe fab1 	bl	8008dc0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a85e:	480c      	ldr	r0, [pc, #48]	@ (800a890 <prvInitialiseTaskLists+0x70>)
 800a860:	f7fe faae 	bl	8008dc0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a864:	480b      	ldr	r0, [pc, #44]	@ (800a894 <prvInitialiseTaskLists+0x74>)
 800a866:	f7fe faab 	bl	8008dc0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a86a:	4b0b      	ldr	r3, [pc, #44]	@ (800a898 <prvInitialiseTaskLists+0x78>)
 800a86c:	4a05      	ldr	r2, [pc, #20]	@ (800a884 <prvInitialiseTaskLists+0x64>)
 800a86e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a870:	4b0a      	ldr	r3, [pc, #40]	@ (800a89c <prvInitialiseTaskLists+0x7c>)
 800a872:	4a05      	ldr	r2, [pc, #20]	@ (800a888 <prvInitialiseTaskLists+0x68>)
 800a874:	601a      	str	r2, [r3, #0]
}
 800a876:	bf00      	nop
 800a878:	3708      	adds	r7, #8
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bd80      	pop	{r7, pc}
 800a87e:	bf00      	nop
 800a880:	20000c90 	.word	0x20000c90
 800a884:	200010f0 	.word	0x200010f0
 800a888:	20001104 	.word	0x20001104
 800a88c:	20001120 	.word	0x20001120
 800a890:	20001134 	.word	0x20001134
 800a894:	2000114c 	.word	0x2000114c
 800a898:	20001118 	.word	0x20001118
 800a89c:	2000111c 	.word	0x2000111c

0800a8a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b082      	sub	sp, #8
 800a8a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a8a6:	e019      	b.n	800a8dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a8a8:	f000 fee6 	bl	800b678 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8ac:	4b10      	ldr	r3, [pc, #64]	@ (800a8f0 <prvCheckTasksWaitingTermination+0x50>)
 800a8ae:	68db      	ldr	r3, [r3, #12]
 800a8b0:	68db      	ldr	r3, [r3, #12]
 800a8b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	3304      	adds	r3, #4
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	f7fe fb0b 	bl	8008ed4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a8be:	4b0d      	ldr	r3, [pc, #52]	@ (800a8f4 <prvCheckTasksWaitingTermination+0x54>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	3b01      	subs	r3, #1
 800a8c4:	4a0b      	ldr	r2, [pc, #44]	@ (800a8f4 <prvCheckTasksWaitingTermination+0x54>)
 800a8c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a8c8:	4b0b      	ldr	r3, [pc, #44]	@ (800a8f8 <prvCheckTasksWaitingTermination+0x58>)
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	3b01      	subs	r3, #1
 800a8ce:	4a0a      	ldr	r2, [pc, #40]	@ (800a8f8 <prvCheckTasksWaitingTermination+0x58>)
 800a8d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a8d2:	f000 ff03 	bl	800b6dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	f000 f810 	bl	800a8fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a8dc:	4b06      	ldr	r3, [pc, #24]	@ (800a8f8 <prvCheckTasksWaitingTermination+0x58>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d1e1      	bne.n	800a8a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a8e4:	bf00      	nop
 800a8e6:	bf00      	nop
 800a8e8:	3708      	adds	r7, #8
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bd80      	pop	{r7, pc}
 800a8ee:	bf00      	nop
 800a8f0:	20001134 	.word	0x20001134
 800a8f4:	20001160 	.word	0x20001160
 800a8f8:	20001148 	.word	0x20001148

0800a8fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b084      	sub	sp, #16
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d108      	bne.n	800a920 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a912:	4618      	mov	r0, r3
 800a914:	f001 f8a0 	bl	800ba58 <vPortFree>
				vPortFree( pxTCB );
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f001 f89d 	bl	800ba58 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a91e:	e019      	b.n	800a954 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a926:	2b01      	cmp	r3, #1
 800a928:	d103      	bne.n	800a932 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f001 f894 	bl	800ba58 <vPortFree>
	}
 800a930:	e010      	b.n	800a954 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a938:	2b02      	cmp	r3, #2
 800a93a:	d00b      	beq.n	800a954 <prvDeleteTCB+0x58>
	__asm volatile
 800a93c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a940:	f383 8811 	msr	BASEPRI, r3
 800a944:	f3bf 8f6f 	isb	sy
 800a948:	f3bf 8f4f 	dsb	sy
 800a94c:	60fb      	str	r3, [r7, #12]
}
 800a94e:	bf00      	nop
 800a950:	bf00      	nop
 800a952:	e7fd      	b.n	800a950 <prvDeleteTCB+0x54>
	}
 800a954:	bf00      	nop
 800a956:	3710      	adds	r7, #16
 800a958:	46bd      	mov	sp, r7
 800a95a:	bd80      	pop	{r7, pc}

0800a95c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a95c:	b480      	push	{r7}
 800a95e:	b083      	sub	sp, #12
 800a960:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a962:	4b0c      	ldr	r3, [pc, #48]	@ (800a994 <prvResetNextTaskUnblockTime+0x38>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d104      	bne.n	800a976 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a96c:	4b0a      	ldr	r3, [pc, #40]	@ (800a998 <prvResetNextTaskUnblockTime+0x3c>)
 800a96e:	f04f 32ff 	mov.w	r2, #4294967295
 800a972:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a974:	e008      	b.n	800a988 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a976:	4b07      	ldr	r3, [pc, #28]	@ (800a994 <prvResetNextTaskUnblockTime+0x38>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	68db      	ldr	r3, [r3, #12]
 800a97c:	68db      	ldr	r3, [r3, #12]
 800a97e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	685b      	ldr	r3, [r3, #4]
 800a984:	4a04      	ldr	r2, [pc, #16]	@ (800a998 <prvResetNextTaskUnblockTime+0x3c>)
 800a986:	6013      	str	r3, [r2, #0]
}
 800a988:	bf00      	nop
 800a98a:	370c      	adds	r7, #12
 800a98c:	46bd      	mov	sp, r7
 800a98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a992:	4770      	bx	lr
 800a994:	20001118 	.word	0x20001118
 800a998:	20001180 	.word	0x20001180

0800a99c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a99c:	b480      	push	{r7}
 800a99e:	b083      	sub	sp, #12
 800a9a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a9a2:	4b0b      	ldr	r3, [pc, #44]	@ (800a9d0 <xTaskGetSchedulerState+0x34>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d102      	bne.n	800a9b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	607b      	str	r3, [r7, #4]
 800a9ae:	e008      	b.n	800a9c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a9b0:	4b08      	ldr	r3, [pc, #32]	@ (800a9d4 <xTaskGetSchedulerState+0x38>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d102      	bne.n	800a9be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a9b8:	2302      	movs	r3, #2
 800a9ba:	607b      	str	r3, [r7, #4]
 800a9bc:	e001      	b.n	800a9c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a9c2:	687b      	ldr	r3, [r7, #4]
	}
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	370c      	adds	r7, #12
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ce:	4770      	bx	lr
 800a9d0:	2000116c 	.word	0x2000116c
 800a9d4:	20001188 	.word	0x20001188

0800a9d8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b084      	sub	sp, #16
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d051      	beq.n	800aa92 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a9ee:	68bb      	ldr	r3, [r7, #8]
 800a9f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9f2:	4b2a      	ldr	r3, [pc, #168]	@ (800aa9c <xTaskPriorityInherit+0xc4>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9f8:	429a      	cmp	r2, r3
 800a9fa:	d241      	bcs.n	800aa80 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	699b      	ldr	r3, [r3, #24]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	db06      	blt.n	800aa12 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa04:	4b25      	ldr	r3, [pc, #148]	@ (800aa9c <xTaskPriorityInherit+0xc4>)
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa0a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800aa0e:	68bb      	ldr	r3, [r7, #8]
 800aa10:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800aa12:	68bb      	ldr	r3, [r7, #8]
 800aa14:	6959      	ldr	r1, [r3, #20]
 800aa16:	68bb      	ldr	r3, [r7, #8]
 800aa18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa1a:	4613      	mov	r3, r2
 800aa1c:	009b      	lsls	r3, r3, #2
 800aa1e:	4413      	add	r3, r2
 800aa20:	009b      	lsls	r3, r3, #2
 800aa22:	4a1f      	ldr	r2, [pc, #124]	@ (800aaa0 <xTaskPriorityInherit+0xc8>)
 800aa24:	4413      	add	r3, r2
 800aa26:	4299      	cmp	r1, r3
 800aa28:	d122      	bne.n	800aa70 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aa2a:	68bb      	ldr	r3, [r7, #8]
 800aa2c:	3304      	adds	r3, #4
 800aa2e:	4618      	mov	r0, r3
 800aa30:	f7fe fa50 	bl	8008ed4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800aa34:	4b19      	ldr	r3, [pc, #100]	@ (800aa9c <xTaskPriorityInherit+0xc4>)
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800aa3e:	68bb      	ldr	r3, [r7, #8]
 800aa40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa42:	4b18      	ldr	r3, [pc, #96]	@ (800aaa4 <xTaskPriorityInherit+0xcc>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	429a      	cmp	r2, r3
 800aa48:	d903      	bls.n	800aa52 <xTaskPriorityInherit+0x7a>
 800aa4a:	68bb      	ldr	r3, [r7, #8]
 800aa4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa4e:	4a15      	ldr	r2, [pc, #84]	@ (800aaa4 <xTaskPriorityInherit+0xcc>)
 800aa50:	6013      	str	r3, [r2, #0]
 800aa52:	68bb      	ldr	r3, [r7, #8]
 800aa54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa56:	4613      	mov	r3, r2
 800aa58:	009b      	lsls	r3, r3, #2
 800aa5a:	4413      	add	r3, r2
 800aa5c:	009b      	lsls	r3, r3, #2
 800aa5e:	4a10      	ldr	r2, [pc, #64]	@ (800aaa0 <xTaskPriorityInherit+0xc8>)
 800aa60:	441a      	add	r2, r3
 800aa62:	68bb      	ldr	r3, [r7, #8]
 800aa64:	3304      	adds	r3, #4
 800aa66:	4619      	mov	r1, r3
 800aa68:	4610      	mov	r0, r2
 800aa6a:	f7fe f9d6 	bl	8008e1a <vListInsertEnd>
 800aa6e:	e004      	b.n	800aa7a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800aa70:	4b0a      	ldr	r3, [pc, #40]	@ (800aa9c <xTaskPriorityInherit+0xc4>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa76:	68bb      	ldr	r3, [r7, #8]
 800aa78:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	60fb      	str	r3, [r7, #12]
 800aa7e:	e008      	b.n	800aa92 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800aa80:	68bb      	ldr	r3, [r7, #8]
 800aa82:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800aa84:	4b05      	ldr	r3, [pc, #20]	@ (800aa9c <xTaskPriorityInherit+0xc4>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa8a:	429a      	cmp	r2, r3
 800aa8c:	d201      	bcs.n	800aa92 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800aa8e:	2301      	movs	r3, #1
 800aa90:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aa92:	68fb      	ldr	r3, [r7, #12]
	}
 800aa94:	4618      	mov	r0, r3
 800aa96:	3710      	adds	r7, #16
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	bd80      	pop	{r7, pc}
 800aa9c:	20000c8c 	.word	0x20000c8c
 800aaa0:	20000c90 	.word	0x20000c90
 800aaa4:	20001168 	.word	0x20001168

0800aaa8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b086      	sub	sp, #24
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800aab4:	2300      	movs	r3, #0
 800aab6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d058      	beq.n	800ab70 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800aabe:	4b2f      	ldr	r3, [pc, #188]	@ (800ab7c <xTaskPriorityDisinherit+0xd4>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	693a      	ldr	r2, [r7, #16]
 800aac4:	429a      	cmp	r2, r3
 800aac6:	d00b      	beq.n	800aae0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800aac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aacc:	f383 8811 	msr	BASEPRI, r3
 800aad0:	f3bf 8f6f 	isb	sy
 800aad4:	f3bf 8f4f 	dsb	sy
 800aad8:	60fb      	str	r3, [r7, #12]
}
 800aada:	bf00      	nop
 800aadc:	bf00      	nop
 800aade:	e7fd      	b.n	800aadc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800aae0:	693b      	ldr	r3, [r7, #16]
 800aae2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d10b      	bne.n	800ab00 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800aae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaec:	f383 8811 	msr	BASEPRI, r3
 800aaf0:	f3bf 8f6f 	isb	sy
 800aaf4:	f3bf 8f4f 	dsb	sy
 800aaf8:	60bb      	str	r3, [r7, #8]
}
 800aafa:	bf00      	nop
 800aafc:	bf00      	nop
 800aafe:	e7fd      	b.n	800aafc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800ab00:	693b      	ldr	r3, [r7, #16]
 800ab02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab04:	1e5a      	subs	r2, r3, #1
 800ab06:	693b      	ldr	r3, [r7, #16]
 800ab08:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ab0a:	693b      	ldr	r3, [r7, #16]
 800ab0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab0e:	693b      	ldr	r3, [r7, #16]
 800ab10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab12:	429a      	cmp	r2, r3
 800ab14:	d02c      	beq.n	800ab70 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ab16:	693b      	ldr	r3, [r7, #16]
 800ab18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d128      	bne.n	800ab70 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab1e:	693b      	ldr	r3, [r7, #16]
 800ab20:	3304      	adds	r3, #4
 800ab22:	4618      	mov	r0, r3
 800ab24:	f7fe f9d6 	bl	8008ed4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ab28:	693b      	ldr	r3, [r7, #16]
 800ab2a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ab2c:	693b      	ldr	r3, [r7, #16]
 800ab2e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab30:	693b      	ldr	r3, [r7, #16]
 800ab32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab34:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ab38:	693b      	ldr	r3, [r7, #16]
 800ab3a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ab3c:	693b      	ldr	r3, [r7, #16]
 800ab3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab40:	4b0f      	ldr	r3, [pc, #60]	@ (800ab80 <xTaskPriorityDisinherit+0xd8>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	429a      	cmp	r2, r3
 800ab46:	d903      	bls.n	800ab50 <xTaskPriorityDisinherit+0xa8>
 800ab48:	693b      	ldr	r3, [r7, #16]
 800ab4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab4c:	4a0c      	ldr	r2, [pc, #48]	@ (800ab80 <xTaskPriorityDisinherit+0xd8>)
 800ab4e:	6013      	str	r3, [r2, #0]
 800ab50:	693b      	ldr	r3, [r7, #16]
 800ab52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab54:	4613      	mov	r3, r2
 800ab56:	009b      	lsls	r3, r3, #2
 800ab58:	4413      	add	r3, r2
 800ab5a:	009b      	lsls	r3, r3, #2
 800ab5c:	4a09      	ldr	r2, [pc, #36]	@ (800ab84 <xTaskPriorityDisinherit+0xdc>)
 800ab5e:	441a      	add	r2, r3
 800ab60:	693b      	ldr	r3, [r7, #16]
 800ab62:	3304      	adds	r3, #4
 800ab64:	4619      	mov	r1, r3
 800ab66:	4610      	mov	r0, r2
 800ab68:	f7fe f957 	bl	8008e1a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ab70:	697b      	ldr	r3, [r7, #20]
	}
 800ab72:	4618      	mov	r0, r3
 800ab74:	3718      	adds	r7, #24
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}
 800ab7a:	bf00      	nop
 800ab7c:	20000c8c 	.word	0x20000c8c
 800ab80:	20001168 	.word	0x20001168
 800ab84:	20000c90 	.word	0x20000c90

0800ab88 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b088      	sub	sp, #32
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
 800ab90:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ab96:	2301      	movs	r3, #1
 800ab98:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d06c      	beq.n	800ac7a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800aba0:	69bb      	ldr	r3, [r7, #24]
 800aba2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d10b      	bne.n	800abc0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800aba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abac:	f383 8811 	msr	BASEPRI, r3
 800abb0:	f3bf 8f6f 	isb	sy
 800abb4:	f3bf 8f4f 	dsb	sy
 800abb8:	60fb      	str	r3, [r7, #12]
}
 800abba:	bf00      	nop
 800abbc:	bf00      	nop
 800abbe:	e7fd      	b.n	800abbc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800abc0:	69bb      	ldr	r3, [r7, #24]
 800abc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800abc4:	683a      	ldr	r2, [r7, #0]
 800abc6:	429a      	cmp	r2, r3
 800abc8:	d902      	bls.n	800abd0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	61fb      	str	r3, [r7, #28]
 800abce:	e002      	b.n	800abd6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800abd0:	69bb      	ldr	r3, [r7, #24]
 800abd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800abd4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800abd6:	69bb      	ldr	r3, [r7, #24]
 800abd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abda:	69fa      	ldr	r2, [r7, #28]
 800abdc:	429a      	cmp	r2, r3
 800abde:	d04c      	beq.n	800ac7a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800abe0:	69bb      	ldr	r3, [r7, #24]
 800abe2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800abe4:	697a      	ldr	r2, [r7, #20]
 800abe6:	429a      	cmp	r2, r3
 800abe8:	d147      	bne.n	800ac7a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800abea:	4b26      	ldr	r3, [pc, #152]	@ (800ac84 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	69ba      	ldr	r2, [r7, #24]
 800abf0:	429a      	cmp	r2, r3
 800abf2:	d10b      	bne.n	800ac0c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800abf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abf8:	f383 8811 	msr	BASEPRI, r3
 800abfc:	f3bf 8f6f 	isb	sy
 800ac00:	f3bf 8f4f 	dsb	sy
 800ac04:	60bb      	str	r3, [r7, #8]
}
 800ac06:	bf00      	nop
 800ac08:	bf00      	nop
 800ac0a:	e7fd      	b.n	800ac08 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ac0c:	69bb      	ldr	r3, [r7, #24]
 800ac0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac10:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ac12:	69bb      	ldr	r3, [r7, #24]
 800ac14:	69fa      	ldr	r2, [r7, #28]
 800ac16:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ac18:	69bb      	ldr	r3, [r7, #24]
 800ac1a:	699b      	ldr	r3, [r3, #24]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	db04      	blt.n	800ac2a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac20:	69fb      	ldr	r3, [r7, #28]
 800ac22:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ac26:	69bb      	ldr	r3, [r7, #24]
 800ac28:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ac2a:	69bb      	ldr	r3, [r7, #24]
 800ac2c:	6959      	ldr	r1, [r3, #20]
 800ac2e:	693a      	ldr	r2, [r7, #16]
 800ac30:	4613      	mov	r3, r2
 800ac32:	009b      	lsls	r3, r3, #2
 800ac34:	4413      	add	r3, r2
 800ac36:	009b      	lsls	r3, r3, #2
 800ac38:	4a13      	ldr	r2, [pc, #76]	@ (800ac88 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ac3a:	4413      	add	r3, r2
 800ac3c:	4299      	cmp	r1, r3
 800ac3e:	d11c      	bne.n	800ac7a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ac40:	69bb      	ldr	r3, [r7, #24]
 800ac42:	3304      	adds	r3, #4
 800ac44:	4618      	mov	r0, r3
 800ac46:	f7fe f945 	bl	8008ed4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ac4a:	69bb      	ldr	r3, [r7, #24]
 800ac4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac4e:	4b0f      	ldr	r3, [pc, #60]	@ (800ac8c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	429a      	cmp	r2, r3
 800ac54:	d903      	bls.n	800ac5e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800ac56:	69bb      	ldr	r3, [r7, #24]
 800ac58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac5a:	4a0c      	ldr	r2, [pc, #48]	@ (800ac8c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ac5c:	6013      	str	r3, [r2, #0]
 800ac5e:	69bb      	ldr	r3, [r7, #24]
 800ac60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac62:	4613      	mov	r3, r2
 800ac64:	009b      	lsls	r3, r3, #2
 800ac66:	4413      	add	r3, r2
 800ac68:	009b      	lsls	r3, r3, #2
 800ac6a:	4a07      	ldr	r2, [pc, #28]	@ (800ac88 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ac6c:	441a      	add	r2, r3
 800ac6e:	69bb      	ldr	r3, [r7, #24]
 800ac70:	3304      	adds	r3, #4
 800ac72:	4619      	mov	r1, r3
 800ac74:	4610      	mov	r0, r2
 800ac76:	f7fe f8d0 	bl	8008e1a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ac7a:	bf00      	nop
 800ac7c:	3720      	adds	r7, #32
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bd80      	pop	{r7, pc}
 800ac82:	bf00      	nop
 800ac84:	20000c8c 	.word	0x20000c8c
 800ac88:	20000c90 	.word	0x20000c90
 800ac8c:	20001168 	.word	0x20001168

0800ac90 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ac90:	b480      	push	{r7}
 800ac92:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ac94:	4b07      	ldr	r3, [pc, #28]	@ (800acb4 <pvTaskIncrementMutexHeldCount+0x24>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d004      	beq.n	800aca6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ac9c:	4b05      	ldr	r3, [pc, #20]	@ (800acb4 <pvTaskIncrementMutexHeldCount+0x24>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800aca2:	3201      	adds	r2, #1
 800aca4:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800aca6:	4b03      	ldr	r3, [pc, #12]	@ (800acb4 <pvTaskIncrementMutexHeldCount+0x24>)
 800aca8:	681b      	ldr	r3, [r3, #0]
	}
 800acaa:	4618      	mov	r0, r3
 800acac:	46bd      	mov	sp, r7
 800acae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb2:	4770      	bx	lr
 800acb4:	20000c8c 	.word	0x20000c8c

0800acb8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b084      	sub	sp, #16
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
 800acc0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800acc2:	4b21      	ldr	r3, [pc, #132]	@ (800ad48 <prvAddCurrentTaskToDelayedList+0x90>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800acc8:	4b20      	ldr	r3, [pc, #128]	@ (800ad4c <prvAddCurrentTaskToDelayedList+0x94>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	3304      	adds	r3, #4
 800acce:	4618      	mov	r0, r3
 800acd0:	f7fe f900 	bl	8008ed4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acda:	d10a      	bne.n	800acf2 <prvAddCurrentTaskToDelayedList+0x3a>
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d007      	beq.n	800acf2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ace2:	4b1a      	ldr	r3, [pc, #104]	@ (800ad4c <prvAddCurrentTaskToDelayedList+0x94>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	3304      	adds	r3, #4
 800ace8:	4619      	mov	r1, r3
 800acea:	4819      	ldr	r0, [pc, #100]	@ (800ad50 <prvAddCurrentTaskToDelayedList+0x98>)
 800acec:	f7fe f895 	bl	8008e1a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800acf0:	e026      	b.n	800ad40 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800acf2:	68fa      	ldr	r2, [r7, #12]
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	4413      	add	r3, r2
 800acf8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800acfa:	4b14      	ldr	r3, [pc, #80]	@ (800ad4c <prvAddCurrentTaskToDelayedList+0x94>)
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	68ba      	ldr	r2, [r7, #8]
 800ad00:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ad02:	68ba      	ldr	r2, [r7, #8]
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	429a      	cmp	r2, r3
 800ad08:	d209      	bcs.n	800ad1e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad0a:	4b12      	ldr	r3, [pc, #72]	@ (800ad54 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ad0c:	681a      	ldr	r2, [r3, #0]
 800ad0e:	4b0f      	ldr	r3, [pc, #60]	@ (800ad4c <prvAddCurrentTaskToDelayedList+0x94>)
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	3304      	adds	r3, #4
 800ad14:	4619      	mov	r1, r3
 800ad16:	4610      	mov	r0, r2
 800ad18:	f7fe f8a3 	bl	8008e62 <vListInsert>
}
 800ad1c:	e010      	b.n	800ad40 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad1e:	4b0e      	ldr	r3, [pc, #56]	@ (800ad58 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ad20:	681a      	ldr	r2, [r3, #0]
 800ad22:	4b0a      	ldr	r3, [pc, #40]	@ (800ad4c <prvAddCurrentTaskToDelayedList+0x94>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	3304      	adds	r3, #4
 800ad28:	4619      	mov	r1, r3
 800ad2a:	4610      	mov	r0, r2
 800ad2c:	f7fe f899 	bl	8008e62 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ad30:	4b0a      	ldr	r3, [pc, #40]	@ (800ad5c <prvAddCurrentTaskToDelayedList+0xa4>)
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	68ba      	ldr	r2, [r7, #8]
 800ad36:	429a      	cmp	r2, r3
 800ad38:	d202      	bcs.n	800ad40 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ad3a:	4a08      	ldr	r2, [pc, #32]	@ (800ad5c <prvAddCurrentTaskToDelayedList+0xa4>)
 800ad3c:	68bb      	ldr	r3, [r7, #8]
 800ad3e:	6013      	str	r3, [r2, #0]
}
 800ad40:	bf00      	nop
 800ad42:	3710      	adds	r7, #16
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd80      	pop	{r7, pc}
 800ad48:	20001164 	.word	0x20001164
 800ad4c:	20000c8c 	.word	0x20000c8c
 800ad50:	2000114c 	.word	0x2000114c
 800ad54:	2000111c 	.word	0x2000111c
 800ad58:	20001118 	.word	0x20001118
 800ad5c:	20001180 	.word	0x20001180

0800ad60 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b08a      	sub	sp, #40	@ 0x28
 800ad64:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ad66:	2300      	movs	r3, #0
 800ad68:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ad6a:	f000 fb13 	bl	800b394 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ad6e:	4b1d      	ldr	r3, [pc, #116]	@ (800ade4 <xTimerCreateTimerTask+0x84>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d021      	beq.n	800adba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ad76:	2300      	movs	r3, #0
 800ad78:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ad7e:	1d3a      	adds	r2, r7, #4
 800ad80:	f107 0108 	add.w	r1, r7, #8
 800ad84:	f107 030c 	add.w	r3, r7, #12
 800ad88:	4618      	mov	r0, r3
 800ad8a:	f7fd ffff 	bl	8008d8c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ad8e:	6879      	ldr	r1, [r7, #4]
 800ad90:	68bb      	ldr	r3, [r7, #8]
 800ad92:	68fa      	ldr	r2, [r7, #12]
 800ad94:	9202      	str	r2, [sp, #8]
 800ad96:	9301      	str	r3, [sp, #4]
 800ad98:	2302      	movs	r3, #2
 800ad9a:	9300      	str	r3, [sp, #0]
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	460a      	mov	r2, r1
 800ada0:	4911      	ldr	r1, [pc, #68]	@ (800ade8 <xTimerCreateTimerTask+0x88>)
 800ada2:	4812      	ldr	r0, [pc, #72]	@ (800adec <xTimerCreateTimerTask+0x8c>)
 800ada4:	f7fe ff50 	bl	8009c48 <xTaskCreateStatic>
 800ada8:	4603      	mov	r3, r0
 800adaa:	4a11      	ldr	r2, [pc, #68]	@ (800adf0 <xTimerCreateTimerTask+0x90>)
 800adac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800adae:	4b10      	ldr	r3, [pc, #64]	@ (800adf0 <xTimerCreateTimerTask+0x90>)
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d001      	beq.n	800adba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800adb6:	2301      	movs	r3, #1
 800adb8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800adba:	697b      	ldr	r3, [r7, #20]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d10b      	bne.n	800add8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800adc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adc4:	f383 8811 	msr	BASEPRI, r3
 800adc8:	f3bf 8f6f 	isb	sy
 800adcc:	f3bf 8f4f 	dsb	sy
 800add0:	613b      	str	r3, [r7, #16]
}
 800add2:	bf00      	nop
 800add4:	bf00      	nop
 800add6:	e7fd      	b.n	800add4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800add8:	697b      	ldr	r3, [r7, #20]
}
 800adda:	4618      	mov	r0, r3
 800addc:	3718      	adds	r7, #24
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}
 800ade2:	bf00      	nop
 800ade4:	200011bc 	.word	0x200011bc
 800ade8:	0800db90 	.word	0x0800db90
 800adec:	0800af2d 	.word	0x0800af2d
 800adf0:	200011c0 	.word	0x200011c0

0800adf4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b08a      	sub	sp, #40	@ 0x28
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	60f8      	str	r0, [r7, #12]
 800adfc:	60b9      	str	r1, [r7, #8]
 800adfe:	607a      	str	r2, [r7, #4]
 800ae00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ae02:	2300      	movs	r3, #0
 800ae04:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d10b      	bne.n	800ae24 <xTimerGenericCommand+0x30>
	__asm volatile
 800ae0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae10:	f383 8811 	msr	BASEPRI, r3
 800ae14:	f3bf 8f6f 	isb	sy
 800ae18:	f3bf 8f4f 	dsb	sy
 800ae1c:	623b      	str	r3, [r7, #32]
}
 800ae1e:	bf00      	nop
 800ae20:	bf00      	nop
 800ae22:	e7fd      	b.n	800ae20 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ae24:	4b19      	ldr	r3, [pc, #100]	@ (800ae8c <xTimerGenericCommand+0x98>)
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d02a      	beq.n	800ae82 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	2b05      	cmp	r3, #5
 800ae3c:	dc18      	bgt.n	800ae70 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ae3e:	f7ff fdad 	bl	800a99c <xTaskGetSchedulerState>
 800ae42:	4603      	mov	r3, r0
 800ae44:	2b02      	cmp	r3, #2
 800ae46:	d109      	bne.n	800ae5c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ae48:	4b10      	ldr	r3, [pc, #64]	@ (800ae8c <xTimerGenericCommand+0x98>)
 800ae4a:	6818      	ldr	r0, [r3, #0]
 800ae4c:	f107 0110 	add.w	r1, r7, #16
 800ae50:	2300      	movs	r3, #0
 800ae52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae54:	f7fe f9e0 	bl	8009218 <xQueueGenericSend>
 800ae58:	6278      	str	r0, [r7, #36]	@ 0x24
 800ae5a:	e012      	b.n	800ae82 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ae5c:	4b0b      	ldr	r3, [pc, #44]	@ (800ae8c <xTimerGenericCommand+0x98>)
 800ae5e:	6818      	ldr	r0, [r3, #0]
 800ae60:	f107 0110 	add.w	r1, r7, #16
 800ae64:	2300      	movs	r3, #0
 800ae66:	2200      	movs	r2, #0
 800ae68:	f7fe f9d6 	bl	8009218 <xQueueGenericSend>
 800ae6c:	6278      	str	r0, [r7, #36]	@ 0x24
 800ae6e:	e008      	b.n	800ae82 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ae70:	4b06      	ldr	r3, [pc, #24]	@ (800ae8c <xTimerGenericCommand+0x98>)
 800ae72:	6818      	ldr	r0, [r3, #0]
 800ae74:	f107 0110 	add.w	r1, r7, #16
 800ae78:	2300      	movs	r3, #0
 800ae7a:	683a      	ldr	r2, [r7, #0]
 800ae7c:	f7fe face 	bl	800941c <xQueueGenericSendFromISR>
 800ae80:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ae82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ae84:	4618      	mov	r0, r3
 800ae86:	3728      	adds	r7, #40	@ 0x28
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	bd80      	pop	{r7, pc}
 800ae8c:	200011bc 	.word	0x200011bc

0800ae90 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b088      	sub	sp, #32
 800ae94:	af02      	add	r7, sp, #8
 800ae96:	6078      	str	r0, [r7, #4]
 800ae98:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae9a:	4b23      	ldr	r3, [pc, #140]	@ (800af28 <prvProcessExpiredTimer+0x98>)
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	68db      	ldr	r3, [r3, #12]
 800aea0:	68db      	ldr	r3, [r3, #12]
 800aea2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aea4:	697b      	ldr	r3, [r7, #20]
 800aea6:	3304      	adds	r3, #4
 800aea8:	4618      	mov	r0, r3
 800aeaa:	f7fe f813 	bl	8008ed4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aeb4:	f003 0304 	and.w	r3, r3, #4
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d023      	beq.n	800af04 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800aebc:	697b      	ldr	r3, [r7, #20]
 800aebe:	699a      	ldr	r2, [r3, #24]
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	18d1      	adds	r1, r2, r3
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	683a      	ldr	r2, [r7, #0]
 800aec8:	6978      	ldr	r0, [r7, #20]
 800aeca:	f000 f8d5 	bl	800b078 <prvInsertTimerInActiveList>
 800aece:	4603      	mov	r3, r0
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d020      	beq.n	800af16 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aed4:	2300      	movs	r3, #0
 800aed6:	9300      	str	r3, [sp, #0]
 800aed8:	2300      	movs	r3, #0
 800aeda:	687a      	ldr	r2, [r7, #4]
 800aedc:	2100      	movs	r1, #0
 800aede:	6978      	ldr	r0, [r7, #20]
 800aee0:	f7ff ff88 	bl	800adf4 <xTimerGenericCommand>
 800aee4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800aee6:	693b      	ldr	r3, [r7, #16]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d114      	bne.n	800af16 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800aeec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aef0:	f383 8811 	msr	BASEPRI, r3
 800aef4:	f3bf 8f6f 	isb	sy
 800aef8:	f3bf 8f4f 	dsb	sy
 800aefc:	60fb      	str	r3, [r7, #12]
}
 800aefe:	bf00      	nop
 800af00:	bf00      	nop
 800af02:	e7fd      	b.n	800af00 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800af04:	697b      	ldr	r3, [r7, #20]
 800af06:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800af0a:	f023 0301 	bic.w	r3, r3, #1
 800af0e:	b2da      	uxtb	r2, r3
 800af10:	697b      	ldr	r3, [r7, #20]
 800af12:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800af16:	697b      	ldr	r3, [r7, #20]
 800af18:	6a1b      	ldr	r3, [r3, #32]
 800af1a:	6978      	ldr	r0, [r7, #20]
 800af1c:	4798      	blx	r3
}
 800af1e:	bf00      	nop
 800af20:	3718      	adds	r7, #24
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}
 800af26:	bf00      	nop
 800af28:	200011b4 	.word	0x200011b4

0800af2c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b084      	sub	sp, #16
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800af34:	f107 0308 	add.w	r3, r7, #8
 800af38:	4618      	mov	r0, r3
 800af3a:	f000 f859 	bl	800aff0 <prvGetNextExpireTime>
 800af3e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	4619      	mov	r1, r3
 800af44:	68f8      	ldr	r0, [r7, #12]
 800af46:	f000 f805 	bl	800af54 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800af4a:	f000 f8d7 	bl	800b0fc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800af4e:	bf00      	nop
 800af50:	e7f0      	b.n	800af34 <prvTimerTask+0x8>
	...

0800af54 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b084      	sub	sp, #16
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
 800af5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800af5e:	f7ff f937 	bl	800a1d0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800af62:	f107 0308 	add.w	r3, r7, #8
 800af66:	4618      	mov	r0, r3
 800af68:	f000 f866 	bl	800b038 <prvSampleTimeNow>
 800af6c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800af6e:	68bb      	ldr	r3, [r7, #8]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d130      	bne.n	800afd6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d10a      	bne.n	800af90 <prvProcessTimerOrBlockTask+0x3c>
 800af7a:	687a      	ldr	r2, [r7, #4]
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	429a      	cmp	r2, r3
 800af80:	d806      	bhi.n	800af90 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800af82:	f7ff f933 	bl	800a1ec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800af86:	68f9      	ldr	r1, [r7, #12]
 800af88:	6878      	ldr	r0, [r7, #4]
 800af8a:	f7ff ff81 	bl	800ae90 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800af8e:	e024      	b.n	800afda <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d008      	beq.n	800afa8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800af96:	4b13      	ldr	r3, [pc, #76]	@ (800afe4 <prvProcessTimerOrBlockTask+0x90>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d101      	bne.n	800afa4 <prvProcessTimerOrBlockTask+0x50>
 800afa0:	2301      	movs	r3, #1
 800afa2:	e000      	b.n	800afa6 <prvProcessTimerOrBlockTask+0x52>
 800afa4:	2300      	movs	r3, #0
 800afa6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800afa8:	4b0f      	ldr	r3, [pc, #60]	@ (800afe8 <prvProcessTimerOrBlockTask+0x94>)
 800afaa:	6818      	ldr	r0, [r3, #0]
 800afac:	687a      	ldr	r2, [r7, #4]
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	1ad3      	subs	r3, r2, r3
 800afb2:	683a      	ldr	r2, [r7, #0]
 800afb4:	4619      	mov	r1, r3
 800afb6:	f7fe fe13 	bl	8009be0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800afba:	f7ff f917 	bl	800a1ec <xTaskResumeAll>
 800afbe:	4603      	mov	r3, r0
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d10a      	bne.n	800afda <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800afc4:	4b09      	ldr	r3, [pc, #36]	@ (800afec <prvProcessTimerOrBlockTask+0x98>)
 800afc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800afca:	601a      	str	r2, [r3, #0]
 800afcc:	f3bf 8f4f 	dsb	sy
 800afd0:	f3bf 8f6f 	isb	sy
}
 800afd4:	e001      	b.n	800afda <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800afd6:	f7ff f909 	bl	800a1ec <xTaskResumeAll>
}
 800afda:	bf00      	nop
 800afdc:	3710      	adds	r7, #16
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}
 800afe2:	bf00      	nop
 800afe4:	200011b8 	.word	0x200011b8
 800afe8:	200011bc 	.word	0x200011bc
 800afec:	e000ed04 	.word	0xe000ed04

0800aff0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800aff0:	b480      	push	{r7}
 800aff2:	b085      	sub	sp, #20
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800aff8:	4b0e      	ldr	r3, [pc, #56]	@ (800b034 <prvGetNextExpireTime+0x44>)
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d101      	bne.n	800b006 <prvGetNextExpireTime+0x16>
 800b002:	2201      	movs	r2, #1
 800b004:	e000      	b.n	800b008 <prvGetNextExpireTime+0x18>
 800b006:	2200      	movs	r2, #0
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d105      	bne.n	800b020 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b014:	4b07      	ldr	r3, [pc, #28]	@ (800b034 <prvGetNextExpireTime+0x44>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	68db      	ldr	r3, [r3, #12]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	60fb      	str	r3, [r7, #12]
 800b01e:	e001      	b.n	800b024 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b020:	2300      	movs	r3, #0
 800b022:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b024:	68fb      	ldr	r3, [r7, #12]
}
 800b026:	4618      	mov	r0, r3
 800b028:	3714      	adds	r7, #20
 800b02a:	46bd      	mov	sp, r7
 800b02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b030:	4770      	bx	lr
 800b032:	bf00      	nop
 800b034:	200011b4 	.word	0x200011b4

0800b038 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b084      	sub	sp, #16
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b040:	f7ff f972 	bl	800a328 <xTaskGetTickCount>
 800b044:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b046:	4b0b      	ldr	r3, [pc, #44]	@ (800b074 <prvSampleTimeNow+0x3c>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	68fa      	ldr	r2, [r7, #12]
 800b04c:	429a      	cmp	r2, r3
 800b04e:	d205      	bcs.n	800b05c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b050:	f000 f93a 	bl	800b2c8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2201      	movs	r2, #1
 800b058:	601a      	str	r2, [r3, #0]
 800b05a:	e002      	b.n	800b062 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2200      	movs	r2, #0
 800b060:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b062:	4a04      	ldr	r2, [pc, #16]	@ (800b074 <prvSampleTimeNow+0x3c>)
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b068:	68fb      	ldr	r3, [r7, #12]
}
 800b06a:	4618      	mov	r0, r3
 800b06c:	3710      	adds	r7, #16
 800b06e:	46bd      	mov	sp, r7
 800b070:	bd80      	pop	{r7, pc}
 800b072:	bf00      	nop
 800b074:	200011c4 	.word	0x200011c4

0800b078 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b086      	sub	sp, #24
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	60f8      	str	r0, [r7, #12]
 800b080:	60b9      	str	r1, [r7, #8]
 800b082:	607a      	str	r2, [r7, #4]
 800b084:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b086:	2300      	movs	r3, #0
 800b088:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	68ba      	ldr	r2, [r7, #8]
 800b08e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	68fa      	ldr	r2, [r7, #12]
 800b094:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b096:	68ba      	ldr	r2, [r7, #8]
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	429a      	cmp	r2, r3
 800b09c:	d812      	bhi.n	800b0c4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b09e:	687a      	ldr	r2, [r7, #4]
 800b0a0:	683b      	ldr	r3, [r7, #0]
 800b0a2:	1ad2      	subs	r2, r2, r3
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	699b      	ldr	r3, [r3, #24]
 800b0a8:	429a      	cmp	r2, r3
 800b0aa:	d302      	bcc.n	800b0b2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b0ac:	2301      	movs	r3, #1
 800b0ae:	617b      	str	r3, [r7, #20]
 800b0b0:	e01b      	b.n	800b0ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b0b2:	4b10      	ldr	r3, [pc, #64]	@ (800b0f4 <prvInsertTimerInActiveList+0x7c>)
 800b0b4:	681a      	ldr	r2, [r3, #0]
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	3304      	adds	r3, #4
 800b0ba:	4619      	mov	r1, r3
 800b0bc:	4610      	mov	r0, r2
 800b0be:	f7fd fed0 	bl	8008e62 <vListInsert>
 800b0c2:	e012      	b.n	800b0ea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b0c4:	687a      	ldr	r2, [r7, #4]
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	429a      	cmp	r2, r3
 800b0ca:	d206      	bcs.n	800b0da <prvInsertTimerInActiveList+0x62>
 800b0cc:	68ba      	ldr	r2, [r7, #8]
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	429a      	cmp	r2, r3
 800b0d2:	d302      	bcc.n	800b0da <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b0d4:	2301      	movs	r3, #1
 800b0d6:	617b      	str	r3, [r7, #20]
 800b0d8:	e007      	b.n	800b0ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b0da:	4b07      	ldr	r3, [pc, #28]	@ (800b0f8 <prvInsertTimerInActiveList+0x80>)
 800b0dc:	681a      	ldr	r2, [r3, #0]
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	3304      	adds	r3, #4
 800b0e2:	4619      	mov	r1, r3
 800b0e4:	4610      	mov	r0, r2
 800b0e6:	f7fd febc 	bl	8008e62 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b0ea:	697b      	ldr	r3, [r7, #20]
}
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	3718      	adds	r7, #24
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	bd80      	pop	{r7, pc}
 800b0f4:	200011b8 	.word	0x200011b8
 800b0f8:	200011b4 	.word	0x200011b4

0800b0fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b08e      	sub	sp, #56	@ 0x38
 800b100:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b102:	e0ce      	b.n	800b2a2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2b00      	cmp	r3, #0
 800b108:	da19      	bge.n	800b13e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b10a:	1d3b      	adds	r3, r7, #4
 800b10c:	3304      	adds	r3, #4
 800b10e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b112:	2b00      	cmp	r3, #0
 800b114:	d10b      	bne.n	800b12e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800b116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b11a:	f383 8811 	msr	BASEPRI, r3
 800b11e:	f3bf 8f6f 	isb	sy
 800b122:	f3bf 8f4f 	dsb	sy
 800b126:	61fb      	str	r3, [r7, #28]
}
 800b128:	bf00      	nop
 800b12a:	bf00      	nop
 800b12c:	e7fd      	b.n	800b12a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b12e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b134:	6850      	ldr	r0, [r2, #4]
 800b136:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b138:	6892      	ldr	r2, [r2, #8]
 800b13a:	4611      	mov	r1, r2
 800b13c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	2b00      	cmp	r3, #0
 800b142:	f2c0 80ae 	blt.w	800b2a2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b14a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b14c:	695b      	ldr	r3, [r3, #20]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d004      	beq.n	800b15c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b154:	3304      	adds	r3, #4
 800b156:	4618      	mov	r0, r3
 800b158:	f7fd febc 	bl	8008ed4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b15c:	463b      	mov	r3, r7
 800b15e:	4618      	mov	r0, r3
 800b160:	f7ff ff6a 	bl	800b038 <prvSampleTimeNow>
 800b164:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2b09      	cmp	r3, #9
 800b16a:	f200 8097 	bhi.w	800b29c <prvProcessReceivedCommands+0x1a0>
 800b16e:	a201      	add	r2, pc, #4	@ (adr r2, 800b174 <prvProcessReceivedCommands+0x78>)
 800b170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b174:	0800b19d 	.word	0x0800b19d
 800b178:	0800b19d 	.word	0x0800b19d
 800b17c:	0800b19d 	.word	0x0800b19d
 800b180:	0800b213 	.word	0x0800b213
 800b184:	0800b227 	.word	0x0800b227
 800b188:	0800b273 	.word	0x0800b273
 800b18c:	0800b19d 	.word	0x0800b19d
 800b190:	0800b19d 	.word	0x0800b19d
 800b194:	0800b213 	.word	0x0800b213
 800b198:	0800b227 	.word	0x0800b227
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b19c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b19e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b1a2:	f043 0301 	orr.w	r3, r3, #1
 800b1a6:	b2da      	uxtb	r2, r3
 800b1a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b1ae:	68ba      	ldr	r2, [r7, #8]
 800b1b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1b2:	699b      	ldr	r3, [r3, #24]
 800b1b4:	18d1      	adds	r1, r2, r3
 800b1b6:	68bb      	ldr	r3, [r7, #8]
 800b1b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b1ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b1bc:	f7ff ff5c 	bl	800b078 <prvInsertTimerInActiveList>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d06c      	beq.n	800b2a0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b1c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1c8:	6a1b      	ldr	r3, [r3, #32]
 800b1ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b1cc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b1ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b1d4:	f003 0304 	and.w	r3, r3, #4
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d061      	beq.n	800b2a0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b1dc:	68ba      	ldr	r2, [r7, #8]
 800b1de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1e0:	699b      	ldr	r3, [r3, #24]
 800b1e2:	441a      	add	r2, r3
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	9300      	str	r3, [sp, #0]
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	2100      	movs	r1, #0
 800b1ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b1ee:	f7ff fe01 	bl	800adf4 <xTimerGenericCommand>
 800b1f2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b1f4:	6a3b      	ldr	r3, [r7, #32]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d152      	bne.n	800b2a0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800b1fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1fe:	f383 8811 	msr	BASEPRI, r3
 800b202:	f3bf 8f6f 	isb	sy
 800b206:	f3bf 8f4f 	dsb	sy
 800b20a:	61bb      	str	r3, [r7, #24]
}
 800b20c:	bf00      	nop
 800b20e:	bf00      	nop
 800b210:	e7fd      	b.n	800b20e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b214:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b218:	f023 0301 	bic.w	r3, r3, #1
 800b21c:	b2da      	uxtb	r2, r3
 800b21e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b220:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b224:	e03d      	b.n	800b2a2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b228:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b22c:	f043 0301 	orr.w	r3, r3, #1
 800b230:	b2da      	uxtb	r2, r3
 800b232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b234:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b238:	68ba      	ldr	r2, [r7, #8]
 800b23a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b23c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b23e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b240:	699b      	ldr	r3, [r3, #24]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d10b      	bne.n	800b25e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800b246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b24a:	f383 8811 	msr	BASEPRI, r3
 800b24e:	f3bf 8f6f 	isb	sy
 800b252:	f3bf 8f4f 	dsb	sy
 800b256:	617b      	str	r3, [r7, #20]
}
 800b258:	bf00      	nop
 800b25a:	bf00      	nop
 800b25c:	e7fd      	b.n	800b25a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b25e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b260:	699a      	ldr	r2, [r3, #24]
 800b262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b264:	18d1      	adds	r1, r2, r3
 800b266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b268:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b26a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b26c:	f7ff ff04 	bl	800b078 <prvInsertTimerInActiveList>
					break;
 800b270:	e017      	b.n	800b2a2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b274:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b278:	f003 0302 	and.w	r3, r3, #2
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d103      	bne.n	800b288 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800b280:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b282:	f000 fbe9 	bl	800ba58 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b286:	e00c      	b.n	800b2a2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b28a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b28e:	f023 0301 	bic.w	r3, r3, #1
 800b292:	b2da      	uxtb	r2, r3
 800b294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b296:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b29a:	e002      	b.n	800b2a2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800b29c:	bf00      	nop
 800b29e:	e000      	b.n	800b2a2 <prvProcessReceivedCommands+0x1a6>
					break;
 800b2a0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b2a2:	4b08      	ldr	r3, [pc, #32]	@ (800b2c4 <prvProcessReceivedCommands+0x1c8>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	1d39      	adds	r1, r7, #4
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	f7fe f954 	bl	8009558 <xQueueReceive>
 800b2b0:	4603      	mov	r3, r0
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	f47f af26 	bne.w	800b104 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b2b8:	bf00      	nop
 800b2ba:	bf00      	nop
 800b2bc:	3730      	adds	r7, #48	@ 0x30
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	bd80      	pop	{r7, pc}
 800b2c2:	bf00      	nop
 800b2c4:	200011bc 	.word	0x200011bc

0800b2c8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b088      	sub	sp, #32
 800b2cc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b2ce:	e049      	b.n	800b364 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b2d0:	4b2e      	ldr	r3, [pc, #184]	@ (800b38c <prvSwitchTimerLists+0xc4>)
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	68db      	ldr	r3, [r3, #12]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2da:	4b2c      	ldr	r3, [pc, #176]	@ (800b38c <prvSwitchTimerLists+0xc4>)
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	68db      	ldr	r3, [r3, #12]
 800b2e0:	68db      	ldr	r3, [r3, #12]
 800b2e2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	3304      	adds	r3, #4
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	f7fd fdf3 	bl	8008ed4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	6a1b      	ldr	r3, [r3, #32]
 800b2f2:	68f8      	ldr	r0, [r7, #12]
 800b2f4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b2fc:	f003 0304 	and.w	r3, r3, #4
 800b300:	2b00      	cmp	r3, #0
 800b302:	d02f      	beq.n	800b364 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	699b      	ldr	r3, [r3, #24]
 800b308:	693a      	ldr	r2, [r7, #16]
 800b30a:	4413      	add	r3, r2
 800b30c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b30e:	68ba      	ldr	r2, [r7, #8]
 800b310:	693b      	ldr	r3, [r7, #16]
 800b312:	429a      	cmp	r2, r3
 800b314:	d90e      	bls.n	800b334 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	68ba      	ldr	r2, [r7, #8]
 800b31a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	68fa      	ldr	r2, [r7, #12]
 800b320:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b322:	4b1a      	ldr	r3, [pc, #104]	@ (800b38c <prvSwitchTimerLists+0xc4>)
 800b324:	681a      	ldr	r2, [r3, #0]
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	3304      	adds	r3, #4
 800b32a:	4619      	mov	r1, r3
 800b32c:	4610      	mov	r0, r2
 800b32e:	f7fd fd98 	bl	8008e62 <vListInsert>
 800b332:	e017      	b.n	800b364 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b334:	2300      	movs	r3, #0
 800b336:	9300      	str	r3, [sp, #0]
 800b338:	2300      	movs	r3, #0
 800b33a:	693a      	ldr	r2, [r7, #16]
 800b33c:	2100      	movs	r1, #0
 800b33e:	68f8      	ldr	r0, [r7, #12]
 800b340:	f7ff fd58 	bl	800adf4 <xTimerGenericCommand>
 800b344:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d10b      	bne.n	800b364 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800b34c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b350:	f383 8811 	msr	BASEPRI, r3
 800b354:	f3bf 8f6f 	isb	sy
 800b358:	f3bf 8f4f 	dsb	sy
 800b35c:	603b      	str	r3, [r7, #0]
}
 800b35e:	bf00      	nop
 800b360:	bf00      	nop
 800b362:	e7fd      	b.n	800b360 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b364:	4b09      	ldr	r3, [pc, #36]	@ (800b38c <prvSwitchTimerLists+0xc4>)
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d1b0      	bne.n	800b2d0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b36e:	4b07      	ldr	r3, [pc, #28]	@ (800b38c <prvSwitchTimerLists+0xc4>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b374:	4b06      	ldr	r3, [pc, #24]	@ (800b390 <prvSwitchTimerLists+0xc8>)
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	4a04      	ldr	r2, [pc, #16]	@ (800b38c <prvSwitchTimerLists+0xc4>)
 800b37a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b37c:	4a04      	ldr	r2, [pc, #16]	@ (800b390 <prvSwitchTimerLists+0xc8>)
 800b37e:	697b      	ldr	r3, [r7, #20]
 800b380:	6013      	str	r3, [r2, #0]
}
 800b382:	bf00      	nop
 800b384:	3718      	adds	r7, #24
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}
 800b38a:	bf00      	nop
 800b38c:	200011b4 	.word	0x200011b4
 800b390:	200011b8 	.word	0x200011b8

0800b394 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b082      	sub	sp, #8
 800b398:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b39a:	f000 f96d 	bl	800b678 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b39e:	4b15      	ldr	r3, [pc, #84]	@ (800b3f4 <prvCheckForValidListAndQueue+0x60>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d120      	bne.n	800b3e8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b3a6:	4814      	ldr	r0, [pc, #80]	@ (800b3f8 <prvCheckForValidListAndQueue+0x64>)
 800b3a8:	f7fd fd0a 	bl	8008dc0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b3ac:	4813      	ldr	r0, [pc, #76]	@ (800b3fc <prvCheckForValidListAndQueue+0x68>)
 800b3ae:	f7fd fd07 	bl	8008dc0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b3b2:	4b13      	ldr	r3, [pc, #76]	@ (800b400 <prvCheckForValidListAndQueue+0x6c>)
 800b3b4:	4a10      	ldr	r2, [pc, #64]	@ (800b3f8 <prvCheckForValidListAndQueue+0x64>)
 800b3b6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b3b8:	4b12      	ldr	r3, [pc, #72]	@ (800b404 <prvCheckForValidListAndQueue+0x70>)
 800b3ba:	4a10      	ldr	r2, [pc, #64]	@ (800b3fc <prvCheckForValidListAndQueue+0x68>)
 800b3bc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b3be:	2300      	movs	r3, #0
 800b3c0:	9300      	str	r3, [sp, #0]
 800b3c2:	4b11      	ldr	r3, [pc, #68]	@ (800b408 <prvCheckForValidListAndQueue+0x74>)
 800b3c4:	4a11      	ldr	r2, [pc, #68]	@ (800b40c <prvCheckForValidListAndQueue+0x78>)
 800b3c6:	2110      	movs	r1, #16
 800b3c8:	200a      	movs	r0, #10
 800b3ca:	f7fd fe17 	bl	8008ffc <xQueueGenericCreateStatic>
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	4a08      	ldr	r2, [pc, #32]	@ (800b3f4 <prvCheckForValidListAndQueue+0x60>)
 800b3d2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b3d4:	4b07      	ldr	r3, [pc, #28]	@ (800b3f4 <prvCheckForValidListAndQueue+0x60>)
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d005      	beq.n	800b3e8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b3dc:	4b05      	ldr	r3, [pc, #20]	@ (800b3f4 <prvCheckForValidListAndQueue+0x60>)
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	490b      	ldr	r1, [pc, #44]	@ (800b410 <prvCheckForValidListAndQueue+0x7c>)
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	f7fe fbd2 	bl	8009b8c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b3e8:	f000 f978 	bl	800b6dc <vPortExitCritical>
}
 800b3ec:	bf00      	nop
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	bd80      	pop	{r7, pc}
 800b3f2:	bf00      	nop
 800b3f4:	200011bc 	.word	0x200011bc
 800b3f8:	2000118c 	.word	0x2000118c
 800b3fc:	200011a0 	.word	0x200011a0
 800b400:	200011b4 	.word	0x200011b4
 800b404:	200011b8 	.word	0x200011b8
 800b408:	20001268 	.word	0x20001268
 800b40c:	200011c8 	.word	0x200011c8
 800b410:	0800db98 	.word	0x0800db98

0800b414 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b414:	b480      	push	{r7}
 800b416:	b085      	sub	sp, #20
 800b418:	af00      	add	r7, sp, #0
 800b41a:	60f8      	str	r0, [r7, #12]
 800b41c:	60b9      	str	r1, [r7, #8]
 800b41e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	3b04      	subs	r3, #4
 800b424:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b42c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	3b04      	subs	r3, #4
 800b432:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b434:	68bb      	ldr	r3, [r7, #8]
 800b436:	f023 0201 	bic.w	r2, r3, #1
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	3b04      	subs	r3, #4
 800b442:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b444:	4a0c      	ldr	r2, [pc, #48]	@ (800b478 <pxPortInitialiseStack+0x64>)
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	3b14      	subs	r3, #20
 800b44e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b450:	687a      	ldr	r2, [r7, #4]
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	3b04      	subs	r3, #4
 800b45a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	f06f 0202 	mvn.w	r2, #2
 800b462:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	3b20      	subs	r3, #32
 800b468:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b46a:	68fb      	ldr	r3, [r7, #12]
}
 800b46c:	4618      	mov	r0, r3
 800b46e:	3714      	adds	r7, #20
 800b470:	46bd      	mov	sp, r7
 800b472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b476:	4770      	bx	lr
 800b478:	0800b47d 	.word	0x0800b47d

0800b47c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b47c:	b480      	push	{r7}
 800b47e:	b085      	sub	sp, #20
 800b480:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b482:	2300      	movs	r3, #0
 800b484:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b486:	4b13      	ldr	r3, [pc, #76]	@ (800b4d4 <prvTaskExitError+0x58>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b48e:	d00b      	beq.n	800b4a8 <prvTaskExitError+0x2c>
	__asm volatile
 800b490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b494:	f383 8811 	msr	BASEPRI, r3
 800b498:	f3bf 8f6f 	isb	sy
 800b49c:	f3bf 8f4f 	dsb	sy
 800b4a0:	60fb      	str	r3, [r7, #12]
}
 800b4a2:	bf00      	nop
 800b4a4:	bf00      	nop
 800b4a6:	e7fd      	b.n	800b4a4 <prvTaskExitError+0x28>
	__asm volatile
 800b4a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4ac:	f383 8811 	msr	BASEPRI, r3
 800b4b0:	f3bf 8f6f 	isb	sy
 800b4b4:	f3bf 8f4f 	dsb	sy
 800b4b8:	60bb      	str	r3, [r7, #8]
}
 800b4ba:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b4bc:	bf00      	nop
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d0fc      	beq.n	800b4be <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b4c4:	bf00      	nop
 800b4c6:	bf00      	nop
 800b4c8:	3714      	adds	r7, #20
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d0:	4770      	bx	lr
 800b4d2:	bf00      	nop
 800b4d4:	20000098 	.word	0x20000098
	...

0800b4e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b4e0:	4b07      	ldr	r3, [pc, #28]	@ (800b500 <pxCurrentTCBConst2>)
 800b4e2:	6819      	ldr	r1, [r3, #0]
 800b4e4:	6808      	ldr	r0, [r1, #0]
 800b4e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4ea:	f380 8809 	msr	PSP, r0
 800b4ee:	f3bf 8f6f 	isb	sy
 800b4f2:	f04f 0000 	mov.w	r0, #0
 800b4f6:	f380 8811 	msr	BASEPRI, r0
 800b4fa:	4770      	bx	lr
 800b4fc:	f3af 8000 	nop.w

0800b500 <pxCurrentTCBConst2>:
 800b500:	20000c8c 	.word	0x20000c8c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b504:	bf00      	nop
 800b506:	bf00      	nop

0800b508 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b508:	4808      	ldr	r0, [pc, #32]	@ (800b52c <prvPortStartFirstTask+0x24>)
 800b50a:	6800      	ldr	r0, [r0, #0]
 800b50c:	6800      	ldr	r0, [r0, #0]
 800b50e:	f380 8808 	msr	MSP, r0
 800b512:	f04f 0000 	mov.w	r0, #0
 800b516:	f380 8814 	msr	CONTROL, r0
 800b51a:	b662      	cpsie	i
 800b51c:	b661      	cpsie	f
 800b51e:	f3bf 8f4f 	dsb	sy
 800b522:	f3bf 8f6f 	isb	sy
 800b526:	df00      	svc	0
 800b528:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b52a:	bf00      	nop
 800b52c:	e000ed08 	.word	0xe000ed08

0800b530 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b086      	sub	sp, #24
 800b534:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b536:	4b47      	ldr	r3, [pc, #284]	@ (800b654 <xPortStartScheduler+0x124>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	4a47      	ldr	r2, [pc, #284]	@ (800b658 <xPortStartScheduler+0x128>)
 800b53c:	4293      	cmp	r3, r2
 800b53e:	d10b      	bne.n	800b558 <xPortStartScheduler+0x28>
	__asm volatile
 800b540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b544:	f383 8811 	msr	BASEPRI, r3
 800b548:	f3bf 8f6f 	isb	sy
 800b54c:	f3bf 8f4f 	dsb	sy
 800b550:	613b      	str	r3, [r7, #16]
}
 800b552:	bf00      	nop
 800b554:	bf00      	nop
 800b556:	e7fd      	b.n	800b554 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b558:	4b3e      	ldr	r3, [pc, #248]	@ (800b654 <xPortStartScheduler+0x124>)
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	4a3f      	ldr	r2, [pc, #252]	@ (800b65c <xPortStartScheduler+0x12c>)
 800b55e:	4293      	cmp	r3, r2
 800b560:	d10b      	bne.n	800b57a <xPortStartScheduler+0x4a>
	__asm volatile
 800b562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b566:	f383 8811 	msr	BASEPRI, r3
 800b56a:	f3bf 8f6f 	isb	sy
 800b56e:	f3bf 8f4f 	dsb	sy
 800b572:	60fb      	str	r3, [r7, #12]
}
 800b574:	bf00      	nop
 800b576:	bf00      	nop
 800b578:	e7fd      	b.n	800b576 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b57a:	4b39      	ldr	r3, [pc, #228]	@ (800b660 <xPortStartScheduler+0x130>)
 800b57c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b57e:	697b      	ldr	r3, [r7, #20]
 800b580:	781b      	ldrb	r3, [r3, #0]
 800b582:	b2db      	uxtb	r3, r3
 800b584:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b586:	697b      	ldr	r3, [r7, #20]
 800b588:	22ff      	movs	r2, #255	@ 0xff
 800b58a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b58c:	697b      	ldr	r3, [r7, #20]
 800b58e:	781b      	ldrb	r3, [r3, #0]
 800b590:	b2db      	uxtb	r3, r3
 800b592:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b594:	78fb      	ldrb	r3, [r7, #3]
 800b596:	b2db      	uxtb	r3, r3
 800b598:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b59c:	b2da      	uxtb	r2, r3
 800b59e:	4b31      	ldr	r3, [pc, #196]	@ (800b664 <xPortStartScheduler+0x134>)
 800b5a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b5a2:	4b31      	ldr	r3, [pc, #196]	@ (800b668 <xPortStartScheduler+0x138>)
 800b5a4:	2207      	movs	r2, #7
 800b5a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b5a8:	e009      	b.n	800b5be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800b5aa:	4b2f      	ldr	r3, [pc, #188]	@ (800b668 <xPortStartScheduler+0x138>)
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	3b01      	subs	r3, #1
 800b5b0:	4a2d      	ldr	r2, [pc, #180]	@ (800b668 <xPortStartScheduler+0x138>)
 800b5b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b5b4:	78fb      	ldrb	r3, [r7, #3]
 800b5b6:	b2db      	uxtb	r3, r3
 800b5b8:	005b      	lsls	r3, r3, #1
 800b5ba:	b2db      	uxtb	r3, r3
 800b5bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b5be:	78fb      	ldrb	r3, [r7, #3]
 800b5c0:	b2db      	uxtb	r3, r3
 800b5c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b5c6:	2b80      	cmp	r3, #128	@ 0x80
 800b5c8:	d0ef      	beq.n	800b5aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b5ca:	4b27      	ldr	r3, [pc, #156]	@ (800b668 <xPortStartScheduler+0x138>)
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	f1c3 0307 	rsb	r3, r3, #7
 800b5d2:	2b04      	cmp	r3, #4
 800b5d4:	d00b      	beq.n	800b5ee <xPortStartScheduler+0xbe>
	__asm volatile
 800b5d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5da:	f383 8811 	msr	BASEPRI, r3
 800b5de:	f3bf 8f6f 	isb	sy
 800b5e2:	f3bf 8f4f 	dsb	sy
 800b5e6:	60bb      	str	r3, [r7, #8]
}
 800b5e8:	bf00      	nop
 800b5ea:	bf00      	nop
 800b5ec:	e7fd      	b.n	800b5ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b5ee:	4b1e      	ldr	r3, [pc, #120]	@ (800b668 <xPortStartScheduler+0x138>)
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	021b      	lsls	r3, r3, #8
 800b5f4:	4a1c      	ldr	r2, [pc, #112]	@ (800b668 <xPortStartScheduler+0x138>)
 800b5f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b5f8:	4b1b      	ldr	r3, [pc, #108]	@ (800b668 <xPortStartScheduler+0x138>)
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b600:	4a19      	ldr	r2, [pc, #100]	@ (800b668 <xPortStartScheduler+0x138>)
 800b602:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	b2da      	uxtb	r2, r3
 800b608:	697b      	ldr	r3, [r7, #20]
 800b60a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b60c:	4b17      	ldr	r3, [pc, #92]	@ (800b66c <xPortStartScheduler+0x13c>)
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	4a16      	ldr	r2, [pc, #88]	@ (800b66c <xPortStartScheduler+0x13c>)
 800b612:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b616:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b618:	4b14      	ldr	r3, [pc, #80]	@ (800b66c <xPortStartScheduler+0x13c>)
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	4a13      	ldr	r2, [pc, #76]	@ (800b66c <xPortStartScheduler+0x13c>)
 800b61e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b622:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b624:	f000 f8da 	bl	800b7dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b628:	4b11      	ldr	r3, [pc, #68]	@ (800b670 <xPortStartScheduler+0x140>)
 800b62a:	2200      	movs	r2, #0
 800b62c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b62e:	f000 f8f9 	bl	800b824 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b632:	4b10      	ldr	r3, [pc, #64]	@ (800b674 <xPortStartScheduler+0x144>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	4a0f      	ldr	r2, [pc, #60]	@ (800b674 <xPortStartScheduler+0x144>)
 800b638:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b63c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b63e:	f7ff ff63 	bl	800b508 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b642:	f7fe ff3b 	bl	800a4bc <vTaskSwitchContext>
	prvTaskExitError();
 800b646:	f7ff ff19 	bl	800b47c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b64a:	2300      	movs	r3, #0
}
 800b64c:	4618      	mov	r0, r3
 800b64e:	3718      	adds	r7, #24
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}
 800b654:	e000ed00 	.word	0xe000ed00
 800b658:	410fc271 	.word	0x410fc271
 800b65c:	410fc270 	.word	0x410fc270
 800b660:	e000e400 	.word	0xe000e400
 800b664:	200012b8 	.word	0x200012b8
 800b668:	200012bc 	.word	0x200012bc
 800b66c:	e000ed20 	.word	0xe000ed20
 800b670:	20000098 	.word	0x20000098
 800b674:	e000ef34 	.word	0xe000ef34

0800b678 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b678:	b480      	push	{r7}
 800b67a:	b083      	sub	sp, #12
 800b67c:	af00      	add	r7, sp, #0
	__asm volatile
 800b67e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b682:	f383 8811 	msr	BASEPRI, r3
 800b686:	f3bf 8f6f 	isb	sy
 800b68a:	f3bf 8f4f 	dsb	sy
 800b68e:	607b      	str	r3, [r7, #4]
}
 800b690:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b692:	4b10      	ldr	r3, [pc, #64]	@ (800b6d4 <vPortEnterCritical+0x5c>)
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	3301      	adds	r3, #1
 800b698:	4a0e      	ldr	r2, [pc, #56]	@ (800b6d4 <vPortEnterCritical+0x5c>)
 800b69a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b69c:	4b0d      	ldr	r3, [pc, #52]	@ (800b6d4 <vPortEnterCritical+0x5c>)
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	2b01      	cmp	r3, #1
 800b6a2:	d110      	bne.n	800b6c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b6a4:	4b0c      	ldr	r3, [pc, #48]	@ (800b6d8 <vPortEnterCritical+0x60>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	b2db      	uxtb	r3, r3
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d00b      	beq.n	800b6c6 <vPortEnterCritical+0x4e>
	__asm volatile
 800b6ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6b2:	f383 8811 	msr	BASEPRI, r3
 800b6b6:	f3bf 8f6f 	isb	sy
 800b6ba:	f3bf 8f4f 	dsb	sy
 800b6be:	603b      	str	r3, [r7, #0]
}
 800b6c0:	bf00      	nop
 800b6c2:	bf00      	nop
 800b6c4:	e7fd      	b.n	800b6c2 <vPortEnterCritical+0x4a>
	}
}
 800b6c6:	bf00      	nop
 800b6c8:	370c      	adds	r7, #12
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d0:	4770      	bx	lr
 800b6d2:	bf00      	nop
 800b6d4:	20000098 	.word	0x20000098
 800b6d8:	e000ed04 	.word	0xe000ed04

0800b6dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b6dc:	b480      	push	{r7}
 800b6de:	b083      	sub	sp, #12
 800b6e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b6e2:	4b12      	ldr	r3, [pc, #72]	@ (800b72c <vPortExitCritical+0x50>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d10b      	bne.n	800b702 <vPortExitCritical+0x26>
	__asm volatile
 800b6ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6ee:	f383 8811 	msr	BASEPRI, r3
 800b6f2:	f3bf 8f6f 	isb	sy
 800b6f6:	f3bf 8f4f 	dsb	sy
 800b6fa:	607b      	str	r3, [r7, #4]
}
 800b6fc:	bf00      	nop
 800b6fe:	bf00      	nop
 800b700:	e7fd      	b.n	800b6fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b702:	4b0a      	ldr	r3, [pc, #40]	@ (800b72c <vPortExitCritical+0x50>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	3b01      	subs	r3, #1
 800b708:	4a08      	ldr	r2, [pc, #32]	@ (800b72c <vPortExitCritical+0x50>)
 800b70a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b70c:	4b07      	ldr	r3, [pc, #28]	@ (800b72c <vPortExitCritical+0x50>)
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d105      	bne.n	800b720 <vPortExitCritical+0x44>
 800b714:	2300      	movs	r3, #0
 800b716:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	f383 8811 	msr	BASEPRI, r3
}
 800b71e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b720:	bf00      	nop
 800b722:	370c      	adds	r7, #12
 800b724:	46bd      	mov	sp, r7
 800b726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72a:	4770      	bx	lr
 800b72c:	20000098 	.word	0x20000098

0800b730 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b730:	f3ef 8009 	mrs	r0, PSP
 800b734:	f3bf 8f6f 	isb	sy
 800b738:	4b15      	ldr	r3, [pc, #84]	@ (800b790 <pxCurrentTCBConst>)
 800b73a:	681a      	ldr	r2, [r3, #0]
 800b73c:	f01e 0f10 	tst.w	lr, #16
 800b740:	bf08      	it	eq
 800b742:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b746:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b74a:	6010      	str	r0, [r2, #0]
 800b74c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b750:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b754:	f380 8811 	msr	BASEPRI, r0
 800b758:	f3bf 8f4f 	dsb	sy
 800b75c:	f3bf 8f6f 	isb	sy
 800b760:	f7fe feac 	bl	800a4bc <vTaskSwitchContext>
 800b764:	f04f 0000 	mov.w	r0, #0
 800b768:	f380 8811 	msr	BASEPRI, r0
 800b76c:	bc09      	pop	{r0, r3}
 800b76e:	6819      	ldr	r1, [r3, #0]
 800b770:	6808      	ldr	r0, [r1, #0]
 800b772:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b776:	f01e 0f10 	tst.w	lr, #16
 800b77a:	bf08      	it	eq
 800b77c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b780:	f380 8809 	msr	PSP, r0
 800b784:	f3bf 8f6f 	isb	sy
 800b788:	4770      	bx	lr
 800b78a:	bf00      	nop
 800b78c:	f3af 8000 	nop.w

0800b790 <pxCurrentTCBConst>:
 800b790:	20000c8c 	.word	0x20000c8c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b794:	bf00      	nop
 800b796:	bf00      	nop

0800b798 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b082      	sub	sp, #8
 800b79c:	af00      	add	r7, sp, #0
	__asm volatile
 800b79e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7a2:	f383 8811 	msr	BASEPRI, r3
 800b7a6:	f3bf 8f6f 	isb	sy
 800b7aa:	f3bf 8f4f 	dsb	sy
 800b7ae:	607b      	str	r3, [r7, #4]
}
 800b7b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b7b2:	f7fe fdc9 	bl	800a348 <xTaskIncrementTick>
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d003      	beq.n	800b7c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b7bc:	4b06      	ldr	r3, [pc, #24]	@ (800b7d8 <xPortSysTickHandler+0x40>)
 800b7be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b7c2:	601a      	str	r2, [r3, #0]
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	f383 8811 	msr	BASEPRI, r3
}
 800b7ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b7d0:	bf00      	nop
 800b7d2:	3708      	adds	r7, #8
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}
 800b7d8:	e000ed04 	.word	0xe000ed04

0800b7dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b7dc:	b480      	push	{r7}
 800b7de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b7e0:	4b0b      	ldr	r3, [pc, #44]	@ (800b810 <vPortSetupTimerInterrupt+0x34>)
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b7e6:	4b0b      	ldr	r3, [pc, #44]	@ (800b814 <vPortSetupTimerInterrupt+0x38>)
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b7ec:	4b0a      	ldr	r3, [pc, #40]	@ (800b818 <vPortSetupTimerInterrupt+0x3c>)
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	4a0a      	ldr	r2, [pc, #40]	@ (800b81c <vPortSetupTimerInterrupt+0x40>)
 800b7f2:	fba2 2303 	umull	r2, r3, r2, r3
 800b7f6:	099b      	lsrs	r3, r3, #6
 800b7f8:	4a09      	ldr	r2, [pc, #36]	@ (800b820 <vPortSetupTimerInterrupt+0x44>)
 800b7fa:	3b01      	subs	r3, #1
 800b7fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b7fe:	4b04      	ldr	r3, [pc, #16]	@ (800b810 <vPortSetupTimerInterrupt+0x34>)
 800b800:	2207      	movs	r2, #7
 800b802:	601a      	str	r2, [r3, #0]
}
 800b804:	bf00      	nop
 800b806:	46bd      	mov	sp, r7
 800b808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80c:	4770      	bx	lr
 800b80e:	bf00      	nop
 800b810:	e000e010 	.word	0xe000e010
 800b814:	e000e018 	.word	0xe000e018
 800b818:	20000000 	.word	0x20000000
 800b81c:	10624dd3 	.word	0x10624dd3
 800b820:	e000e014 	.word	0xe000e014

0800b824 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b824:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b834 <vPortEnableVFP+0x10>
 800b828:	6801      	ldr	r1, [r0, #0]
 800b82a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b82e:	6001      	str	r1, [r0, #0]
 800b830:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b832:	bf00      	nop
 800b834:	e000ed88 	.word	0xe000ed88

0800b838 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b838:	b480      	push	{r7}
 800b83a:	b085      	sub	sp, #20
 800b83c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b83e:	f3ef 8305 	mrs	r3, IPSR
 800b842:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	2b0f      	cmp	r3, #15
 800b848:	d915      	bls.n	800b876 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b84a:	4a18      	ldr	r2, [pc, #96]	@ (800b8ac <vPortValidateInterruptPriority+0x74>)
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	4413      	add	r3, r2
 800b850:	781b      	ldrb	r3, [r3, #0]
 800b852:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b854:	4b16      	ldr	r3, [pc, #88]	@ (800b8b0 <vPortValidateInterruptPriority+0x78>)
 800b856:	781b      	ldrb	r3, [r3, #0]
 800b858:	7afa      	ldrb	r2, [r7, #11]
 800b85a:	429a      	cmp	r2, r3
 800b85c:	d20b      	bcs.n	800b876 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800b85e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b862:	f383 8811 	msr	BASEPRI, r3
 800b866:	f3bf 8f6f 	isb	sy
 800b86a:	f3bf 8f4f 	dsb	sy
 800b86e:	607b      	str	r3, [r7, #4]
}
 800b870:	bf00      	nop
 800b872:	bf00      	nop
 800b874:	e7fd      	b.n	800b872 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b876:	4b0f      	ldr	r3, [pc, #60]	@ (800b8b4 <vPortValidateInterruptPriority+0x7c>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b87e:	4b0e      	ldr	r3, [pc, #56]	@ (800b8b8 <vPortValidateInterruptPriority+0x80>)
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	429a      	cmp	r2, r3
 800b884:	d90b      	bls.n	800b89e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800b886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b88a:	f383 8811 	msr	BASEPRI, r3
 800b88e:	f3bf 8f6f 	isb	sy
 800b892:	f3bf 8f4f 	dsb	sy
 800b896:	603b      	str	r3, [r7, #0]
}
 800b898:	bf00      	nop
 800b89a:	bf00      	nop
 800b89c:	e7fd      	b.n	800b89a <vPortValidateInterruptPriority+0x62>
	}
 800b89e:	bf00      	nop
 800b8a0:	3714      	adds	r7, #20
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a8:	4770      	bx	lr
 800b8aa:	bf00      	nop
 800b8ac:	e000e3f0 	.word	0xe000e3f0
 800b8b0:	200012b8 	.word	0x200012b8
 800b8b4:	e000ed0c 	.word	0xe000ed0c
 800b8b8:	200012bc 	.word	0x200012bc

0800b8bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b08a      	sub	sp, #40	@ 0x28
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b8c8:	f7fe fc82 	bl	800a1d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b8cc:	4b5c      	ldr	r3, [pc, #368]	@ (800ba40 <pvPortMalloc+0x184>)
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d101      	bne.n	800b8d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b8d4:	f000 f924 	bl	800bb20 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b8d8:	4b5a      	ldr	r3, [pc, #360]	@ (800ba44 <pvPortMalloc+0x188>)
 800b8da:	681a      	ldr	r2, [r3, #0]
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	4013      	ands	r3, r2
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	f040 8095 	bne.w	800ba10 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d01e      	beq.n	800b92a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b8ec:	2208      	movs	r2, #8
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	4413      	add	r3, r2
 800b8f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	f003 0307 	and.w	r3, r3, #7
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d015      	beq.n	800b92a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	f023 0307 	bic.w	r3, r3, #7
 800b904:	3308      	adds	r3, #8
 800b906:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	f003 0307 	and.w	r3, r3, #7
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d00b      	beq.n	800b92a <pvPortMalloc+0x6e>
	__asm volatile
 800b912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b916:	f383 8811 	msr	BASEPRI, r3
 800b91a:	f3bf 8f6f 	isb	sy
 800b91e:	f3bf 8f4f 	dsb	sy
 800b922:	617b      	str	r3, [r7, #20]
}
 800b924:	bf00      	nop
 800b926:	bf00      	nop
 800b928:	e7fd      	b.n	800b926 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d06f      	beq.n	800ba10 <pvPortMalloc+0x154>
 800b930:	4b45      	ldr	r3, [pc, #276]	@ (800ba48 <pvPortMalloc+0x18c>)
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	687a      	ldr	r2, [r7, #4]
 800b936:	429a      	cmp	r2, r3
 800b938:	d86a      	bhi.n	800ba10 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b93a:	4b44      	ldr	r3, [pc, #272]	@ (800ba4c <pvPortMalloc+0x190>)
 800b93c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b93e:	4b43      	ldr	r3, [pc, #268]	@ (800ba4c <pvPortMalloc+0x190>)
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b944:	e004      	b.n	800b950 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b948:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b94a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b952:	685b      	ldr	r3, [r3, #4]
 800b954:	687a      	ldr	r2, [r7, #4]
 800b956:	429a      	cmp	r2, r3
 800b958:	d903      	bls.n	800b962 <pvPortMalloc+0xa6>
 800b95a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d1f1      	bne.n	800b946 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b962:	4b37      	ldr	r3, [pc, #220]	@ (800ba40 <pvPortMalloc+0x184>)
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b968:	429a      	cmp	r2, r3
 800b96a:	d051      	beq.n	800ba10 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b96c:	6a3b      	ldr	r3, [r7, #32]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	2208      	movs	r2, #8
 800b972:	4413      	add	r3, r2
 800b974:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b978:	681a      	ldr	r2, [r3, #0]
 800b97a:	6a3b      	ldr	r3, [r7, #32]
 800b97c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b97e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b980:	685a      	ldr	r2, [r3, #4]
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	1ad2      	subs	r2, r2, r3
 800b986:	2308      	movs	r3, #8
 800b988:	005b      	lsls	r3, r3, #1
 800b98a:	429a      	cmp	r2, r3
 800b98c:	d920      	bls.n	800b9d0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b98e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	4413      	add	r3, r2
 800b994:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b996:	69bb      	ldr	r3, [r7, #24]
 800b998:	f003 0307 	and.w	r3, r3, #7
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d00b      	beq.n	800b9b8 <pvPortMalloc+0xfc>
	__asm volatile
 800b9a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9a4:	f383 8811 	msr	BASEPRI, r3
 800b9a8:	f3bf 8f6f 	isb	sy
 800b9ac:	f3bf 8f4f 	dsb	sy
 800b9b0:	613b      	str	r3, [r7, #16]
}
 800b9b2:	bf00      	nop
 800b9b4:	bf00      	nop
 800b9b6:	e7fd      	b.n	800b9b4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b9b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9ba:	685a      	ldr	r2, [r3, #4]
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	1ad2      	subs	r2, r2, r3
 800b9c0:	69bb      	ldr	r3, [r7, #24]
 800b9c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b9c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9c6:	687a      	ldr	r2, [r7, #4]
 800b9c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b9ca:	69b8      	ldr	r0, [r7, #24]
 800b9cc:	f000 f90a 	bl	800bbe4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b9d0:	4b1d      	ldr	r3, [pc, #116]	@ (800ba48 <pvPortMalloc+0x18c>)
 800b9d2:	681a      	ldr	r2, [r3, #0]
 800b9d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9d6:	685b      	ldr	r3, [r3, #4]
 800b9d8:	1ad3      	subs	r3, r2, r3
 800b9da:	4a1b      	ldr	r2, [pc, #108]	@ (800ba48 <pvPortMalloc+0x18c>)
 800b9dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b9de:	4b1a      	ldr	r3, [pc, #104]	@ (800ba48 <pvPortMalloc+0x18c>)
 800b9e0:	681a      	ldr	r2, [r3, #0]
 800b9e2:	4b1b      	ldr	r3, [pc, #108]	@ (800ba50 <pvPortMalloc+0x194>)
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	429a      	cmp	r2, r3
 800b9e8:	d203      	bcs.n	800b9f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b9ea:	4b17      	ldr	r3, [pc, #92]	@ (800ba48 <pvPortMalloc+0x18c>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	4a18      	ldr	r2, [pc, #96]	@ (800ba50 <pvPortMalloc+0x194>)
 800b9f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b9f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9f4:	685a      	ldr	r2, [r3, #4]
 800b9f6:	4b13      	ldr	r3, [pc, #76]	@ (800ba44 <pvPortMalloc+0x188>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	431a      	orrs	r2, r3
 800b9fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ba00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba02:	2200      	movs	r2, #0
 800ba04:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ba06:	4b13      	ldr	r3, [pc, #76]	@ (800ba54 <pvPortMalloc+0x198>)
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	3301      	adds	r3, #1
 800ba0c:	4a11      	ldr	r2, [pc, #68]	@ (800ba54 <pvPortMalloc+0x198>)
 800ba0e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ba10:	f7fe fbec 	bl	800a1ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ba14:	69fb      	ldr	r3, [r7, #28]
 800ba16:	f003 0307 	and.w	r3, r3, #7
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d00b      	beq.n	800ba36 <pvPortMalloc+0x17a>
	__asm volatile
 800ba1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba22:	f383 8811 	msr	BASEPRI, r3
 800ba26:	f3bf 8f6f 	isb	sy
 800ba2a:	f3bf 8f4f 	dsb	sy
 800ba2e:	60fb      	str	r3, [r7, #12]
}
 800ba30:	bf00      	nop
 800ba32:	bf00      	nop
 800ba34:	e7fd      	b.n	800ba32 <pvPortMalloc+0x176>
	return pvReturn;
 800ba36:	69fb      	ldr	r3, [r7, #28]
}
 800ba38:	4618      	mov	r0, r3
 800ba3a:	3728      	adds	r7, #40	@ 0x28
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	bd80      	pop	{r7, pc}
 800ba40:	20004ec8 	.word	0x20004ec8
 800ba44:	20004edc 	.word	0x20004edc
 800ba48:	20004ecc 	.word	0x20004ecc
 800ba4c:	20004ec0 	.word	0x20004ec0
 800ba50:	20004ed0 	.word	0x20004ed0
 800ba54:	20004ed4 	.word	0x20004ed4

0800ba58 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b086      	sub	sp, #24
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d04f      	beq.n	800bb0a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ba6a:	2308      	movs	r3, #8
 800ba6c:	425b      	negs	r3, r3
 800ba6e:	697a      	ldr	r2, [r7, #20]
 800ba70:	4413      	add	r3, r2
 800ba72:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ba74:	697b      	ldr	r3, [r7, #20]
 800ba76:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ba78:	693b      	ldr	r3, [r7, #16]
 800ba7a:	685a      	ldr	r2, [r3, #4]
 800ba7c:	4b25      	ldr	r3, [pc, #148]	@ (800bb14 <vPortFree+0xbc>)
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	4013      	ands	r3, r2
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d10b      	bne.n	800ba9e <vPortFree+0x46>
	__asm volatile
 800ba86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba8a:	f383 8811 	msr	BASEPRI, r3
 800ba8e:	f3bf 8f6f 	isb	sy
 800ba92:	f3bf 8f4f 	dsb	sy
 800ba96:	60fb      	str	r3, [r7, #12]
}
 800ba98:	bf00      	nop
 800ba9a:	bf00      	nop
 800ba9c:	e7fd      	b.n	800ba9a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ba9e:	693b      	ldr	r3, [r7, #16]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d00b      	beq.n	800babe <vPortFree+0x66>
	__asm volatile
 800baa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800baaa:	f383 8811 	msr	BASEPRI, r3
 800baae:	f3bf 8f6f 	isb	sy
 800bab2:	f3bf 8f4f 	dsb	sy
 800bab6:	60bb      	str	r3, [r7, #8]
}
 800bab8:	bf00      	nop
 800baba:	bf00      	nop
 800babc:	e7fd      	b.n	800baba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800babe:	693b      	ldr	r3, [r7, #16]
 800bac0:	685a      	ldr	r2, [r3, #4]
 800bac2:	4b14      	ldr	r3, [pc, #80]	@ (800bb14 <vPortFree+0xbc>)
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	4013      	ands	r3, r2
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d01e      	beq.n	800bb0a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bacc:	693b      	ldr	r3, [r7, #16]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d11a      	bne.n	800bb0a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bad4:	693b      	ldr	r3, [r7, #16]
 800bad6:	685a      	ldr	r2, [r3, #4]
 800bad8:	4b0e      	ldr	r3, [pc, #56]	@ (800bb14 <vPortFree+0xbc>)
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	43db      	mvns	r3, r3
 800bade:	401a      	ands	r2, r3
 800bae0:	693b      	ldr	r3, [r7, #16]
 800bae2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bae4:	f7fe fb74 	bl	800a1d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bae8:	693b      	ldr	r3, [r7, #16]
 800baea:	685a      	ldr	r2, [r3, #4]
 800baec:	4b0a      	ldr	r3, [pc, #40]	@ (800bb18 <vPortFree+0xc0>)
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	4413      	add	r3, r2
 800baf2:	4a09      	ldr	r2, [pc, #36]	@ (800bb18 <vPortFree+0xc0>)
 800baf4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800baf6:	6938      	ldr	r0, [r7, #16]
 800baf8:	f000 f874 	bl	800bbe4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bafc:	4b07      	ldr	r3, [pc, #28]	@ (800bb1c <vPortFree+0xc4>)
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	3301      	adds	r3, #1
 800bb02:	4a06      	ldr	r2, [pc, #24]	@ (800bb1c <vPortFree+0xc4>)
 800bb04:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bb06:	f7fe fb71 	bl	800a1ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bb0a:	bf00      	nop
 800bb0c:	3718      	adds	r7, #24
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	bd80      	pop	{r7, pc}
 800bb12:	bf00      	nop
 800bb14:	20004edc 	.word	0x20004edc
 800bb18:	20004ecc 	.word	0x20004ecc
 800bb1c:	20004ed8 	.word	0x20004ed8

0800bb20 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bb20:	b480      	push	{r7}
 800bb22:	b085      	sub	sp, #20
 800bb24:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bb26:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800bb2a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bb2c:	4b27      	ldr	r3, [pc, #156]	@ (800bbcc <prvHeapInit+0xac>)
 800bb2e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	f003 0307 	and.w	r3, r3, #7
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d00c      	beq.n	800bb54 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	3307      	adds	r3, #7
 800bb3e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	f023 0307 	bic.w	r3, r3, #7
 800bb46:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bb48:	68ba      	ldr	r2, [r7, #8]
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	1ad3      	subs	r3, r2, r3
 800bb4e:	4a1f      	ldr	r2, [pc, #124]	@ (800bbcc <prvHeapInit+0xac>)
 800bb50:	4413      	add	r3, r2
 800bb52:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bb58:	4a1d      	ldr	r2, [pc, #116]	@ (800bbd0 <prvHeapInit+0xb0>)
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bb5e:	4b1c      	ldr	r3, [pc, #112]	@ (800bbd0 <prvHeapInit+0xb0>)
 800bb60:	2200      	movs	r2, #0
 800bb62:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	68ba      	ldr	r2, [r7, #8]
 800bb68:	4413      	add	r3, r2
 800bb6a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bb6c:	2208      	movs	r2, #8
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	1a9b      	subs	r3, r3, r2
 800bb72:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	f023 0307 	bic.w	r3, r3, #7
 800bb7a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	4a15      	ldr	r2, [pc, #84]	@ (800bbd4 <prvHeapInit+0xb4>)
 800bb80:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bb82:	4b14      	ldr	r3, [pc, #80]	@ (800bbd4 <prvHeapInit+0xb4>)
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	2200      	movs	r2, #0
 800bb88:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bb8a:	4b12      	ldr	r3, [pc, #72]	@ (800bbd4 <prvHeapInit+0xb4>)
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	2200      	movs	r2, #0
 800bb90:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	68fa      	ldr	r2, [r7, #12]
 800bb9a:	1ad2      	subs	r2, r2, r3
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bba0:	4b0c      	ldr	r3, [pc, #48]	@ (800bbd4 <prvHeapInit+0xb4>)
 800bba2:	681a      	ldr	r2, [r3, #0]
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	685b      	ldr	r3, [r3, #4]
 800bbac:	4a0a      	ldr	r2, [pc, #40]	@ (800bbd8 <prvHeapInit+0xb8>)
 800bbae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bbb0:	683b      	ldr	r3, [r7, #0]
 800bbb2:	685b      	ldr	r3, [r3, #4]
 800bbb4:	4a09      	ldr	r2, [pc, #36]	@ (800bbdc <prvHeapInit+0xbc>)
 800bbb6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bbb8:	4b09      	ldr	r3, [pc, #36]	@ (800bbe0 <prvHeapInit+0xc0>)
 800bbba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800bbbe:	601a      	str	r2, [r3, #0]
}
 800bbc0:	bf00      	nop
 800bbc2:	3714      	adds	r7, #20
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbca:	4770      	bx	lr
 800bbcc:	200012c0 	.word	0x200012c0
 800bbd0:	20004ec0 	.word	0x20004ec0
 800bbd4:	20004ec8 	.word	0x20004ec8
 800bbd8:	20004ed0 	.word	0x20004ed0
 800bbdc:	20004ecc 	.word	0x20004ecc
 800bbe0:	20004edc 	.word	0x20004edc

0800bbe4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bbe4:	b480      	push	{r7}
 800bbe6:	b085      	sub	sp, #20
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bbec:	4b28      	ldr	r3, [pc, #160]	@ (800bc90 <prvInsertBlockIntoFreeList+0xac>)
 800bbee:	60fb      	str	r3, [r7, #12]
 800bbf0:	e002      	b.n	800bbf8 <prvInsertBlockIntoFreeList+0x14>
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	60fb      	str	r3, [r7, #12]
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	687a      	ldr	r2, [r7, #4]
 800bbfe:	429a      	cmp	r2, r3
 800bc00:	d8f7      	bhi.n	800bbf2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	685b      	ldr	r3, [r3, #4]
 800bc0a:	68ba      	ldr	r2, [r7, #8]
 800bc0c:	4413      	add	r3, r2
 800bc0e:	687a      	ldr	r2, [r7, #4]
 800bc10:	429a      	cmp	r2, r3
 800bc12:	d108      	bne.n	800bc26 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	685a      	ldr	r2, [r3, #4]
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	685b      	ldr	r3, [r3, #4]
 800bc1c:	441a      	add	r2, r3
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	685b      	ldr	r3, [r3, #4]
 800bc2e:	68ba      	ldr	r2, [r7, #8]
 800bc30:	441a      	add	r2, r3
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	429a      	cmp	r2, r3
 800bc38:	d118      	bne.n	800bc6c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	681a      	ldr	r2, [r3, #0]
 800bc3e:	4b15      	ldr	r3, [pc, #84]	@ (800bc94 <prvInsertBlockIntoFreeList+0xb0>)
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	429a      	cmp	r2, r3
 800bc44:	d00d      	beq.n	800bc62 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	685a      	ldr	r2, [r3, #4]
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	685b      	ldr	r3, [r3, #4]
 800bc50:	441a      	add	r2, r3
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	681a      	ldr	r2, [r3, #0]
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	601a      	str	r2, [r3, #0]
 800bc60:	e008      	b.n	800bc74 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bc62:	4b0c      	ldr	r3, [pc, #48]	@ (800bc94 <prvInsertBlockIntoFreeList+0xb0>)
 800bc64:	681a      	ldr	r2, [r3, #0]
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	601a      	str	r2, [r3, #0]
 800bc6a:	e003      	b.n	800bc74 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	681a      	ldr	r2, [r3, #0]
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bc74:	68fa      	ldr	r2, [r7, #12]
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	429a      	cmp	r2, r3
 800bc7a:	d002      	beq.n	800bc82 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	687a      	ldr	r2, [r7, #4]
 800bc80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bc82:	bf00      	nop
 800bc84:	3714      	adds	r7, #20
 800bc86:	46bd      	mov	sp, r7
 800bc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8c:	4770      	bx	lr
 800bc8e:	bf00      	nop
 800bc90:	20004ec0 	.word	0x20004ec0
 800bc94:	20004ec8 	.word	0x20004ec8

0800bc98 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bc9c:	2200      	movs	r2, #0
 800bc9e:	4912      	ldr	r1, [pc, #72]	@ (800bce8 <MX_USB_DEVICE_Init+0x50>)
 800bca0:	4812      	ldr	r0, [pc, #72]	@ (800bcec <MX_USB_DEVICE_Init+0x54>)
 800bca2:	f7fb fc0f 	bl	80074c4 <USBD_Init>
 800bca6:	4603      	mov	r3, r0
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d001      	beq.n	800bcb0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bcac:	f7f5 fa22 	bl	80010f4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bcb0:	490f      	ldr	r1, [pc, #60]	@ (800bcf0 <MX_USB_DEVICE_Init+0x58>)
 800bcb2:	480e      	ldr	r0, [pc, #56]	@ (800bcec <MX_USB_DEVICE_Init+0x54>)
 800bcb4:	f7fb fc36 	bl	8007524 <USBD_RegisterClass>
 800bcb8:	4603      	mov	r3, r0
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d001      	beq.n	800bcc2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bcbe:	f7f5 fa19 	bl	80010f4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bcc2:	490c      	ldr	r1, [pc, #48]	@ (800bcf4 <MX_USB_DEVICE_Init+0x5c>)
 800bcc4:	4809      	ldr	r0, [pc, #36]	@ (800bcec <MX_USB_DEVICE_Init+0x54>)
 800bcc6:	f7fb fb2d 	bl	8007324 <USBD_CDC_RegisterInterface>
 800bcca:	4603      	mov	r3, r0
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d001      	beq.n	800bcd4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bcd0:	f7f5 fa10 	bl	80010f4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bcd4:	4805      	ldr	r0, [pc, #20]	@ (800bcec <MX_USB_DEVICE_Init+0x54>)
 800bcd6:	f7fb fc5b 	bl	8007590 <USBD_Start>
 800bcda:	4603      	mov	r3, r0
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d001      	beq.n	800bce4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bce0:	f7f5 fa08 	bl	80010f4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bce4:	bf00      	nop
 800bce6:	bd80      	pop	{r7, pc}
 800bce8:	200000b0 	.word	0x200000b0
 800bcec:	20004ee0 	.word	0x20004ee0
 800bcf0:	20000018 	.word	0x20000018
 800bcf4:	2000009c 	.word	0x2000009c

0800bcf8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	4905      	ldr	r1, [pc, #20]	@ (800bd14 <CDC_Init_FS+0x1c>)
 800bd00:	4805      	ldr	r0, [pc, #20]	@ (800bd18 <CDC_Init_FS+0x20>)
 800bd02:	f7fb fb29 	bl	8007358 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bd06:	4905      	ldr	r1, [pc, #20]	@ (800bd1c <CDC_Init_FS+0x24>)
 800bd08:	4803      	ldr	r0, [pc, #12]	@ (800bd18 <CDC_Init_FS+0x20>)
 800bd0a:	f7fb fb47 	bl	800739c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bd0e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bd10:	4618      	mov	r0, r3
 800bd12:	bd80      	pop	{r7, pc}
 800bd14:	200059bc 	.word	0x200059bc
 800bd18:	20004ee0 	.word	0x20004ee0
 800bd1c:	200051bc 	.word	0x200051bc

0800bd20 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bd20:	b480      	push	{r7}
 800bd22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bd24:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bd26:	4618      	mov	r0, r3
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2e:	4770      	bx	lr

0800bd30 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bd30:	b480      	push	{r7}
 800bd32:	b083      	sub	sp, #12
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	4603      	mov	r3, r0
 800bd38:	6039      	str	r1, [r7, #0]
 800bd3a:	71fb      	strb	r3, [r7, #7]
 800bd3c:	4613      	mov	r3, r2
 800bd3e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bd40:	79fb      	ldrb	r3, [r7, #7]
 800bd42:	2b23      	cmp	r3, #35	@ 0x23
 800bd44:	d84a      	bhi.n	800bddc <CDC_Control_FS+0xac>
 800bd46:	a201      	add	r2, pc, #4	@ (adr r2, 800bd4c <CDC_Control_FS+0x1c>)
 800bd48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd4c:	0800bddd 	.word	0x0800bddd
 800bd50:	0800bddd 	.word	0x0800bddd
 800bd54:	0800bddd 	.word	0x0800bddd
 800bd58:	0800bddd 	.word	0x0800bddd
 800bd5c:	0800bddd 	.word	0x0800bddd
 800bd60:	0800bddd 	.word	0x0800bddd
 800bd64:	0800bddd 	.word	0x0800bddd
 800bd68:	0800bddd 	.word	0x0800bddd
 800bd6c:	0800bddd 	.word	0x0800bddd
 800bd70:	0800bddd 	.word	0x0800bddd
 800bd74:	0800bddd 	.word	0x0800bddd
 800bd78:	0800bddd 	.word	0x0800bddd
 800bd7c:	0800bddd 	.word	0x0800bddd
 800bd80:	0800bddd 	.word	0x0800bddd
 800bd84:	0800bddd 	.word	0x0800bddd
 800bd88:	0800bddd 	.word	0x0800bddd
 800bd8c:	0800bddd 	.word	0x0800bddd
 800bd90:	0800bddd 	.word	0x0800bddd
 800bd94:	0800bddd 	.word	0x0800bddd
 800bd98:	0800bddd 	.word	0x0800bddd
 800bd9c:	0800bddd 	.word	0x0800bddd
 800bda0:	0800bddd 	.word	0x0800bddd
 800bda4:	0800bddd 	.word	0x0800bddd
 800bda8:	0800bddd 	.word	0x0800bddd
 800bdac:	0800bddd 	.word	0x0800bddd
 800bdb0:	0800bddd 	.word	0x0800bddd
 800bdb4:	0800bddd 	.word	0x0800bddd
 800bdb8:	0800bddd 	.word	0x0800bddd
 800bdbc:	0800bddd 	.word	0x0800bddd
 800bdc0:	0800bddd 	.word	0x0800bddd
 800bdc4:	0800bddd 	.word	0x0800bddd
 800bdc8:	0800bddd 	.word	0x0800bddd
 800bdcc:	0800bddd 	.word	0x0800bddd
 800bdd0:	0800bddd 	.word	0x0800bddd
 800bdd4:	0800bddd 	.word	0x0800bddd
 800bdd8:	0800bddd 	.word	0x0800bddd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bddc:	bf00      	nop
  }

  return (USBD_OK);
 800bdde:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bde0:	4618      	mov	r0, r3
 800bde2:	370c      	adds	r7, #12
 800bde4:	46bd      	mov	sp, r7
 800bde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdea:	4770      	bx	lr

0800bdec <CDC_Receive_FS>:
  */
extern char rxBuffer[64];
extern uint8_t commandReady;

static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b084      	sub	sp, #16
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
 800bdf4:	6039      	str	r1, [r7, #0]
  // Gelen veriyi rxBuffer'a kopyala (maksimum 63 byte + null karakter)
  uint32_t length = *Len;
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	60fb      	str	r3, [r7, #12]
  if (length >= sizeof(rxBuffer)) {
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	2b3f      	cmp	r3, #63	@ 0x3f
 800be00:	d901      	bls.n	800be06 <CDC_Receive_FS+0x1a>
      length = sizeof(rxBuffer) - 1;  // taşmayı engelle
 800be02:	233f      	movs	r3, #63	@ 0x3f
 800be04:	60fb      	str	r3, [r7, #12]
  }

  memcpy(rxBuffer, Buf, length);
 800be06:	68fa      	ldr	r2, [r7, #12]
 800be08:	6879      	ldr	r1, [r7, #4]
 800be0a:	480b      	ldr	r0, [pc, #44]	@ (800be38 <CDC_Receive_FS+0x4c>)
 800be0c:	f000 fd5a 	bl	800c8c4 <memcpy>
  rxBuffer[length] = '\0';  // null-terminate
 800be10:	4a09      	ldr	r2, [pc, #36]	@ (800be38 <CDC_Receive_FS+0x4c>)
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	4413      	add	r3, r2
 800be16:	2200      	movs	r2, #0
 800be18:	701a      	strb	r2, [r3, #0]

  commandReady = 1;  // Komut geldiğini bildir
 800be1a:	4b08      	ldr	r3, [pc, #32]	@ (800be3c <CDC_Receive_FS+0x50>)
 800be1c:	2201      	movs	r2, #1
 800be1e:	701a      	strb	r2, [r3, #0]

  // USB buffer ayarları
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800be20:	6879      	ldr	r1, [r7, #4]
 800be22:	4807      	ldr	r0, [pc, #28]	@ (800be40 <CDC_Receive_FS+0x54>)
 800be24:	f7fb faba 	bl	800739c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800be28:	4805      	ldr	r0, [pc, #20]	@ (800be40 <CDC_Receive_FS+0x54>)
 800be2a:	f7fb fb15 	bl	8007458 <USBD_CDC_ReceivePacket>

  return (USBD_OK);
 800be2e:	2300      	movs	r3, #0
}
 800be30:	4618      	mov	r0, r3
 800be32:	3710      	adds	r7, #16
 800be34:	46bd      	mov	sp, r7
 800be36:	bd80      	pop	{r7, pc}
 800be38:	200001f0 	.word	0x200001f0
 800be3c:	20000378 	.word	0x20000378
 800be40:	20004ee0 	.word	0x20004ee0

0800be44 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b084      	sub	sp, #16
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
 800be4c:	460b      	mov	r3, r1
 800be4e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800be50:	2300      	movs	r3, #0
 800be52:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800be54:	4b0d      	ldr	r3, [pc, #52]	@ (800be8c <CDC_Transmit_FS+0x48>)
 800be56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800be5a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800be5c:	68bb      	ldr	r3, [r7, #8]
 800be5e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800be62:	2b00      	cmp	r3, #0
 800be64:	d001      	beq.n	800be6a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800be66:	2301      	movs	r3, #1
 800be68:	e00b      	b.n	800be82 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800be6a:	887b      	ldrh	r3, [r7, #2]
 800be6c:	461a      	mov	r2, r3
 800be6e:	6879      	ldr	r1, [r7, #4]
 800be70:	4806      	ldr	r0, [pc, #24]	@ (800be8c <CDC_Transmit_FS+0x48>)
 800be72:	f7fb fa71 	bl	8007358 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800be76:	4805      	ldr	r0, [pc, #20]	@ (800be8c <CDC_Transmit_FS+0x48>)
 800be78:	f7fb faae 	bl	80073d8 <USBD_CDC_TransmitPacket>
 800be7c:	4603      	mov	r3, r0
 800be7e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800be80:	7bfb      	ldrb	r3, [r7, #15]
}
 800be82:	4618      	mov	r0, r3
 800be84:	3710      	adds	r7, #16
 800be86:	46bd      	mov	sp, r7
 800be88:	bd80      	pop	{r7, pc}
 800be8a:	bf00      	nop
 800be8c:	20004ee0 	.word	0x20004ee0

0800be90 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800be90:	b480      	push	{r7}
 800be92:	b087      	sub	sp, #28
 800be94:	af00      	add	r7, sp, #0
 800be96:	60f8      	str	r0, [r7, #12]
 800be98:	60b9      	str	r1, [r7, #8]
 800be9a:	4613      	mov	r3, r2
 800be9c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800be9e:	2300      	movs	r3, #0
 800bea0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800bea2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bea6:	4618      	mov	r0, r3
 800bea8:	371c      	adds	r7, #28
 800beaa:	46bd      	mov	sp, r7
 800beac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb0:	4770      	bx	lr
	...

0800beb4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800beb4:	b480      	push	{r7}
 800beb6:	b083      	sub	sp, #12
 800beb8:	af00      	add	r7, sp, #0
 800beba:	4603      	mov	r3, r0
 800bebc:	6039      	str	r1, [r7, #0]
 800bebe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bec0:	683b      	ldr	r3, [r7, #0]
 800bec2:	2212      	movs	r2, #18
 800bec4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bec6:	4b03      	ldr	r3, [pc, #12]	@ (800bed4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800bec8:	4618      	mov	r0, r3
 800beca:	370c      	adds	r7, #12
 800becc:	46bd      	mov	sp, r7
 800bece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed2:	4770      	bx	lr
 800bed4:	200000cc 	.word	0x200000cc

0800bed8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bed8:	b480      	push	{r7}
 800beda:	b083      	sub	sp, #12
 800bedc:	af00      	add	r7, sp, #0
 800bede:	4603      	mov	r3, r0
 800bee0:	6039      	str	r1, [r7, #0]
 800bee2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bee4:	683b      	ldr	r3, [r7, #0]
 800bee6:	2204      	movs	r2, #4
 800bee8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800beea:	4b03      	ldr	r3, [pc, #12]	@ (800bef8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800beec:	4618      	mov	r0, r3
 800beee:	370c      	adds	r7, #12
 800bef0:	46bd      	mov	sp, r7
 800bef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef6:	4770      	bx	lr
 800bef8:	200000e0 	.word	0x200000e0

0800befc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800befc:	b580      	push	{r7, lr}
 800befe:	b082      	sub	sp, #8
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	4603      	mov	r3, r0
 800bf04:	6039      	str	r1, [r7, #0]
 800bf06:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bf08:	79fb      	ldrb	r3, [r7, #7]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d105      	bne.n	800bf1a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bf0e:	683a      	ldr	r2, [r7, #0]
 800bf10:	4907      	ldr	r1, [pc, #28]	@ (800bf30 <USBD_FS_ProductStrDescriptor+0x34>)
 800bf12:	4808      	ldr	r0, [pc, #32]	@ (800bf34 <USBD_FS_ProductStrDescriptor+0x38>)
 800bf14:	f7fc fd00 	bl	8008918 <USBD_GetString>
 800bf18:	e004      	b.n	800bf24 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bf1a:	683a      	ldr	r2, [r7, #0]
 800bf1c:	4904      	ldr	r1, [pc, #16]	@ (800bf30 <USBD_FS_ProductStrDescriptor+0x34>)
 800bf1e:	4805      	ldr	r0, [pc, #20]	@ (800bf34 <USBD_FS_ProductStrDescriptor+0x38>)
 800bf20:	f7fc fcfa 	bl	8008918 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bf24:	4b02      	ldr	r3, [pc, #8]	@ (800bf30 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bf26:	4618      	mov	r0, r3
 800bf28:	3708      	adds	r7, #8
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	bd80      	pop	{r7, pc}
 800bf2e:	bf00      	nop
 800bf30:	200061bc 	.word	0x200061bc
 800bf34:	0800dba0 	.word	0x0800dba0

0800bf38 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b082      	sub	sp, #8
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	4603      	mov	r3, r0
 800bf40:	6039      	str	r1, [r7, #0]
 800bf42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bf44:	683a      	ldr	r2, [r7, #0]
 800bf46:	4904      	ldr	r1, [pc, #16]	@ (800bf58 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bf48:	4804      	ldr	r0, [pc, #16]	@ (800bf5c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bf4a:	f7fc fce5 	bl	8008918 <USBD_GetString>
  return USBD_StrDesc;
 800bf4e:	4b02      	ldr	r3, [pc, #8]	@ (800bf58 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bf50:	4618      	mov	r0, r3
 800bf52:	3708      	adds	r7, #8
 800bf54:	46bd      	mov	sp, r7
 800bf56:	bd80      	pop	{r7, pc}
 800bf58:	200061bc 	.word	0x200061bc
 800bf5c:	0800dbb8 	.word	0x0800dbb8

0800bf60 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b082      	sub	sp, #8
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	4603      	mov	r3, r0
 800bf68:	6039      	str	r1, [r7, #0]
 800bf6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bf6c:	683b      	ldr	r3, [r7, #0]
 800bf6e:	221a      	movs	r2, #26
 800bf70:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bf72:	f000 f843 	bl	800bffc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bf76:	4b02      	ldr	r3, [pc, #8]	@ (800bf80 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bf78:	4618      	mov	r0, r3
 800bf7a:	3708      	adds	r7, #8
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bd80      	pop	{r7, pc}
 800bf80:	200000e4 	.word	0x200000e4

0800bf84 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b082      	sub	sp, #8
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	6039      	str	r1, [r7, #0]
 800bf8e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bf90:	79fb      	ldrb	r3, [r7, #7]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d105      	bne.n	800bfa2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bf96:	683a      	ldr	r2, [r7, #0]
 800bf98:	4907      	ldr	r1, [pc, #28]	@ (800bfb8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bf9a:	4808      	ldr	r0, [pc, #32]	@ (800bfbc <USBD_FS_ConfigStrDescriptor+0x38>)
 800bf9c:	f7fc fcbc 	bl	8008918 <USBD_GetString>
 800bfa0:	e004      	b.n	800bfac <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bfa2:	683a      	ldr	r2, [r7, #0]
 800bfa4:	4904      	ldr	r1, [pc, #16]	@ (800bfb8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bfa6:	4805      	ldr	r0, [pc, #20]	@ (800bfbc <USBD_FS_ConfigStrDescriptor+0x38>)
 800bfa8:	f7fc fcb6 	bl	8008918 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bfac:	4b02      	ldr	r3, [pc, #8]	@ (800bfb8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bfae:	4618      	mov	r0, r3
 800bfb0:	3708      	adds	r7, #8
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd80      	pop	{r7, pc}
 800bfb6:	bf00      	nop
 800bfb8:	200061bc 	.word	0x200061bc
 800bfbc:	0800dbcc 	.word	0x0800dbcc

0800bfc0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b082      	sub	sp, #8
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	6039      	str	r1, [r7, #0]
 800bfca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bfcc:	79fb      	ldrb	r3, [r7, #7]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d105      	bne.n	800bfde <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bfd2:	683a      	ldr	r2, [r7, #0]
 800bfd4:	4907      	ldr	r1, [pc, #28]	@ (800bff4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bfd6:	4808      	ldr	r0, [pc, #32]	@ (800bff8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bfd8:	f7fc fc9e 	bl	8008918 <USBD_GetString>
 800bfdc:	e004      	b.n	800bfe8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bfde:	683a      	ldr	r2, [r7, #0]
 800bfe0:	4904      	ldr	r1, [pc, #16]	@ (800bff4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bfe2:	4805      	ldr	r0, [pc, #20]	@ (800bff8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bfe4:	f7fc fc98 	bl	8008918 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bfe8:	4b02      	ldr	r3, [pc, #8]	@ (800bff4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bfea:	4618      	mov	r0, r3
 800bfec:	3708      	adds	r7, #8
 800bfee:	46bd      	mov	sp, r7
 800bff0:	bd80      	pop	{r7, pc}
 800bff2:	bf00      	nop
 800bff4:	200061bc 	.word	0x200061bc
 800bff8:	0800dbd8 	.word	0x0800dbd8

0800bffc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b084      	sub	sp, #16
 800c000:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c002:	4b0f      	ldr	r3, [pc, #60]	@ (800c040 <Get_SerialNum+0x44>)
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c008:	4b0e      	ldr	r3, [pc, #56]	@ (800c044 <Get_SerialNum+0x48>)
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c00e:	4b0e      	ldr	r3, [pc, #56]	@ (800c048 <Get_SerialNum+0x4c>)
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c014:	68fa      	ldr	r2, [r7, #12]
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	4413      	add	r3, r2
 800c01a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d009      	beq.n	800c036 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c022:	2208      	movs	r2, #8
 800c024:	4909      	ldr	r1, [pc, #36]	@ (800c04c <Get_SerialNum+0x50>)
 800c026:	68f8      	ldr	r0, [r7, #12]
 800c028:	f000 f814 	bl	800c054 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c02c:	2204      	movs	r2, #4
 800c02e:	4908      	ldr	r1, [pc, #32]	@ (800c050 <Get_SerialNum+0x54>)
 800c030:	68b8      	ldr	r0, [r7, #8]
 800c032:	f000 f80f 	bl	800c054 <IntToUnicode>
  }
}
 800c036:	bf00      	nop
 800c038:	3710      	adds	r7, #16
 800c03a:	46bd      	mov	sp, r7
 800c03c:	bd80      	pop	{r7, pc}
 800c03e:	bf00      	nop
 800c040:	1fff7a10 	.word	0x1fff7a10
 800c044:	1fff7a14 	.word	0x1fff7a14
 800c048:	1fff7a18 	.word	0x1fff7a18
 800c04c:	200000e6 	.word	0x200000e6
 800c050:	200000f6 	.word	0x200000f6

0800c054 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c054:	b480      	push	{r7}
 800c056:	b087      	sub	sp, #28
 800c058:	af00      	add	r7, sp, #0
 800c05a:	60f8      	str	r0, [r7, #12]
 800c05c:	60b9      	str	r1, [r7, #8]
 800c05e:	4613      	mov	r3, r2
 800c060:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c062:	2300      	movs	r3, #0
 800c064:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c066:	2300      	movs	r3, #0
 800c068:	75fb      	strb	r3, [r7, #23]
 800c06a:	e027      	b.n	800c0bc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	0f1b      	lsrs	r3, r3, #28
 800c070:	2b09      	cmp	r3, #9
 800c072:	d80b      	bhi.n	800c08c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	0f1b      	lsrs	r3, r3, #28
 800c078:	b2da      	uxtb	r2, r3
 800c07a:	7dfb      	ldrb	r3, [r7, #23]
 800c07c:	005b      	lsls	r3, r3, #1
 800c07e:	4619      	mov	r1, r3
 800c080:	68bb      	ldr	r3, [r7, #8]
 800c082:	440b      	add	r3, r1
 800c084:	3230      	adds	r2, #48	@ 0x30
 800c086:	b2d2      	uxtb	r2, r2
 800c088:	701a      	strb	r2, [r3, #0]
 800c08a:	e00a      	b.n	800c0a2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	0f1b      	lsrs	r3, r3, #28
 800c090:	b2da      	uxtb	r2, r3
 800c092:	7dfb      	ldrb	r3, [r7, #23]
 800c094:	005b      	lsls	r3, r3, #1
 800c096:	4619      	mov	r1, r3
 800c098:	68bb      	ldr	r3, [r7, #8]
 800c09a:	440b      	add	r3, r1
 800c09c:	3237      	adds	r2, #55	@ 0x37
 800c09e:	b2d2      	uxtb	r2, r2
 800c0a0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	011b      	lsls	r3, r3, #4
 800c0a6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c0a8:	7dfb      	ldrb	r3, [r7, #23]
 800c0aa:	005b      	lsls	r3, r3, #1
 800c0ac:	3301      	adds	r3, #1
 800c0ae:	68ba      	ldr	r2, [r7, #8]
 800c0b0:	4413      	add	r3, r2
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c0b6:	7dfb      	ldrb	r3, [r7, #23]
 800c0b8:	3301      	adds	r3, #1
 800c0ba:	75fb      	strb	r3, [r7, #23]
 800c0bc:	7dfa      	ldrb	r2, [r7, #23]
 800c0be:	79fb      	ldrb	r3, [r7, #7]
 800c0c0:	429a      	cmp	r2, r3
 800c0c2:	d3d3      	bcc.n	800c06c <IntToUnicode+0x18>
  }
}
 800c0c4:	bf00      	nop
 800c0c6:	bf00      	nop
 800c0c8:	371c      	adds	r7, #28
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d0:	4770      	bx	lr
	...

0800c0d4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b08a      	sub	sp, #40	@ 0x28
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c0dc:	f107 0314 	add.w	r3, r7, #20
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	601a      	str	r2, [r3, #0]
 800c0e4:	605a      	str	r2, [r3, #4]
 800c0e6:	609a      	str	r2, [r3, #8]
 800c0e8:	60da      	str	r2, [r3, #12]
 800c0ea:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c0f4:	d147      	bne.n	800c186 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	613b      	str	r3, [r7, #16]
 800c0fa:	4b25      	ldr	r3, [pc, #148]	@ (800c190 <HAL_PCD_MspInit+0xbc>)
 800c0fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0fe:	4a24      	ldr	r2, [pc, #144]	@ (800c190 <HAL_PCD_MspInit+0xbc>)
 800c100:	f043 0301 	orr.w	r3, r3, #1
 800c104:	6313      	str	r3, [r2, #48]	@ 0x30
 800c106:	4b22      	ldr	r3, [pc, #136]	@ (800c190 <HAL_PCD_MspInit+0xbc>)
 800c108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c10a:	f003 0301 	and.w	r3, r3, #1
 800c10e:	613b      	str	r3, [r7, #16]
 800c110:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800c112:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c116:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c118:	2300      	movs	r3, #0
 800c11a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c11c:	2300      	movs	r3, #0
 800c11e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800c120:	f107 0314 	add.w	r3, r7, #20
 800c124:	4619      	mov	r1, r3
 800c126:	481b      	ldr	r0, [pc, #108]	@ (800c194 <HAL_PCD_MspInit+0xc0>)
 800c128:	f7f5 fdf6 	bl	8001d18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800c12c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800c130:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c132:	2302      	movs	r3, #2
 800c134:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c136:	2300      	movs	r3, #0
 800c138:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c13a:	2303      	movs	r3, #3
 800c13c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c13e:	230a      	movs	r3, #10
 800c140:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c142:	f107 0314 	add.w	r3, r7, #20
 800c146:	4619      	mov	r1, r3
 800c148:	4812      	ldr	r0, [pc, #72]	@ (800c194 <HAL_PCD_MspInit+0xc0>)
 800c14a:	f7f5 fde5 	bl	8001d18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c14e:	4b10      	ldr	r3, [pc, #64]	@ (800c190 <HAL_PCD_MspInit+0xbc>)
 800c150:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c152:	4a0f      	ldr	r2, [pc, #60]	@ (800c190 <HAL_PCD_MspInit+0xbc>)
 800c154:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c158:	6353      	str	r3, [r2, #52]	@ 0x34
 800c15a:	2300      	movs	r3, #0
 800c15c:	60fb      	str	r3, [r7, #12]
 800c15e:	4b0c      	ldr	r3, [pc, #48]	@ (800c190 <HAL_PCD_MspInit+0xbc>)
 800c160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c162:	4a0b      	ldr	r2, [pc, #44]	@ (800c190 <HAL_PCD_MspInit+0xbc>)
 800c164:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c168:	6453      	str	r3, [r2, #68]	@ 0x44
 800c16a:	4b09      	ldr	r3, [pc, #36]	@ (800c190 <HAL_PCD_MspInit+0xbc>)
 800c16c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c16e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c172:	60fb      	str	r3, [r7, #12]
 800c174:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800c176:	2200      	movs	r2, #0
 800c178:	2105      	movs	r1, #5
 800c17a:	2043      	movs	r0, #67	@ 0x43
 800c17c:	f7f5 fd95 	bl	8001caa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c180:	2043      	movs	r0, #67	@ 0x43
 800c182:	f7f5 fdae 	bl	8001ce2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c186:	bf00      	nop
 800c188:	3728      	adds	r7, #40	@ 0x28
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bd80      	pop	{r7, pc}
 800c18e:	bf00      	nop
 800c190:	40023800 	.word	0x40023800
 800c194:	40020000 	.word	0x40020000

0800c198 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b082      	sub	sp, #8
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c1ac:	4619      	mov	r1, r3
 800c1ae:	4610      	mov	r0, r2
 800c1b0:	f7fb fa3b 	bl	800762a <USBD_LL_SetupStage>
}
 800c1b4:	bf00      	nop
 800c1b6:	3708      	adds	r7, #8
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	bd80      	pop	{r7, pc}

0800c1bc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b082      	sub	sp, #8
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
 800c1c4:	460b      	mov	r3, r1
 800c1c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c1ce:	78fa      	ldrb	r2, [r7, #3]
 800c1d0:	6879      	ldr	r1, [r7, #4]
 800c1d2:	4613      	mov	r3, r2
 800c1d4:	00db      	lsls	r3, r3, #3
 800c1d6:	4413      	add	r3, r2
 800c1d8:	009b      	lsls	r3, r3, #2
 800c1da:	440b      	add	r3, r1
 800c1dc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c1e0:	681a      	ldr	r2, [r3, #0]
 800c1e2:	78fb      	ldrb	r3, [r7, #3]
 800c1e4:	4619      	mov	r1, r3
 800c1e6:	f7fb fa75 	bl	80076d4 <USBD_LL_DataOutStage>
}
 800c1ea:	bf00      	nop
 800c1ec:	3708      	adds	r7, #8
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	bd80      	pop	{r7, pc}

0800c1f2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1f2:	b580      	push	{r7, lr}
 800c1f4:	b082      	sub	sp, #8
 800c1f6:	af00      	add	r7, sp, #0
 800c1f8:	6078      	str	r0, [r7, #4]
 800c1fa:	460b      	mov	r3, r1
 800c1fc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c204:	78fa      	ldrb	r2, [r7, #3]
 800c206:	6879      	ldr	r1, [r7, #4]
 800c208:	4613      	mov	r3, r2
 800c20a:	00db      	lsls	r3, r3, #3
 800c20c:	4413      	add	r3, r2
 800c20e:	009b      	lsls	r3, r3, #2
 800c210:	440b      	add	r3, r1
 800c212:	3320      	adds	r3, #32
 800c214:	681a      	ldr	r2, [r3, #0]
 800c216:	78fb      	ldrb	r3, [r7, #3]
 800c218:	4619      	mov	r1, r3
 800c21a:	f7fb fb17 	bl	800784c <USBD_LL_DataInStage>
}
 800c21e:	bf00      	nop
 800c220:	3708      	adds	r7, #8
 800c222:	46bd      	mov	sp, r7
 800c224:	bd80      	pop	{r7, pc}

0800c226 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c226:	b580      	push	{r7, lr}
 800c228:	b082      	sub	sp, #8
 800c22a:	af00      	add	r7, sp, #0
 800c22c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c234:	4618      	mov	r0, r3
 800c236:	f7fb fc5b 	bl	8007af0 <USBD_LL_SOF>
}
 800c23a:	bf00      	nop
 800c23c:	3708      	adds	r7, #8
 800c23e:	46bd      	mov	sp, r7
 800c240:	bd80      	pop	{r7, pc}

0800c242 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c242:	b580      	push	{r7, lr}
 800c244:	b084      	sub	sp, #16
 800c246:	af00      	add	r7, sp, #0
 800c248:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c24a:	2301      	movs	r3, #1
 800c24c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	79db      	ldrb	r3, [r3, #7]
 800c252:	2b02      	cmp	r3, #2
 800c254:	d001      	beq.n	800c25a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c256:	f7f4 ff4d 	bl	80010f4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c260:	7bfa      	ldrb	r2, [r7, #15]
 800c262:	4611      	mov	r1, r2
 800c264:	4618      	mov	r0, r3
 800c266:	f7fb fbff 	bl	8007a68 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c270:	4618      	mov	r0, r3
 800c272:	f7fb fba6 	bl	80079c2 <USBD_LL_Reset>
}
 800c276:	bf00      	nop
 800c278:	3710      	adds	r7, #16
 800c27a:	46bd      	mov	sp, r7
 800c27c:	bd80      	pop	{r7, pc}
	...

0800c280 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b082      	sub	sp, #8
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c28e:	4618      	mov	r0, r3
 800c290:	f7fb fbfa 	bl	8007a88 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	687a      	ldr	r2, [r7, #4]
 800c2a0:	6812      	ldr	r2, [r2, #0]
 800c2a2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c2a6:	f043 0301 	orr.w	r3, r3, #1
 800c2aa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	7adb      	ldrb	r3, [r3, #11]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d005      	beq.n	800c2c0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c2b4:	4b04      	ldr	r3, [pc, #16]	@ (800c2c8 <HAL_PCD_SuspendCallback+0x48>)
 800c2b6:	691b      	ldr	r3, [r3, #16]
 800c2b8:	4a03      	ldr	r2, [pc, #12]	@ (800c2c8 <HAL_PCD_SuspendCallback+0x48>)
 800c2ba:	f043 0306 	orr.w	r3, r3, #6
 800c2be:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c2c0:	bf00      	nop
 800c2c2:	3708      	adds	r7, #8
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bd80      	pop	{r7, pc}
 800c2c8:	e000ed00 	.word	0xe000ed00

0800c2cc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b082      	sub	sp, #8
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c2da:	4618      	mov	r0, r3
 800c2dc:	f7fb fbf0 	bl	8007ac0 <USBD_LL_Resume>
}
 800c2e0:	bf00      	nop
 800c2e2:	3708      	adds	r7, #8
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	bd80      	pop	{r7, pc}

0800c2e8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b082      	sub	sp, #8
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
 800c2f0:	460b      	mov	r3, r1
 800c2f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c2fa:	78fa      	ldrb	r2, [r7, #3]
 800c2fc:	4611      	mov	r1, r2
 800c2fe:	4618      	mov	r0, r3
 800c300:	f7fb fc48 	bl	8007b94 <USBD_LL_IsoOUTIncomplete>
}
 800c304:	bf00      	nop
 800c306:	3708      	adds	r7, #8
 800c308:	46bd      	mov	sp, r7
 800c30a:	bd80      	pop	{r7, pc}

0800c30c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b082      	sub	sp, #8
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
 800c314:	460b      	mov	r3, r1
 800c316:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c31e:	78fa      	ldrb	r2, [r7, #3]
 800c320:	4611      	mov	r1, r2
 800c322:	4618      	mov	r0, r3
 800c324:	f7fb fc04 	bl	8007b30 <USBD_LL_IsoINIncomplete>
}
 800c328:	bf00      	nop
 800c32a:	3708      	adds	r7, #8
 800c32c:	46bd      	mov	sp, r7
 800c32e:	bd80      	pop	{r7, pc}

0800c330 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b082      	sub	sp, #8
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c33e:	4618      	mov	r0, r3
 800c340:	f7fb fc5a 	bl	8007bf8 <USBD_LL_DevConnected>
}
 800c344:	bf00      	nop
 800c346:	3708      	adds	r7, #8
 800c348:	46bd      	mov	sp, r7
 800c34a:	bd80      	pop	{r7, pc}

0800c34c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b082      	sub	sp, #8
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c35a:	4618      	mov	r0, r3
 800c35c:	f7fb fc57 	bl	8007c0e <USBD_LL_DevDisconnected>
}
 800c360:	bf00      	nop
 800c362:	3708      	adds	r7, #8
 800c364:	46bd      	mov	sp, r7
 800c366:	bd80      	pop	{r7, pc}

0800c368 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b082      	sub	sp, #8
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	781b      	ldrb	r3, [r3, #0]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d13c      	bne.n	800c3f2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c378:	4a20      	ldr	r2, [pc, #128]	@ (800c3fc <USBD_LL_Init+0x94>)
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	4a1e      	ldr	r2, [pc, #120]	@ (800c3fc <USBD_LL_Init+0x94>)
 800c384:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c388:	4b1c      	ldr	r3, [pc, #112]	@ (800c3fc <USBD_LL_Init+0x94>)
 800c38a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800c38e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c390:	4b1a      	ldr	r3, [pc, #104]	@ (800c3fc <USBD_LL_Init+0x94>)
 800c392:	2204      	movs	r2, #4
 800c394:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c396:	4b19      	ldr	r3, [pc, #100]	@ (800c3fc <USBD_LL_Init+0x94>)
 800c398:	2202      	movs	r2, #2
 800c39a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c39c:	4b17      	ldr	r3, [pc, #92]	@ (800c3fc <USBD_LL_Init+0x94>)
 800c39e:	2200      	movs	r2, #0
 800c3a0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c3a2:	4b16      	ldr	r3, [pc, #88]	@ (800c3fc <USBD_LL_Init+0x94>)
 800c3a4:	2202      	movs	r2, #2
 800c3a6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c3a8:	4b14      	ldr	r3, [pc, #80]	@ (800c3fc <USBD_LL_Init+0x94>)
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c3ae:	4b13      	ldr	r3, [pc, #76]	@ (800c3fc <USBD_LL_Init+0x94>)
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c3b4:	4b11      	ldr	r3, [pc, #68]	@ (800c3fc <USBD_LL_Init+0x94>)
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800c3ba:	4b10      	ldr	r3, [pc, #64]	@ (800c3fc <USBD_LL_Init+0x94>)
 800c3bc:	2201      	movs	r2, #1
 800c3be:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c3c0:	4b0e      	ldr	r3, [pc, #56]	@ (800c3fc <USBD_LL_Init+0x94>)
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c3c6:	480d      	ldr	r0, [pc, #52]	@ (800c3fc <USBD_LL_Init+0x94>)
 800c3c8:	f7f6 ffac 	bl	8003324 <HAL_PCD_Init>
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d001      	beq.n	800c3d6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c3d2:	f7f4 fe8f 	bl	80010f4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c3d6:	2180      	movs	r1, #128	@ 0x80
 800c3d8:	4808      	ldr	r0, [pc, #32]	@ (800c3fc <USBD_LL_Init+0x94>)
 800c3da:	f7f8 f9d8 	bl	800478e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c3de:	2240      	movs	r2, #64	@ 0x40
 800c3e0:	2100      	movs	r1, #0
 800c3e2:	4806      	ldr	r0, [pc, #24]	@ (800c3fc <USBD_LL_Init+0x94>)
 800c3e4:	f7f8 f98c 	bl	8004700 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c3e8:	2280      	movs	r2, #128	@ 0x80
 800c3ea:	2101      	movs	r1, #1
 800c3ec:	4803      	ldr	r0, [pc, #12]	@ (800c3fc <USBD_LL_Init+0x94>)
 800c3ee:	f7f8 f987 	bl	8004700 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c3f2:	2300      	movs	r3, #0
}
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	3708      	adds	r7, #8
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	bd80      	pop	{r7, pc}
 800c3fc:	200063bc 	.word	0x200063bc

0800c400 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c400:	b580      	push	{r7, lr}
 800c402:	b084      	sub	sp, #16
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c408:	2300      	movs	r3, #0
 800c40a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c40c:	2300      	movs	r3, #0
 800c40e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c416:	4618      	mov	r0, r3
 800c418:	f7f7 f893 	bl	8003542 <HAL_PCD_Start>
 800c41c:	4603      	mov	r3, r0
 800c41e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c420:	7bfb      	ldrb	r3, [r7, #15]
 800c422:	4618      	mov	r0, r3
 800c424:	f000 f942 	bl	800c6ac <USBD_Get_USB_Status>
 800c428:	4603      	mov	r3, r0
 800c42a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c42c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c42e:	4618      	mov	r0, r3
 800c430:	3710      	adds	r7, #16
 800c432:	46bd      	mov	sp, r7
 800c434:	bd80      	pop	{r7, pc}

0800c436 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c436:	b580      	push	{r7, lr}
 800c438:	b084      	sub	sp, #16
 800c43a:	af00      	add	r7, sp, #0
 800c43c:	6078      	str	r0, [r7, #4]
 800c43e:	4608      	mov	r0, r1
 800c440:	4611      	mov	r1, r2
 800c442:	461a      	mov	r2, r3
 800c444:	4603      	mov	r3, r0
 800c446:	70fb      	strb	r3, [r7, #3]
 800c448:	460b      	mov	r3, r1
 800c44a:	70bb      	strb	r3, [r7, #2]
 800c44c:	4613      	mov	r3, r2
 800c44e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c450:	2300      	movs	r3, #0
 800c452:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c454:	2300      	movs	r3, #0
 800c456:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c45e:	78bb      	ldrb	r3, [r7, #2]
 800c460:	883a      	ldrh	r2, [r7, #0]
 800c462:	78f9      	ldrb	r1, [r7, #3]
 800c464:	f7f7 fd67 	bl	8003f36 <HAL_PCD_EP_Open>
 800c468:	4603      	mov	r3, r0
 800c46a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c46c:	7bfb      	ldrb	r3, [r7, #15]
 800c46e:	4618      	mov	r0, r3
 800c470:	f000 f91c 	bl	800c6ac <USBD_Get_USB_Status>
 800c474:	4603      	mov	r3, r0
 800c476:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c478:	7bbb      	ldrb	r3, [r7, #14]
}
 800c47a:	4618      	mov	r0, r3
 800c47c:	3710      	adds	r7, #16
 800c47e:	46bd      	mov	sp, r7
 800c480:	bd80      	pop	{r7, pc}

0800c482 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c482:	b580      	push	{r7, lr}
 800c484:	b084      	sub	sp, #16
 800c486:	af00      	add	r7, sp, #0
 800c488:	6078      	str	r0, [r7, #4]
 800c48a:	460b      	mov	r3, r1
 800c48c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c48e:	2300      	movs	r3, #0
 800c490:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c492:	2300      	movs	r3, #0
 800c494:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c49c:	78fa      	ldrb	r2, [r7, #3]
 800c49e:	4611      	mov	r1, r2
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	f7f7 fdb2 	bl	800400a <HAL_PCD_EP_Close>
 800c4a6:	4603      	mov	r3, r0
 800c4a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c4aa:	7bfb      	ldrb	r3, [r7, #15]
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	f000 f8fd 	bl	800c6ac <USBD_Get_USB_Status>
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c4b6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	3710      	adds	r7, #16
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	bd80      	pop	{r7, pc}

0800c4c0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b084      	sub	sp, #16
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
 800c4c8:	460b      	mov	r3, r1
 800c4ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c4da:	78fa      	ldrb	r2, [r7, #3]
 800c4dc:	4611      	mov	r1, r2
 800c4de:	4618      	mov	r0, r3
 800c4e0:	f7f7 fe6a 	bl	80041b8 <HAL_PCD_EP_SetStall>
 800c4e4:	4603      	mov	r3, r0
 800c4e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c4e8:	7bfb      	ldrb	r3, [r7, #15]
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f000 f8de 	bl	800c6ac <USBD_Get_USB_Status>
 800c4f0:	4603      	mov	r3, r0
 800c4f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c4f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	3710      	adds	r7, #16
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	bd80      	pop	{r7, pc}

0800c4fe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c4fe:	b580      	push	{r7, lr}
 800c500:	b084      	sub	sp, #16
 800c502:	af00      	add	r7, sp, #0
 800c504:	6078      	str	r0, [r7, #4]
 800c506:	460b      	mov	r3, r1
 800c508:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c50a:	2300      	movs	r3, #0
 800c50c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c50e:	2300      	movs	r3, #0
 800c510:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c518:	78fa      	ldrb	r2, [r7, #3]
 800c51a:	4611      	mov	r1, r2
 800c51c:	4618      	mov	r0, r3
 800c51e:	f7f7 feae 	bl	800427e <HAL_PCD_EP_ClrStall>
 800c522:	4603      	mov	r3, r0
 800c524:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c526:	7bfb      	ldrb	r3, [r7, #15]
 800c528:	4618      	mov	r0, r3
 800c52a:	f000 f8bf 	bl	800c6ac <USBD_Get_USB_Status>
 800c52e:	4603      	mov	r3, r0
 800c530:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c532:	7bbb      	ldrb	r3, [r7, #14]
}
 800c534:	4618      	mov	r0, r3
 800c536:	3710      	adds	r7, #16
 800c538:	46bd      	mov	sp, r7
 800c53a:	bd80      	pop	{r7, pc}

0800c53c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c53c:	b480      	push	{r7}
 800c53e:	b085      	sub	sp, #20
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
 800c544:	460b      	mov	r3, r1
 800c546:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c54e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c550:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c554:	2b00      	cmp	r3, #0
 800c556:	da0b      	bge.n	800c570 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c558:	78fb      	ldrb	r3, [r7, #3]
 800c55a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c55e:	68f9      	ldr	r1, [r7, #12]
 800c560:	4613      	mov	r3, r2
 800c562:	00db      	lsls	r3, r3, #3
 800c564:	4413      	add	r3, r2
 800c566:	009b      	lsls	r3, r3, #2
 800c568:	440b      	add	r3, r1
 800c56a:	3316      	adds	r3, #22
 800c56c:	781b      	ldrb	r3, [r3, #0]
 800c56e:	e00b      	b.n	800c588 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c570:	78fb      	ldrb	r3, [r7, #3]
 800c572:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c576:	68f9      	ldr	r1, [r7, #12]
 800c578:	4613      	mov	r3, r2
 800c57a:	00db      	lsls	r3, r3, #3
 800c57c:	4413      	add	r3, r2
 800c57e:	009b      	lsls	r3, r3, #2
 800c580:	440b      	add	r3, r1
 800c582:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800c586:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c588:	4618      	mov	r0, r3
 800c58a:	3714      	adds	r7, #20
 800c58c:	46bd      	mov	sp, r7
 800c58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c592:	4770      	bx	lr

0800c594 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b084      	sub	sp, #16
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
 800c59c:	460b      	mov	r3, r1
 800c59e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c5ae:	78fa      	ldrb	r2, [r7, #3]
 800c5b0:	4611      	mov	r1, r2
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	f7f7 fc9b 	bl	8003eee <HAL_PCD_SetAddress>
 800c5b8:	4603      	mov	r3, r0
 800c5ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c5bc:	7bfb      	ldrb	r3, [r7, #15]
 800c5be:	4618      	mov	r0, r3
 800c5c0:	f000 f874 	bl	800c6ac <USBD_Get_USB_Status>
 800c5c4:	4603      	mov	r3, r0
 800c5c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c5c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	3710      	adds	r7, #16
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	bd80      	pop	{r7, pc}

0800c5d2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c5d2:	b580      	push	{r7, lr}
 800c5d4:	b086      	sub	sp, #24
 800c5d6:	af00      	add	r7, sp, #0
 800c5d8:	60f8      	str	r0, [r7, #12]
 800c5da:	607a      	str	r2, [r7, #4]
 800c5dc:	603b      	str	r3, [r7, #0]
 800c5de:	460b      	mov	r3, r1
 800c5e0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c5f0:	7af9      	ldrb	r1, [r7, #11]
 800c5f2:	683b      	ldr	r3, [r7, #0]
 800c5f4:	687a      	ldr	r2, [r7, #4]
 800c5f6:	f7f7 fda5 	bl	8004144 <HAL_PCD_EP_Transmit>
 800c5fa:	4603      	mov	r3, r0
 800c5fc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c5fe:	7dfb      	ldrb	r3, [r7, #23]
 800c600:	4618      	mov	r0, r3
 800c602:	f000 f853 	bl	800c6ac <USBD_Get_USB_Status>
 800c606:	4603      	mov	r3, r0
 800c608:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c60a:	7dbb      	ldrb	r3, [r7, #22]
}
 800c60c:	4618      	mov	r0, r3
 800c60e:	3718      	adds	r7, #24
 800c610:	46bd      	mov	sp, r7
 800c612:	bd80      	pop	{r7, pc}

0800c614 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b086      	sub	sp, #24
 800c618:	af00      	add	r7, sp, #0
 800c61a:	60f8      	str	r0, [r7, #12]
 800c61c:	607a      	str	r2, [r7, #4]
 800c61e:	603b      	str	r3, [r7, #0]
 800c620:	460b      	mov	r3, r1
 800c622:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c624:	2300      	movs	r3, #0
 800c626:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c628:	2300      	movs	r3, #0
 800c62a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c632:	7af9      	ldrb	r1, [r7, #11]
 800c634:	683b      	ldr	r3, [r7, #0]
 800c636:	687a      	ldr	r2, [r7, #4]
 800c638:	f7f7 fd31 	bl	800409e <HAL_PCD_EP_Receive>
 800c63c:	4603      	mov	r3, r0
 800c63e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c640:	7dfb      	ldrb	r3, [r7, #23]
 800c642:	4618      	mov	r0, r3
 800c644:	f000 f832 	bl	800c6ac <USBD_Get_USB_Status>
 800c648:	4603      	mov	r3, r0
 800c64a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c64c:	7dbb      	ldrb	r3, [r7, #22]
}
 800c64e:	4618      	mov	r0, r3
 800c650:	3718      	adds	r7, #24
 800c652:	46bd      	mov	sp, r7
 800c654:	bd80      	pop	{r7, pc}

0800c656 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c656:	b580      	push	{r7, lr}
 800c658:	b082      	sub	sp, #8
 800c65a:	af00      	add	r7, sp, #0
 800c65c:	6078      	str	r0, [r7, #4]
 800c65e:	460b      	mov	r3, r1
 800c660:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c668:	78fa      	ldrb	r2, [r7, #3]
 800c66a:	4611      	mov	r1, r2
 800c66c:	4618      	mov	r0, r3
 800c66e:	f7f7 fd51 	bl	8004114 <HAL_PCD_EP_GetRxCount>
 800c672:	4603      	mov	r3, r0
}
 800c674:	4618      	mov	r0, r3
 800c676:	3708      	adds	r7, #8
 800c678:	46bd      	mov	sp, r7
 800c67a:	bd80      	pop	{r7, pc}

0800c67c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c67c:	b480      	push	{r7}
 800c67e:	b083      	sub	sp, #12
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c684:	4b03      	ldr	r3, [pc, #12]	@ (800c694 <USBD_static_malloc+0x18>)
}
 800c686:	4618      	mov	r0, r3
 800c688:	370c      	adds	r7, #12
 800c68a:	46bd      	mov	sp, r7
 800c68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c690:	4770      	bx	lr
 800c692:	bf00      	nop
 800c694:	200068a0 	.word	0x200068a0

0800c698 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c698:	b480      	push	{r7}
 800c69a:	b083      	sub	sp, #12
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]

}
 800c6a0:	bf00      	nop
 800c6a2:	370c      	adds	r7, #12
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6aa:	4770      	bx	lr

0800c6ac <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c6ac:	b480      	push	{r7}
 800c6ae:	b085      	sub	sp, #20
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	4603      	mov	r3, r0
 800c6b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c6ba:	79fb      	ldrb	r3, [r7, #7]
 800c6bc:	2b03      	cmp	r3, #3
 800c6be:	d817      	bhi.n	800c6f0 <USBD_Get_USB_Status+0x44>
 800c6c0:	a201      	add	r2, pc, #4	@ (adr r2, 800c6c8 <USBD_Get_USB_Status+0x1c>)
 800c6c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6c6:	bf00      	nop
 800c6c8:	0800c6d9 	.word	0x0800c6d9
 800c6cc:	0800c6df 	.word	0x0800c6df
 800c6d0:	0800c6e5 	.word	0x0800c6e5
 800c6d4:	0800c6eb 	.word	0x0800c6eb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c6d8:	2300      	movs	r3, #0
 800c6da:	73fb      	strb	r3, [r7, #15]
    break;
 800c6dc:	e00b      	b.n	800c6f6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c6de:	2303      	movs	r3, #3
 800c6e0:	73fb      	strb	r3, [r7, #15]
    break;
 800c6e2:	e008      	b.n	800c6f6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c6e4:	2301      	movs	r3, #1
 800c6e6:	73fb      	strb	r3, [r7, #15]
    break;
 800c6e8:	e005      	b.n	800c6f6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c6ea:	2303      	movs	r3, #3
 800c6ec:	73fb      	strb	r3, [r7, #15]
    break;
 800c6ee:	e002      	b.n	800c6f6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c6f0:	2303      	movs	r3, #3
 800c6f2:	73fb      	strb	r3, [r7, #15]
    break;
 800c6f4:	bf00      	nop
  }
  return usb_status;
 800c6f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	3714      	adds	r7, #20
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c702:	4770      	bx	lr

0800c704 <sniprintf>:
 800c704:	b40c      	push	{r2, r3}
 800c706:	b530      	push	{r4, r5, lr}
 800c708:	4b17      	ldr	r3, [pc, #92]	@ (800c768 <sniprintf+0x64>)
 800c70a:	1e0c      	subs	r4, r1, #0
 800c70c:	681d      	ldr	r5, [r3, #0]
 800c70e:	b09d      	sub	sp, #116	@ 0x74
 800c710:	da08      	bge.n	800c724 <sniprintf+0x20>
 800c712:	238b      	movs	r3, #139	@ 0x8b
 800c714:	602b      	str	r3, [r5, #0]
 800c716:	f04f 30ff 	mov.w	r0, #4294967295
 800c71a:	b01d      	add	sp, #116	@ 0x74
 800c71c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c720:	b002      	add	sp, #8
 800c722:	4770      	bx	lr
 800c724:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800c728:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c72c:	bf14      	ite	ne
 800c72e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c732:	4623      	moveq	r3, r4
 800c734:	9304      	str	r3, [sp, #16]
 800c736:	9307      	str	r3, [sp, #28]
 800c738:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c73c:	9002      	str	r0, [sp, #8]
 800c73e:	9006      	str	r0, [sp, #24]
 800c740:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c744:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c746:	ab21      	add	r3, sp, #132	@ 0x84
 800c748:	a902      	add	r1, sp, #8
 800c74a:	4628      	mov	r0, r5
 800c74c:	9301      	str	r3, [sp, #4]
 800c74e:	f000 fa1b 	bl	800cb88 <_svfiprintf_r>
 800c752:	1c43      	adds	r3, r0, #1
 800c754:	bfbc      	itt	lt
 800c756:	238b      	movlt	r3, #139	@ 0x8b
 800c758:	602b      	strlt	r3, [r5, #0]
 800c75a:	2c00      	cmp	r4, #0
 800c75c:	d0dd      	beq.n	800c71a <sniprintf+0x16>
 800c75e:	9b02      	ldr	r3, [sp, #8]
 800c760:	2200      	movs	r2, #0
 800c762:	701a      	strb	r2, [r3, #0]
 800c764:	e7d9      	b.n	800c71a <sniprintf+0x16>
 800c766:	bf00      	nop
 800c768:	20000100 	.word	0x20000100

0800c76c <siprintf>:
 800c76c:	b40e      	push	{r1, r2, r3}
 800c76e:	b500      	push	{lr}
 800c770:	b09c      	sub	sp, #112	@ 0x70
 800c772:	ab1d      	add	r3, sp, #116	@ 0x74
 800c774:	9002      	str	r0, [sp, #8]
 800c776:	9006      	str	r0, [sp, #24]
 800c778:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c77c:	4809      	ldr	r0, [pc, #36]	@ (800c7a4 <siprintf+0x38>)
 800c77e:	9107      	str	r1, [sp, #28]
 800c780:	9104      	str	r1, [sp, #16]
 800c782:	4909      	ldr	r1, [pc, #36]	@ (800c7a8 <siprintf+0x3c>)
 800c784:	f853 2b04 	ldr.w	r2, [r3], #4
 800c788:	9105      	str	r1, [sp, #20]
 800c78a:	6800      	ldr	r0, [r0, #0]
 800c78c:	9301      	str	r3, [sp, #4]
 800c78e:	a902      	add	r1, sp, #8
 800c790:	f000 f9fa 	bl	800cb88 <_svfiprintf_r>
 800c794:	9b02      	ldr	r3, [sp, #8]
 800c796:	2200      	movs	r2, #0
 800c798:	701a      	strb	r2, [r3, #0]
 800c79a:	b01c      	add	sp, #112	@ 0x70
 800c79c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c7a0:	b003      	add	sp, #12
 800c7a2:	4770      	bx	lr
 800c7a4:	20000100 	.word	0x20000100
 800c7a8:	ffff0208 	.word	0xffff0208

0800c7ac <siscanf>:
 800c7ac:	b40e      	push	{r1, r2, r3}
 800c7ae:	b530      	push	{r4, r5, lr}
 800c7b0:	b09c      	sub	sp, #112	@ 0x70
 800c7b2:	ac1f      	add	r4, sp, #124	@ 0x7c
 800c7b4:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800c7b8:	f854 5b04 	ldr.w	r5, [r4], #4
 800c7bc:	f8ad 2014 	strh.w	r2, [sp, #20]
 800c7c0:	9002      	str	r0, [sp, #8]
 800c7c2:	9006      	str	r0, [sp, #24]
 800c7c4:	f7f3 fd16 	bl	80001f4 <strlen>
 800c7c8:	4b0b      	ldr	r3, [pc, #44]	@ (800c7f8 <siscanf+0x4c>)
 800c7ca:	9003      	str	r0, [sp, #12]
 800c7cc:	9007      	str	r0, [sp, #28]
 800c7ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c7d0:	480a      	ldr	r0, [pc, #40]	@ (800c7fc <siscanf+0x50>)
 800c7d2:	9401      	str	r4, [sp, #4]
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c7d8:	9314      	str	r3, [sp, #80]	@ 0x50
 800c7da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c7de:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c7e2:	462a      	mov	r2, r5
 800c7e4:	4623      	mov	r3, r4
 800c7e6:	a902      	add	r1, sp, #8
 800c7e8:	6800      	ldr	r0, [r0, #0]
 800c7ea:	f000 fb21 	bl	800ce30 <__ssvfiscanf_r>
 800c7ee:	b01c      	add	sp, #112	@ 0x70
 800c7f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c7f4:	b003      	add	sp, #12
 800c7f6:	4770      	bx	lr
 800c7f8:	0800c801 	.word	0x0800c801
 800c7fc:	20000100 	.word	0x20000100

0800c800 <__seofread>:
 800c800:	2000      	movs	r0, #0
 800c802:	4770      	bx	lr

0800c804 <memset>:
 800c804:	4402      	add	r2, r0
 800c806:	4603      	mov	r3, r0
 800c808:	4293      	cmp	r3, r2
 800c80a:	d100      	bne.n	800c80e <memset+0xa>
 800c80c:	4770      	bx	lr
 800c80e:	f803 1b01 	strb.w	r1, [r3], #1
 800c812:	e7f9      	b.n	800c808 <memset+0x4>

0800c814 <strcspn>:
 800c814:	b570      	push	{r4, r5, r6, lr}
 800c816:	4603      	mov	r3, r0
 800c818:	461e      	mov	r6, r3
 800c81a:	f813 4b01 	ldrb.w	r4, [r3], #1
 800c81e:	b144      	cbz	r4, 800c832 <strcspn+0x1e>
 800c820:	1e4a      	subs	r2, r1, #1
 800c822:	e001      	b.n	800c828 <strcspn+0x14>
 800c824:	42a5      	cmp	r5, r4
 800c826:	d004      	beq.n	800c832 <strcspn+0x1e>
 800c828:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800c82c:	2d00      	cmp	r5, #0
 800c82e:	d1f9      	bne.n	800c824 <strcspn+0x10>
 800c830:	e7f2      	b.n	800c818 <strcspn+0x4>
 800c832:	1a30      	subs	r0, r6, r0
 800c834:	bd70      	pop	{r4, r5, r6, pc}

0800c836 <strncmp>:
 800c836:	b510      	push	{r4, lr}
 800c838:	b16a      	cbz	r2, 800c856 <strncmp+0x20>
 800c83a:	3901      	subs	r1, #1
 800c83c:	1884      	adds	r4, r0, r2
 800c83e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c842:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c846:	429a      	cmp	r2, r3
 800c848:	d103      	bne.n	800c852 <strncmp+0x1c>
 800c84a:	42a0      	cmp	r0, r4
 800c84c:	d001      	beq.n	800c852 <strncmp+0x1c>
 800c84e:	2a00      	cmp	r2, #0
 800c850:	d1f5      	bne.n	800c83e <strncmp+0x8>
 800c852:	1ad0      	subs	r0, r2, r3
 800c854:	bd10      	pop	{r4, pc}
 800c856:	4610      	mov	r0, r2
 800c858:	e7fc      	b.n	800c854 <strncmp+0x1e>
	...

0800c85c <__errno>:
 800c85c:	4b01      	ldr	r3, [pc, #4]	@ (800c864 <__errno+0x8>)
 800c85e:	6818      	ldr	r0, [r3, #0]
 800c860:	4770      	bx	lr
 800c862:	bf00      	nop
 800c864:	20000100 	.word	0x20000100

0800c868 <__libc_init_array>:
 800c868:	b570      	push	{r4, r5, r6, lr}
 800c86a:	4d0d      	ldr	r5, [pc, #52]	@ (800c8a0 <__libc_init_array+0x38>)
 800c86c:	4c0d      	ldr	r4, [pc, #52]	@ (800c8a4 <__libc_init_array+0x3c>)
 800c86e:	1b64      	subs	r4, r4, r5
 800c870:	10a4      	asrs	r4, r4, #2
 800c872:	2600      	movs	r6, #0
 800c874:	42a6      	cmp	r6, r4
 800c876:	d109      	bne.n	800c88c <__libc_init_array+0x24>
 800c878:	4d0b      	ldr	r5, [pc, #44]	@ (800c8a8 <__libc_init_array+0x40>)
 800c87a:	4c0c      	ldr	r4, [pc, #48]	@ (800c8ac <__libc_init_array+0x44>)
 800c87c:	f001 f8e8 	bl	800da50 <_init>
 800c880:	1b64      	subs	r4, r4, r5
 800c882:	10a4      	asrs	r4, r4, #2
 800c884:	2600      	movs	r6, #0
 800c886:	42a6      	cmp	r6, r4
 800c888:	d105      	bne.n	800c896 <__libc_init_array+0x2e>
 800c88a:	bd70      	pop	{r4, r5, r6, pc}
 800c88c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c890:	4798      	blx	r3
 800c892:	3601      	adds	r6, #1
 800c894:	e7ee      	b.n	800c874 <__libc_init_array+0xc>
 800c896:	f855 3b04 	ldr.w	r3, [r5], #4
 800c89a:	4798      	blx	r3
 800c89c:	3601      	adds	r6, #1
 800c89e:	e7f2      	b.n	800c886 <__libc_init_array+0x1e>
 800c8a0:	0800e548 	.word	0x0800e548
 800c8a4:	0800e548 	.word	0x0800e548
 800c8a8:	0800e548 	.word	0x0800e548
 800c8ac:	0800e54c 	.word	0x0800e54c

0800c8b0 <__retarget_lock_acquire_recursive>:
 800c8b0:	4770      	bx	lr

0800c8b2 <__retarget_lock_release_recursive>:
 800c8b2:	4770      	bx	lr

0800c8b4 <strcpy>:
 800c8b4:	4603      	mov	r3, r0
 800c8b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c8ba:	f803 2b01 	strb.w	r2, [r3], #1
 800c8be:	2a00      	cmp	r2, #0
 800c8c0:	d1f9      	bne.n	800c8b6 <strcpy+0x2>
 800c8c2:	4770      	bx	lr

0800c8c4 <memcpy>:
 800c8c4:	440a      	add	r2, r1
 800c8c6:	4291      	cmp	r1, r2
 800c8c8:	f100 33ff 	add.w	r3, r0, #4294967295
 800c8cc:	d100      	bne.n	800c8d0 <memcpy+0xc>
 800c8ce:	4770      	bx	lr
 800c8d0:	b510      	push	{r4, lr}
 800c8d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c8d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c8da:	4291      	cmp	r1, r2
 800c8dc:	d1f9      	bne.n	800c8d2 <memcpy+0xe>
 800c8de:	bd10      	pop	{r4, pc}

0800c8e0 <_free_r>:
 800c8e0:	b538      	push	{r3, r4, r5, lr}
 800c8e2:	4605      	mov	r5, r0
 800c8e4:	2900      	cmp	r1, #0
 800c8e6:	d041      	beq.n	800c96c <_free_r+0x8c>
 800c8e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c8ec:	1f0c      	subs	r4, r1, #4
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	bfb8      	it	lt
 800c8f2:	18e4      	addlt	r4, r4, r3
 800c8f4:	f000 f8e0 	bl	800cab8 <__malloc_lock>
 800c8f8:	4a1d      	ldr	r2, [pc, #116]	@ (800c970 <_free_r+0x90>)
 800c8fa:	6813      	ldr	r3, [r2, #0]
 800c8fc:	b933      	cbnz	r3, 800c90c <_free_r+0x2c>
 800c8fe:	6063      	str	r3, [r4, #4]
 800c900:	6014      	str	r4, [r2, #0]
 800c902:	4628      	mov	r0, r5
 800c904:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c908:	f000 b8dc 	b.w	800cac4 <__malloc_unlock>
 800c90c:	42a3      	cmp	r3, r4
 800c90e:	d908      	bls.n	800c922 <_free_r+0x42>
 800c910:	6820      	ldr	r0, [r4, #0]
 800c912:	1821      	adds	r1, r4, r0
 800c914:	428b      	cmp	r3, r1
 800c916:	bf01      	itttt	eq
 800c918:	6819      	ldreq	r1, [r3, #0]
 800c91a:	685b      	ldreq	r3, [r3, #4]
 800c91c:	1809      	addeq	r1, r1, r0
 800c91e:	6021      	streq	r1, [r4, #0]
 800c920:	e7ed      	b.n	800c8fe <_free_r+0x1e>
 800c922:	461a      	mov	r2, r3
 800c924:	685b      	ldr	r3, [r3, #4]
 800c926:	b10b      	cbz	r3, 800c92c <_free_r+0x4c>
 800c928:	42a3      	cmp	r3, r4
 800c92a:	d9fa      	bls.n	800c922 <_free_r+0x42>
 800c92c:	6811      	ldr	r1, [r2, #0]
 800c92e:	1850      	adds	r0, r2, r1
 800c930:	42a0      	cmp	r0, r4
 800c932:	d10b      	bne.n	800c94c <_free_r+0x6c>
 800c934:	6820      	ldr	r0, [r4, #0]
 800c936:	4401      	add	r1, r0
 800c938:	1850      	adds	r0, r2, r1
 800c93a:	4283      	cmp	r3, r0
 800c93c:	6011      	str	r1, [r2, #0]
 800c93e:	d1e0      	bne.n	800c902 <_free_r+0x22>
 800c940:	6818      	ldr	r0, [r3, #0]
 800c942:	685b      	ldr	r3, [r3, #4]
 800c944:	6053      	str	r3, [r2, #4]
 800c946:	4408      	add	r0, r1
 800c948:	6010      	str	r0, [r2, #0]
 800c94a:	e7da      	b.n	800c902 <_free_r+0x22>
 800c94c:	d902      	bls.n	800c954 <_free_r+0x74>
 800c94e:	230c      	movs	r3, #12
 800c950:	602b      	str	r3, [r5, #0]
 800c952:	e7d6      	b.n	800c902 <_free_r+0x22>
 800c954:	6820      	ldr	r0, [r4, #0]
 800c956:	1821      	adds	r1, r4, r0
 800c958:	428b      	cmp	r3, r1
 800c95a:	bf04      	itt	eq
 800c95c:	6819      	ldreq	r1, [r3, #0]
 800c95e:	685b      	ldreq	r3, [r3, #4]
 800c960:	6063      	str	r3, [r4, #4]
 800c962:	bf04      	itt	eq
 800c964:	1809      	addeq	r1, r1, r0
 800c966:	6021      	streq	r1, [r4, #0]
 800c968:	6054      	str	r4, [r2, #4]
 800c96a:	e7ca      	b.n	800c902 <_free_r+0x22>
 800c96c:	bd38      	pop	{r3, r4, r5, pc}
 800c96e:	bf00      	nop
 800c970:	20006c04 	.word	0x20006c04

0800c974 <sbrk_aligned>:
 800c974:	b570      	push	{r4, r5, r6, lr}
 800c976:	4e0f      	ldr	r6, [pc, #60]	@ (800c9b4 <sbrk_aligned+0x40>)
 800c978:	460c      	mov	r4, r1
 800c97a:	6831      	ldr	r1, [r6, #0]
 800c97c:	4605      	mov	r5, r0
 800c97e:	b911      	cbnz	r1, 800c986 <sbrk_aligned+0x12>
 800c980:	f000 ff34 	bl	800d7ec <_sbrk_r>
 800c984:	6030      	str	r0, [r6, #0]
 800c986:	4621      	mov	r1, r4
 800c988:	4628      	mov	r0, r5
 800c98a:	f000 ff2f 	bl	800d7ec <_sbrk_r>
 800c98e:	1c43      	adds	r3, r0, #1
 800c990:	d103      	bne.n	800c99a <sbrk_aligned+0x26>
 800c992:	f04f 34ff 	mov.w	r4, #4294967295
 800c996:	4620      	mov	r0, r4
 800c998:	bd70      	pop	{r4, r5, r6, pc}
 800c99a:	1cc4      	adds	r4, r0, #3
 800c99c:	f024 0403 	bic.w	r4, r4, #3
 800c9a0:	42a0      	cmp	r0, r4
 800c9a2:	d0f8      	beq.n	800c996 <sbrk_aligned+0x22>
 800c9a4:	1a21      	subs	r1, r4, r0
 800c9a6:	4628      	mov	r0, r5
 800c9a8:	f000 ff20 	bl	800d7ec <_sbrk_r>
 800c9ac:	3001      	adds	r0, #1
 800c9ae:	d1f2      	bne.n	800c996 <sbrk_aligned+0x22>
 800c9b0:	e7ef      	b.n	800c992 <sbrk_aligned+0x1e>
 800c9b2:	bf00      	nop
 800c9b4:	20006c00 	.word	0x20006c00

0800c9b8 <_malloc_r>:
 800c9b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9bc:	1ccd      	adds	r5, r1, #3
 800c9be:	f025 0503 	bic.w	r5, r5, #3
 800c9c2:	3508      	adds	r5, #8
 800c9c4:	2d0c      	cmp	r5, #12
 800c9c6:	bf38      	it	cc
 800c9c8:	250c      	movcc	r5, #12
 800c9ca:	2d00      	cmp	r5, #0
 800c9cc:	4606      	mov	r6, r0
 800c9ce:	db01      	blt.n	800c9d4 <_malloc_r+0x1c>
 800c9d0:	42a9      	cmp	r1, r5
 800c9d2:	d904      	bls.n	800c9de <_malloc_r+0x26>
 800c9d4:	230c      	movs	r3, #12
 800c9d6:	6033      	str	r3, [r6, #0]
 800c9d8:	2000      	movs	r0, #0
 800c9da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cab4 <_malloc_r+0xfc>
 800c9e2:	f000 f869 	bl	800cab8 <__malloc_lock>
 800c9e6:	f8d8 3000 	ldr.w	r3, [r8]
 800c9ea:	461c      	mov	r4, r3
 800c9ec:	bb44      	cbnz	r4, 800ca40 <_malloc_r+0x88>
 800c9ee:	4629      	mov	r1, r5
 800c9f0:	4630      	mov	r0, r6
 800c9f2:	f7ff ffbf 	bl	800c974 <sbrk_aligned>
 800c9f6:	1c43      	adds	r3, r0, #1
 800c9f8:	4604      	mov	r4, r0
 800c9fa:	d158      	bne.n	800caae <_malloc_r+0xf6>
 800c9fc:	f8d8 4000 	ldr.w	r4, [r8]
 800ca00:	4627      	mov	r7, r4
 800ca02:	2f00      	cmp	r7, #0
 800ca04:	d143      	bne.n	800ca8e <_malloc_r+0xd6>
 800ca06:	2c00      	cmp	r4, #0
 800ca08:	d04b      	beq.n	800caa2 <_malloc_r+0xea>
 800ca0a:	6823      	ldr	r3, [r4, #0]
 800ca0c:	4639      	mov	r1, r7
 800ca0e:	4630      	mov	r0, r6
 800ca10:	eb04 0903 	add.w	r9, r4, r3
 800ca14:	f000 feea 	bl	800d7ec <_sbrk_r>
 800ca18:	4581      	cmp	r9, r0
 800ca1a:	d142      	bne.n	800caa2 <_malloc_r+0xea>
 800ca1c:	6821      	ldr	r1, [r4, #0]
 800ca1e:	1a6d      	subs	r5, r5, r1
 800ca20:	4629      	mov	r1, r5
 800ca22:	4630      	mov	r0, r6
 800ca24:	f7ff ffa6 	bl	800c974 <sbrk_aligned>
 800ca28:	3001      	adds	r0, #1
 800ca2a:	d03a      	beq.n	800caa2 <_malloc_r+0xea>
 800ca2c:	6823      	ldr	r3, [r4, #0]
 800ca2e:	442b      	add	r3, r5
 800ca30:	6023      	str	r3, [r4, #0]
 800ca32:	f8d8 3000 	ldr.w	r3, [r8]
 800ca36:	685a      	ldr	r2, [r3, #4]
 800ca38:	bb62      	cbnz	r2, 800ca94 <_malloc_r+0xdc>
 800ca3a:	f8c8 7000 	str.w	r7, [r8]
 800ca3e:	e00f      	b.n	800ca60 <_malloc_r+0xa8>
 800ca40:	6822      	ldr	r2, [r4, #0]
 800ca42:	1b52      	subs	r2, r2, r5
 800ca44:	d420      	bmi.n	800ca88 <_malloc_r+0xd0>
 800ca46:	2a0b      	cmp	r2, #11
 800ca48:	d917      	bls.n	800ca7a <_malloc_r+0xc2>
 800ca4a:	1961      	adds	r1, r4, r5
 800ca4c:	42a3      	cmp	r3, r4
 800ca4e:	6025      	str	r5, [r4, #0]
 800ca50:	bf18      	it	ne
 800ca52:	6059      	strne	r1, [r3, #4]
 800ca54:	6863      	ldr	r3, [r4, #4]
 800ca56:	bf08      	it	eq
 800ca58:	f8c8 1000 	streq.w	r1, [r8]
 800ca5c:	5162      	str	r2, [r4, r5]
 800ca5e:	604b      	str	r3, [r1, #4]
 800ca60:	4630      	mov	r0, r6
 800ca62:	f000 f82f 	bl	800cac4 <__malloc_unlock>
 800ca66:	f104 000b 	add.w	r0, r4, #11
 800ca6a:	1d23      	adds	r3, r4, #4
 800ca6c:	f020 0007 	bic.w	r0, r0, #7
 800ca70:	1ac2      	subs	r2, r0, r3
 800ca72:	bf1c      	itt	ne
 800ca74:	1a1b      	subne	r3, r3, r0
 800ca76:	50a3      	strne	r3, [r4, r2]
 800ca78:	e7af      	b.n	800c9da <_malloc_r+0x22>
 800ca7a:	6862      	ldr	r2, [r4, #4]
 800ca7c:	42a3      	cmp	r3, r4
 800ca7e:	bf0c      	ite	eq
 800ca80:	f8c8 2000 	streq.w	r2, [r8]
 800ca84:	605a      	strne	r2, [r3, #4]
 800ca86:	e7eb      	b.n	800ca60 <_malloc_r+0xa8>
 800ca88:	4623      	mov	r3, r4
 800ca8a:	6864      	ldr	r4, [r4, #4]
 800ca8c:	e7ae      	b.n	800c9ec <_malloc_r+0x34>
 800ca8e:	463c      	mov	r4, r7
 800ca90:	687f      	ldr	r7, [r7, #4]
 800ca92:	e7b6      	b.n	800ca02 <_malloc_r+0x4a>
 800ca94:	461a      	mov	r2, r3
 800ca96:	685b      	ldr	r3, [r3, #4]
 800ca98:	42a3      	cmp	r3, r4
 800ca9a:	d1fb      	bne.n	800ca94 <_malloc_r+0xdc>
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	6053      	str	r3, [r2, #4]
 800caa0:	e7de      	b.n	800ca60 <_malloc_r+0xa8>
 800caa2:	230c      	movs	r3, #12
 800caa4:	6033      	str	r3, [r6, #0]
 800caa6:	4630      	mov	r0, r6
 800caa8:	f000 f80c 	bl	800cac4 <__malloc_unlock>
 800caac:	e794      	b.n	800c9d8 <_malloc_r+0x20>
 800caae:	6005      	str	r5, [r0, #0]
 800cab0:	e7d6      	b.n	800ca60 <_malloc_r+0xa8>
 800cab2:	bf00      	nop
 800cab4:	20006c04 	.word	0x20006c04

0800cab8 <__malloc_lock>:
 800cab8:	4801      	ldr	r0, [pc, #4]	@ (800cac0 <__malloc_lock+0x8>)
 800caba:	f7ff bef9 	b.w	800c8b0 <__retarget_lock_acquire_recursive>
 800cabe:	bf00      	nop
 800cac0:	20006bfc 	.word	0x20006bfc

0800cac4 <__malloc_unlock>:
 800cac4:	4801      	ldr	r0, [pc, #4]	@ (800cacc <__malloc_unlock+0x8>)
 800cac6:	f7ff bef4 	b.w	800c8b2 <__retarget_lock_release_recursive>
 800caca:	bf00      	nop
 800cacc:	20006bfc 	.word	0x20006bfc

0800cad0 <__ssputs_r>:
 800cad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cad4:	688e      	ldr	r6, [r1, #8]
 800cad6:	461f      	mov	r7, r3
 800cad8:	42be      	cmp	r6, r7
 800cada:	680b      	ldr	r3, [r1, #0]
 800cadc:	4682      	mov	sl, r0
 800cade:	460c      	mov	r4, r1
 800cae0:	4690      	mov	r8, r2
 800cae2:	d82d      	bhi.n	800cb40 <__ssputs_r+0x70>
 800cae4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cae8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800caec:	d026      	beq.n	800cb3c <__ssputs_r+0x6c>
 800caee:	6965      	ldr	r5, [r4, #20]
 800caf0:	6909      	ldr	r1, [r1, #16]
 800caf2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800caf6:	eba3 0901 	sub.w	r9, r3, r1
 800cafa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cafe:	1c7b      	adds	r3, r7, #1
 800cb00:	444b      	add	r3, r9
 800cb02:	106d      	asrs	r5, r5, #1
 800cb04:	429d      	cmp	r5, r3
 800cb06:	bf38      	it	cc
 800cb08:	461d      	movcc	r5, r3
 800cb0a:	0553      	lsls	r3, r2, #21
 800cb0c:	d527      	bpl.n	800cb5e <__ssputs_r+0x8e>
 800cb0e:	4629      	mov	r1, r5
 800cb10:	f7ff ff52 	bl	800c9b8 <_malloc_r>
 800cb14:	4606      	mov	r6, r0
 800cb16:	b360      	cbz	r0, 800cb72 <__ssputs_r+0xa2>
 800cb18:	6921      	ldr	r1, [r4, #16]
 800cb1a:	464a      	mov	r2, r9
 800cb1c:	f7ff fed2 	bl	800c8c4 <memcpy>
 800cb20:	89a3      	ldrh	r3, [r4, #12]
 800cb22:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cb26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb2a:	81a3      	strh	r3, [r4, #12]
 800cb2c:	6126      	str	r6, [r4, #16]
 800cb2e:	6165      	str	r5, [r4, #20]
 800cb30:	444e      	add	r6, r9
 800cb32:	eba5 0509 	sub.w	r5, r5, r9
 800cb36:	6026      	str	r6, [r4, #0]
 800cb38:	60a5      	str	r5, [r4, #8]
 800cb3a:	463e      	mov	r6, r7
 800cb3c:	42be      	cmp	r6, r7
 800cb3e:	d900      	bls.n	800cb42 <__ssputs_r+0x72>
 800cb40:	463e      	mov	r6, r7
 800cb42:	6820      	ldr	r0, [r4, #0]
 800cb44:	4632      	mov	r2, r6
 800cb46:	4641      	mov	r1, r8
 800cb48:	f000 fe35 	bl	800d7b6 <memmove>
 800cb4c:	68a3      	ldr	r3, [r4, #8]
 800cb4e:	1b9b      	subs	r3, r3, r6
 800cb50:	60a3      	str	r3, [r4, #8]
 800cb52:	6823      	ldr	r3, [r4, #0]
 800cb54:	4433      	add	r3, r6
 800cb56:	6023      	str	r3, [r4, #0]
 800cb58:	2000      	movs	r0, #0
 800cb5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb5e:	462a      	mov	r2, r5
 800cb60:	f000 fe54 	bl	800d80c <_realloc_r>
 800cb64:	4606      	mov	r6, r0
 800cb66:	2800      	cmp	r0, #0
 800cb68:	d1e0      	bne.n	800cb2c <__ssputs_r+0x5c>
 800cb6a:	6921      	ldr	r1, [r4, #16]
 800cb6c:	4650      	mov	r0, sl
 800cb6e:	f7ff feb7 	bl	800c8e0 <_free_r>
 800cb72:	230c      	movs	r3, #12
 800cb74:	f8ca 3000 	str.w	r3, [sl]
 800cb78:	89a3      	ldrh	r3, [r4, #12]
 800cb7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb7e:	81a3      	strh	r3, [r4, #12]
 800cb80:	f04f 30ff 	mov.w	r0, #4294967295
 800cb84:	e7e9      	b.n	800cb5a <__ssputs_r+0x8a>
	...

0800cb88 <_svfiprintf_r>:
 800cb88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb8c:	4698      	mov	r8, r3
 800cb8e:	898b      	ldrh	r3, [r1, #12]
 800cb90:	061b      	lsls	r3, r3, #24
 800cb92:	b09d      	sub	sp, #116	@ 0x74
 800cb94:	4607      	mov	r7, r0
 800cb96:	460d      	mov	r5, r1
 800cb98:	4614      	mov	r4, r2
 800cb9a:	d510      	bpl.n	800cbbe <_svfiprintf_r+0x36>
 800cb9c:	690b      	ldr	r3, [r1, #16]
 800cb9e:	b973      	cbnz	r3, 800cbbe <_svfiprintf_r+0x36>
 800cba0:	2140      	movs	r1, #64	@ 0x40
 800cba2:	f7ff ff09 	bl	800c9b8 <_malloc_r>
 800cba6:	6028      	str	r0, [r5, #0]
 800cba8:	6128      	str	r0, [r5, #16]
 800cbaa:	b930      	cbnz	r0, 800cbba <_svfiprintf_r+0x32>
 800cbac:	230c      	movs	r3, #12
 800cbae:	603b      	str	r3, [r7, #0]
 800cbb0:	f04f 30ff 	mov.w	r0, #4294967295
 800cbb4:	b01d      	add	sp, #116	@ 0x74
 800cbb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbba:	2340      	movs	r3, #64	@ 0x40
 800cbbc:	616b      	str	r3, [r5, #20]
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	9309      	str	r3, [sp, #36]	@ 0x24
 800cbc2:	2320      	movs	r3, #32
 800cbc4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cbc8:	f8cd 800c 	str.w	r8, [sp, #12]
 800cbcc:	2330      	movs	r3, #48	@ 0x30
 800cbce:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800cd6c <_svfiprintf_r+0x1e4>
 800cbd2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cbd6:	f04f 0901 	mov.w	r9, #1
 800cbda:	4623      	mov	r3, r4
 800cbdc:	469a      	mov	sl, r3
 800cbde:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cbe2:	b10a      	cbz	r2, 800cbe8 <_svfiprintf_r+0x60>
 800cbe4:	2a25      	cmp	r2, #37	@ 0x25
 800cbe6:	d1f9      	bne.n	800cbdc <_svfiprintf_r+0x54>
 800cbe8:	ebba 0b04 	subs.w	fp, sl, r4
 800cbec:	d00b      	beq.n	800cc06 <_svfiprintf_r+0x7e>
 800cbee:	465b      	mov	r3, fp
 800cbf0:	4622      	mov	r2, r4
 800cbf2:	4629      	mov	r1, r5
 800cbf4:	4638      	mov	r0, r7
 800cbf6:	f7ff ff6b 	bl	800cad0 <__ssputs_r>
 800cbfa:	3001      	adds	r0, #1
 800cbfc:	f000 80a7 	beq.w	800cd4e <_svfiprintf_r+0x1c6>
 800cc00:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cc02:	445a      	add	r2, fp
 800cc04:	9209      	str	r2, [sp, #36]	@ 0x24
 800cc06:	f89a 3000 	ldrb.w	r3, [sl]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	f000 809f 	beq.w	800cd4e <_svfiprintf_r+0x1c6>
 800cc10:	2300      	movs	r3, #0
 800cc12:	f04f 32ff 	mov.w	r2, #4294967295
 800cc16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cc1a:	f10a 0a01 	add.w	sl, sl, #1
 800cc1e:	9304      	str	r3, [sp, #16]
 800cc20:	9307      	str	r3, [sp, #28]
 800cc22:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cc26:	931a      	str	r3, [sp, #104]	@ 0x68
 800cc28:	4654      	mov	r4, sl
 800cc2a:	2205      	movs	r2, #5
 800cc2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc30:	484e      	ldr	r0, [pc, #312]	@ (800cd6c <_svfiprintf_r+0x1e4>)
 800cc32:	f7f3 faed 	bl	8000210 <memchr>
 800cc36:	9a04      	ldr	r2, [sp, #16]
 800cc38:	b9d8      	cbnz	r0, 800cc72 <_svfiprintf_r+0xea>
 800cc3a:	06d0      	lsls	r0, r2, #27
 800cc3c:	bf44      	itt	mi
 800cc3e:	2320      	movmi	r3, #32
 800cc40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cc44:	0711      	lsls	r1, r2, #28
 800cc46:	bf44      	itt	mi
 800cc48:	232b      	movmi	r3, #43	@ 0x2b
 800cc4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cc4e:	f89a 3000 	ldrb.w	r3, [sl]
 800cc52:	2b2a      	cmp	r3, #42	@ 0x2a
 800cc54:	d015      	beq.n	800cc82 <_svfiprintf_r+0xfa>
 800cc56:	9a07      	ldr	r2, [sp, #28]
 800cc58:	4654      	mov	r4, sl
 800cc5a:	2000      	movs	r0, #0
 800cc5c:	f04f 0c0a 	mov.w	ip, #10
 800cc60:	4621      	mov	r1, r4
 800cc62:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cc66:	3b30      	subs	r3, #48	@ 0x30
 800cc68:	2b09      	cmp	r3, #9
 800cc6a:	d94b      	bls.n	800cd04 <_svfiprintf_r+0x17c>
 800cc6c:	b1b0      	cbz	r0, 800cc9c <_svfiprintf_r+0x114>
 800cc6e:	9207      	str	r2, [sp, #28]
 800cc70:	e014      	b.n	800cc9c <_svfiprintf_r+0x114>
 800cc72:	eba0 0308 	sub.w	r3, r0, r8
 800cc76:	fa09 f303 	lsl.w	r3, r9, r3
 800cc7a:	4313      	orrs	r3, r2
 800cc7c:	9304      	str	r3, [sp, #16]
 800cc7e:	46a2      	mov	sl, r4
 800cc80:	e7d2      	b.n	800cc28 <_svfiprintf_r+0xa0>
 800cc82:	9b03      	ldr	r3, [sp, #12]
 800cc84:	1d19      	adds	r1, r3, #4
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	9103      	str	r1, [sp, #12]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	bfbb      	ittet	lt
 800cc8e:	425b      	neglt	r3, r3
 800cc90:	f042 0202 	orrlt.w	r2, r2, #2
 800cc94:	9307      	strge	r3, [sp, #28]
 800cc96:	9307      	strlt	r3, [sp, #28]
 800cc98:	bfb8      	it	lt
 800cc9a:	9204      	strlt	r2, [sp, #16]
 800cc9c:	7823      	ldrb	r3, [r4, #0]
 800cc9e:	2b2e      	cmp	r3, #46	@ 0x2e
 800cca0:	d10a      	bne.n	800ccb8 <_svfiprintf_r+0x130>
 800cca2:	7863      	ldrb	r3, [r4, #1]
 800cca4:	2b2a      	cmp	r3, #42	@ 0x2a
 800cca6:	d132      	bne.n	800cd0e <_svfiprintf_r+0x186>
 800cca8:	9b03      	ldr	r3, [sp, #12]
 800ccaa:	1d1a      	adds	r2, r3, #4
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	9203      	str	r2, [sp, #12]
 800ccb0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ccb4:	3402      	adds	r4, #2
 800ccb6:	9305      	str	r3, [sp, #20]
 800ccb8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800cd7c <_svfiprintf_r+0x1f4>
 800ccbc:	7821      	ldrb	r1, [r4, #0]
 800ccbe:	2203      	movs	r2, #3
 800ccc0:	4650      	mov	r0, sl
 800ccc2:	f7f3 faa5 	bl	8000210 <memchr>
 800ccc6:	b138      	cbz	r0, 800ccd8 <_svfiprintf_r+0x150>
 800ccc8:	9b04      	ldr	r3, [sp, #16]
 800ccca:	eba0 000a 	sub.w	r0, r0, sl
 800ccce:	2240      	movs	r2, #64	@ 0x40
 800ccd0:	4082      	lsls	r2, r0
 800ccd2:	4313      	orrs	r3, r2
 800ccd4:	3401      	adds	r4, #1
 800ccd6:	9304      	str	r3, [sp, #16]
 800ccd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccdc:	4824      	ldr	r0, [pc, #144]	@ (800cd70 <_svfiprintf_r+0x1e8>)
 800ccde:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cce2:	2206      	movs	r2, #6
 800cce4:	f7f3 fa94 	bl	8000210 <memchr>
 800cce8:	2800      	cmp	r0, #0
 800ccea:	d036      	beq.n	800cd5a <_svfiprintf_r+0x1d2>
 800ccec:	4b21      	ldr	r3, [pc, #132]	@ (800cd74 <_svfiprintf_r+0x1ec>)
 800ccee:	bb1b      	cbnz	r3, 800cd38 <_svfiprintf_r+0x1b0>
 800ccf0:	9b03      	ldr	r3, [sp, #12]
 800ccf2:	3307      	adds	r3, #7
 800ccf4:	f023 0307 	bic.w	r3, r3, #7
 800ccf8:	3308      	adds	r3, #8
 800ccfa:	9303      	str	r3, [sp, #12]
 800ccfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ccfe:	4433      	add	r3, r6
 800cd00:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd02:	e76a      	b.n	800cbda <_svfiprintf_r+0x52>
 800cd04:	fb0c 3202 	mla	r2, ip, r2, r3
 800cd08:	460c      	mov	r4, r1
 800cd0a:	2001      	movs	r0, #1
 800cd0c:	e7a8      	b.n	800cc60 <_svfiprintf_r+0xd8>
 800cd0e:	2300      	movs	r3, #0
 800cd10:	3401      	adds	r4, #1
 800cd12:	9305      	str	r3, [sp, #20]
 800cd14:	4619      	mov	r1, r3
 800cd16:	f04f 0c0a 	mov.w	ip, #10
 800cd1a:	4620      	mov	r0, r4
 800cd1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cd20:	3a30      	subs	r2, #48	@ 0x30
 800cd22:	2a09      	cmp	r2, #9
 800cd24:	d903      	bls.n	800cd2e <_svfiprintf_r+0x1a6>
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d0c6      	beq.n	800ccb8 <_svfiprintf_r+0x130>
 800cd2a:	9105      	str	r1, [sp, #20]
 800cd2c:	e7c4      	b.n	800ccb8 <_svfiprintf_r+0x130>
 800cd2e:	fb0c 2101 	mla	r1, ip, r1, r2
 800cd32:	4604      	mov	r4, r0
 800cd34:	2301      	movs	r3, #1
 800cd36:	e7f0      	b.n	800cd1a <_svfiprintf_r+0x192>
 800cd38:	ab03      	add	r3, sp, #12
 800cd3a:	9300      	str	r3, [sp, #0]
 800cd3c:	462a      	mov	r2, r5
 800cd3e:	4b0e      	ldr	r3, [pc, #56]	@ (800cd78 <_svfiprintf_r+0x1f0>)
 800cd40:	a904      	add	r1, sp, #16
 800cd42:	4638      	mov	r0, r7
 800cd44:	f3af 8000 	nop.w
 800cd48:	1c42      	adds	r2, r0, #1
 800cd4a:	4606      	mov	r6, r0
 800cd4c:	d1d6      	bne.n	800ccfc <_svfiprintf_r+0x174>
 800cd4e:	89ab      	ldrh	r3, [r5, #12]
 800cd50:	065b      	lsls	r3, r3, #25
 800cd52:	f53f af2d 	bmi.w	800cbb0 <_svfiprintf_r+0x28>
 800cd56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cd58:	e72c      	b.n	800cbb4 <_svfiprintf_r+0x2c>
 800cd5a:	ab03      	add	r3, sp, #12
 800cd5c:	9300      	str	r3, [sp, #0]
 800cd5e:	462a      	mov	r2, r5
 800cd60:	4b05      	ldr	r3, [pc, #20]	@ (800cd78 <_svfiprintf_r+0x1f0>)
 800cd62:	a904      	add	r1, sp, #16
 800cd64:	4638      	mov	r0, r7
 800cd66:	f000 fa45 	bl	800d1f4 <_printf_i>
 800cd6a:	e7ed      	b.n	800cd48 <_svfiprintf_r+0x1c0>
 800cd6c:	0800e3f0 	.word	0x0800e3f0
 800cd70:	0800e3fa 	.word	0x0800e3fa
 800cd74:	00000000 	.word	0x00000000
 800cd78:	0800cad1 	.word	0x0800cad1
 800cd7c:	0800e3f6 	.word	0x0800e3f6

0800cd80 <_sungetc_r>:
 800cd80:	b538      	push	{r3, r4, r5, lr}
 800cd82:	1c4b      	adds	r3, r1, #1
 800cd84:	4614      	mov	r4, r2
 800cd86:	d103      	bne.n	800cd90 <_sungetc_r+0x10>
 800cd88:	f04f 35ff 	mov.w	r5, #4294967295
 800cd8c:	4628      	mov	r0, r5
 800cd8e:	bd38      	pop	{r3, r4, r5, pc}
 800cd90:	8993      	ldrh	r3, [r2, #12]
 800cd92:	f023 0320 	bic.w	r3, r3, #32
 800cd96:	8193      	strh	r3, [r2, #12]
 800cd98:	6853      	ldr	r3, [r2, #4]
 800cd9a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800cd9c:	b2cd      	uxtb	r5, r1
 800cd9e:	b18a      	cbz	r2, 800cdc4 <_sungetc_r+0x44>
 800cda0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800cda2:	429a      	cmp	r2, r3
 800cda4:	dd08      	ble.n	800cdb8 <_sungetc_r+0x38>
 800cda6:	6823      	ldr	r3, [r4, #0]
 800cda8:	1e5a      	subs	r2, r3, #1
 800cdaa:	6022      	str	r2, [r4, #0]
 800cdac:	f803 5c01 	strb.w	r5, [r3, #-1]
 800cdb0:	6863      	ldr	r3, [r4, #4]
 800cdb2:	3301      	adds	r3, #1
 800cdb4:	6063      	str	r3, [r4, #4]
 800cdb6:	e7e9      	b.n	800cd8c <_sungetc_r+0xc>
 800cdb8:	4621      	mov	r1, r4
 800cdba:	f000 fcc2 	bl	800d742 <__submore>
 800cdbe:	2800      	cmp	r0, #0
 800cdc0:	d0f1      	beq.n	800cda6 <_sungetc_r+0x26>
 800cdc2:	e7e1      	b.n	800cd88 <_sungetc_r+0x8>
 800cdc4:	6921      	ldr	r1, [r4, #16]
 800cdc6:	6822      	ldr	r2, [r4, #0]
 800cdc8:	b141      	cbz	r1, 800cddc <_sungetc_r+0x5c>
 800cdca:	4291      	cmp	r1, r2
 800cdcc:	d206      	bcs.n	800cddc <_sungetc_r+0x5c>
 800cdce:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800cdd2:	42a9      	cmp	r1, r5
 800cdd4:	d102      	bne.n	800cddc <_sungetc_r+0x5c>
 800cdd6:	3a01      	subs	r2, #1
 800cdd8:	6022      	str	r2, [r4, #0]
 800cdda:	e7ea      	b.n	800cdb2 <_sungetc_r+0x32>
 800cddc:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800cde0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cde4:	6363      	str	r3, [r4, #52]	@ 0x34
 800cde6:	2303      	movs	r3, #3
 800cde8:	63a3      	str	r3, [r4, #56]	@ 0x38
 800cdea:	4623      	mov	r3, r4
 800cdec:	f803 5f46 	strb.w	r5, [r3, #70]!
 800cdf0:	6023      	str	r3, [r4, #0]
 800cdf2:	2301      	movs	r3, #1
 800cdf4:	e7de      	b.n	800cdb4 <_sungetc_r+0x34>

0800cdf6 <__ssrefill_r>:
 800cdf6:	b510      	push	{r4, lr}
 800cdf8:	460c      	mov	r4, r1
 800cdfa:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800cdfc:	b169      	cbz	r1, 800ce1a <__ssrefill_r+0x24>
 800cdfe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ce02:	4299      	cmp	r1, r3
 800ce04:	d001      	beq.n	800ce0a <__ssrefill_r+0x14>
 800ce06:	f7ff fd6b 	bl	800c8e0 <_free_r>
 800ce0a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ce0c:	6063      	str	r3, [r4, #4]
 800ce0e:	2000      	movs	r0, #0
 800ce10:	6360      	str	r0, [r4, #52]	@ 0x34
 800ce12:	b113      	cbz	r3, 800ce1a <__ssrefill_r+0x24>
 800ce14:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800ce16:	6023      	str	r3, [r4, #0]
 800ce18:	bd10      	pop	{r4, pc}
 800ce1a:	6923      	ldr	r3, [r4, #16]
 800ce1c:	6023      	str	r3, [r4, #0]
 800ce1e:	2300      	movs	r3, #0
 800ce20:	6063      	str	r3, [r4, #4]
 800ce22:	89a3      	ldrh	r3, [r4, #12]
 800ce24:	f043 0320 	orr.w	r3, r3, #32
 800ce28:	81a3      	strh	r3, [r4, #12]
 800ce2a:	f04f 30ff 	mov.w	r0, #4294967295
 800ce2e:	e7f3      	b.n	800ce18 <__ssrefill_r+0x22>

0800ce30 <__ssvfiscanf_r>:
 800ce30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce34:	460c      	mov	r4, r1
 800ce36:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800ce3a:	2100      	movs	r1, #0
 800ce3c:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800ce40:	49a5      	ldr	r1, [pc, #660]	@ (800d0d8 <__ssvfiscanf_r+0x2a8>)
 800ce42:	91a0      	str	r1, [sp, #640]	@ 0x280
 800ce44:	f10d 0804 	add.w	r8, sp, #4
 800ce48:	49a4      	ldr	r1, [pc, #656]	@ (800d0dc <__ssvfiscanf_r+0x2ac>)
 800ce4a:	4fa5      	ldr	r7, [pc, #660]	@ (800d0e0 <__ssvfiscanf_r+0x2b0>)
 800ce4c:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800ce50:	4606      	mov	r6, r0
 800ce52:	91a1      	str	r1, [sp, #644]	@ 0x284
 800ce54:	9300      	str	r3, [sp, #0]
 800ce56:	7813      	ldrb	r3, [r2, #0]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	f000 8158 	beq.w	800d10e <__ssvfiscanf_r+0x2de>
 800ce5e:	5cf9      	ldrb	r1, [r7, r3]
 800ce60:	f011 0108 	ands.w	r1, r1, #8
 800ce64:	f102 0501 	add.w	r5, r2, #1
 800ce68:	d019      	beq.n	800ce9e <__ssvfiscanf_r+0x6e>
 800ce6a:	6863      	ldr	r3, [r4, #4]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	dd0f      	ble.n	800ce90 <__ssvfiscanf_r+0x60>
 800ce70:	6823      	ldr	r3, [r4, #0]
 800ce72:	781a      	ldrb	r2, [r3, #0]
 800ce74:	5cba      	ldrb	r2, [r7, r2]
 800ce76:	0712      	lsls	r2, r2, #28
 800ce78:	d401      	bmi.n	800ce7e <__ssvfiscanf_r+0x4e>
 800ce7a:	462a      	mov	r2, r5
 800ce7c:	e7eb      	b.n	800ce56 <__ssvfiscanf_r+0x26>
 800ce7e:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800ce80:	3201      	adds	r2, #1
 800ce82:	9245      	str	r2, [sp, #276]	@ 0x114
 800ce84:	6862      	ldr	r2, [r4, #4]
 800ce86:	3301      	adds	r3, #1
 800ce88:	3a01      	subs	r2, #1
 800ce8a:	6062      	str	r2, [r4, #4]
 800ce8c:	6023      	str	r3, [r4, #0]
 800ce8e:	e7ec      	b.n	800ce6a <__ssvfiscanf_r+0x3a>
 800ce90:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800ce92:	4621      	mov	r1, r4
 800ce94:	4630      	mov	r0, r6
 800ce96:	4798      	blx	r3
 800ce98:	2800      	cmp	r0, #0
 800ce9a:	d0e9      	beq.n	800ce70 <__ssvfiscanf_r+0x40>
 800ce9c:	e7ed      	b.n	800ce7a <__ssvfiscanf_r+0x4a>
 800ce9e:	2b25      	cmp	r3, #37	@ 0x25
 800cea0:	d012      	beq.n	800cec8 <__ssvfiscanf_r+0x98>
 800cea2:	4699      	mov	r9, r3
 800cea4:	6863      	ldr	r3, [r4, #4]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	f340 8093 	ble.w	800cfd2 <__ssvfiscanf_r+0x1a2>
 800ceac:	6822      	ldr	r2, [r4, #0]
 800ceae:	7813      	ldrb	r3, [r2, #0]
 800ceb0:	454b      	cmp	r3, r9
 800ceb2:	f040 812c 	bne.w	800d10e <__ssvfiscanf_r+0x2de>
 800ceb6:	6863      	ldr	r3, [r4, #4]
 800ceb8:	3b01      	subs	r3, #1
 800ceba:	6063      	str	r3, [r4, #4]
 800cebc:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800cebe:	3201      	adds	r2, #1
 800cec0:	3301      	adds	r3, #1
 800cec2:	6022      	str	r2, [r4, #0]
 800cec4:	9345      	str	r3, [sp, #276]	@ 0x114
 800cec6:	e7d8      	b.n	800ce7a <__ssvfiscanf_r+0x4a>
 800cec8:	9141      	str	r1, [sp, #260]	@ 0x104
 800ceca:	9143      	str	r1, [sp, #268]	@ 0x10c
 800cecc:	7853      	ldrb	r3, [r2, #1]
 800cece:	2b2a      	cmp	r3, #42	@ 0x2a
 800ced0:	bf02      	ittt	eq
 800ced2:	2310      	moveq	r3, #16
 800ced4:	1c95      	addeq	r5, r2, #2
 800ced6:	9341      	streq	r3, [sp, #260]	@ 0x104
 800ced8:	220a      	movs	r2, #10
 800ceda:	46a9      	mov	r9, r5
 800cedc:	f819 1b01 	ldrb.w	r1, [r9], #1
 800cee0:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800cee4:	2b09      	cmp	r3, #9
 800cee6:	d91e      	bls.n	800cf26 <__ssvfiscanf_r+0xf6>
 800cee8:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800d0e4 <__ssvfiscanf_r+0x2b4>
 800ceec:	2203      	movs	r2, #3
 800ceee:	4650      	mov	r0, sl
 800cef0:	f7f3 f98e 	bl	8000210 <memchr>
 800cef4:	b138      	cbz	r0, 800cf06 <__ssvfiscanf_r+0xd6>
 800cef6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800cef8:	eba0 000a 	sub.w	r0, r0, sl
 800cefc:	2301      	movs	r3, #1
 800cefe:	4083      	lsls	r3, r0
 800cf00:	4313      	orrs	r3, r2
 800cf02:	9341      	str	r3, [sp, #260]	@ 0x104
 800cf04:	464d      	mov	r5, r9
 800cf06:	f815 3b01 	ldrb.w	r3, [r5], #1
 800cf0a:	2b78      	cmp	r3, #120	@ 0x78
 800cf0c:	d806      	bhi.n	800cf1c <__ssvfiscanf_r+0xec>
 800cf0e:	2b57      	cmp	r3, #87	@ 0x57
 800cf10:	d810      	bhi.n	800cf34 <__ssvfiscanf_r+0x104>
 800cf12:	2b25      	cmp	r3, #37	@ 0x25
 800cf14:	d0c5      	beq.n	800cea2 <__ssvfiscanf_r+0x72>
 800cf16:	d857      	bhi.n	800cfc8 <__ssvfiscanf_r+0x198>
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d065      	beq.n	800cfe8 <__ssvfiscanf_r+0x1b8>
 800cf1c:	2303      	movs	r3, #3
 800cf1e:	9347      	str	r3, [sp, #284]	@ 0x11c
 800cf20:	230a      	movs	r3, #10
 800cf22:	9342      	str	r3, [sp, #264]	@ 0x108
 800cf24:	e078      	b.n	800d018 <__ssvfiscanf_r+0x1e8>
 800cf26:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800cf28:	fb02 1103 	mla	r1, r2, r3, r1
 800cf2c:	3930      	subs	r1, #48	@ 0x30
 800cf2e:	9143      	str	r1, [sp, #268]	@ 0x10c
 800cf30:	464d      	mov	r5, r9
 800cf32:	e7d2      	b.n	800ceda <__ssvfiscanf_r+0xaa>
 800cf34:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800cf38:	2a20      	cmp	r2, #32
 800cf3a:	d8ef      	bhi.n	800cf1c <__ssvfiscanf_r+0xec>
 800cf3c:	a101      	add	r1, pc, #4	@ (adr r1, 800cf44 <__ssvfiscanf_r+0x114>)
 800cf3e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800cf42:	bf00      	nop
 800cf44:	0800cff7 	.word	0x0800cff7
 800cf48:	0800cf1d 	.word	0x0800cf1d
 800cf4c:	0800cf1d 	.word	0x0800cf1d
 800cf50:	0800d051 	.word	0x0800d051
 800cf54:	0800cf1d 	.word	0x0800cf1d
 800cf58:	0800cf1d 	.word	0x0800cf1d
 800cf5c:	0800cf1d 	.word	0x0800cf1d
 800cf60:	0800cf1d 	.word	0x0800cf1d
 800cf64:	0800cf1d 	.word	0x0800cf1d
 800cf68:	0800cf1d 	.word	0x0800cf1d
 800cf6c:	0800cf1d 	.word	0x0800cf1d
 800cf70:	0800d067 	.word	0x0800d067
 800cf74:	0800d04d 	.word	0x0800d04d
 800cf78:	0800cfcf 	.word	0x0800cfcf
 800cf7c:	0800cfcf 	.word	0x0800cfcf
 800cf80:	0800cfcf 	.word	0x0800cfcf
 800cf84:	0800cf1d 	.word	0x0800cf1d
 800cf88:	0800d009 	.word	0x0800d009
 800cf8c:	0800cf1d 	.word	0x0800cf1d
 800cf90:	0800cf1d 	.word	0x0800cf1d
 800cf94:	0800cf1d 	.word	0x0800cf1d
 800cf98:	0800cf1d 	.word	0x0800cf1d
 800cf9c:	0800d077 	.word	0x0800d077
 800cfa0:	0800d011 	.word	0x0800d011
 800cfa4:	0800cfef 	.word	0x0800cfef
 800cfa8:	0800cf1d 	.word	0x0800cf1d
 800cfac:	0800cf1d 	.word	0x0800cf1d
 800cfb0:	0800d073 	.word	0x0800d073
 800cfb4:	0800cf1d 	.word	0x0800cf1d
 800cfb8:	0800d04d 	.word	0x0800d04d
 800cfbc:	0800cf1d 	.word	0x0800cf1d
 800cfc0:	0800cf1d 	.word	0x0800cf1d
 800cfc4:	0800cff7 	.word	0x0800cff7
 800cfc8:	3b45      	subs	r3, #69	@ 0x45
 800cfca:	2b02      	cmp	r3, #2
 800cfcc:	d8a6      	bhi.n	800cf1c <__ssvfiscanf_r+0xec>
 800cfce:	2305      	movs	r3, #5
 800cfd0:	e021      	b.n	800d016 <__ssvfiscanf_r+0x1e6>
 800cfd2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800cfd4:	4621      	mov	r1, r4
 800cfd6:	4630      	mov	r0, r6
 800cfd8:	4798      	blx	r3
 800cfda:	2800      	cmp	r0, #0
 800cfdc:	f43f af66 	beq.w	800ceac <__ssvfiscanf_r+0x7c>
 800cfe0:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800cfe2:	2800      	cmp	r0, #0
 800cfe4:	f040 808b 	bne.w	800d0fe <__ssvfiscanf_r+0x2ce>
 800cfe8:	f04f 30ff 	mov.w	r0, #4294967295
 800cfec:	e08b      	b.n	800d106 <__ssvfiscanf_r+0x2d6>
 800cfee:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800cff0:	f042 0220 	orr.w	r2, r2, #32
 800cff4:	9241      	str	r2, [sp, #260]	@ 0x104
 800cff6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800cff8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cffc:	9241      	str	r2, [sp, #260]	@ 0x104
 800cffe:	2210      	movs	r2, #16
 800d000:	2b6e      	cmp	r3, #110	@ 0x6e
 800d002:	9242      	str	r2, [sp, #264]	@ 0x108
 800d004:	d902      	bls.n	800d00c <__ssvfiscanf_r+0x1dc>
 800d006:	e005      	b.n	800d014 <__ssvfiscanf_r+0x1e4>
 800d008:	2300      	movs	r3, #0
 800d00a:	9342      	str	r3, [sp, #264]	@ 0x108
 800d00c:	2303      	movs	r3, #3
 800d00e:	e002      	b.n	800d016 <__ssvfiscanf_r+0x1e6>
 800d010:	2308      	movs	r3, #8
 800d012:	9342      	str	r3, [sp, #264]	@ 0x108
 800d014:	2304      	movs	r3, #4
 800d016:	9347      	str	r3, [sp, #284]	@ 0x11c
 800d018:	6863      	ldr	r3, [r4, #4]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	dd39      	ble.n	800d092 <__ssvfiscanf_r+0x262>
 800d01e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800d020:	0659      	lsls	r1, r3, #25
 800d022:	d404      	bmi.n	800d02e <__ssvfiscanf_r+0x1fe>
 800d024:	6823      	ldr	r3, [r4, #0]
 800d026:	781a      	ldrb	r2, [r3, #0]
 800d028:	5cba      	ldrb	r2, [r7, r2]
 800d02a:	0712      	lsls	r2, r2, #28
 800d02c:	d438      	bmi.n	800d0a0 <__ssvfiscanf_r+0x270>
 800d02e:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800d030:	2b02      	cmp	r3, #2
 800d032:	dc47      	bgt.n	800d0c4 <__ssvfiscanf_r+0x294>
 800d034:	466b      	mov	r3, sp
 800d036:	4622      	mov	r2, r4
 800d038:	a941      	add	r1, sp, #260	@ 0x104
 800d03a:	4630      	mov	r0, r6
 800d03c:	f000 f9fa 	bl	800d434 <_scanf_chars>
 800d040:	2801      	cmp	r0, #1
 800d042:	d064      	beq.n	800d10e <__ssvfiscanf_r+0x2de>
 800d044:	2802      	cmp	r0, #2
 800d046:	f47f af18 	bne.w	800ce7a <__ssvfiscanf_r+0x4a>
 800d04a:	e7c9      	b.n	800cfe0 <__ssvfiscanf_r+0x1b0>
 800d04c:	220a      	movs	r2, #10
 800d04e:	e7d7      	b.n	800d000 <__ssvfiscanf_r+0x1d0>
 800d050:	4629      	mov	r1, r5
 800d052:	4640      	mov	r0, r8
 800d054:	f000 fb3c 	bl	800d6d0 <__sccl>
 800d058:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800d05a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d05e:	9341      	str	r3, [sp, #260]	@ 0x104
 800d060:	4605      	mov	r5, r0
 800d062:	2301      	movs	r3, #1
 800d064:	e7d7      	b.n	800d016 <__ssvfiscanf_r+0x1e6>
 800d066:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800d068:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d06c:	9341      	str	r3, [sp, #260]	@ 0x104
 800d06e:	2300      	movs	r3, #0
 800d070:	e7d1      	b.n	800d016 <__ssvfiscanf_r+0x1e6>
 800d072:	2302      	movs	r3, #2
 800d074:	e7cf      	b.n	800d016 <__ssvfiscanf_r+0x1e6>
 800d076:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800d078:	06c3      	lsls	r3, r0, #27
 800d07a:	f53f aefe 	bmi.w	800ce7a <__ssvfiscanf_r+0x4a>
 800d07e:	9b00      	ldr	r3, [sp, #0]
 800d080:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800d082:	1d19      	adds	r1, r3, #4
 800d084:	9100      	str	r1, [sp, #0]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	07c0      	lsls	r0, r0, #31
 800d08a:	bf4c      	ite	mi
 800d08c:	801a      	strhmi	r2, [r3, #0]
 800d08e:	601a      	strpl	r2, [r3, #0]
 800d090:	e6f3      	b.n	800ce7a <__ssvfiscanf_r+0x4a>
 800d092:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800d094:	4621      	mov	r1, r4
 800d096:	4630      	mov	r0, r6
 800d098:	4798      	blx	r3
 800d09a:	2800      	cmp	r0, #0
 800d09c:	d0bf      	beq.n	800d01e <__ssvfiscanf_r+0x1ee>
 800d09e:	e79f      	b.n	800cfe0 <__ssvfiscanf_r+0x1b0>
 800d0a0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800d0a2:	3201      	adds	r2, #1
 800d0a4:	9245      	str	r2, [sp, #276]	@ 0x114
 800d0a6:	6862      	ldr	r2, [r4, #4]
 800d0a8:	3a01      	subs	r2, #1
 800d0aa:	2a00      	cmp	r2, #0
 800d0ac:	6062      	str	r2, [r4, #4]
 800d0ae:	dd02      	ble.n	800d0b6 <__ssvfiscanf_r+0x286>
 800d0b0:	3301      	adds	r3, #1
 800d0b2:	6023      	str	r3, [r4, #0]
 800d0b4:	e7b6      	b.n	800d024 <__ssvfiscanf_r+0x1f4>
 800d0b6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800d0b8:	4621      	mov	r1, r4
 800d0ba:	4630      	mov	r0, r6
 800d0bc:	4798      	blx	r3
 800d0be:	2800      	cmp	r0, #0
 800d0c0:	d0b0      	beq.n	800d024 <__ssvfiscanf_r+0x1f4>
 800d0c2:	e78d      	b.n	800cfe0 <__ssvfiscanf_r+0x1b0>
 800d0c4:	2b04      	cmp	r3, #4
 800d0c6:	dc0f      	bgt.n	800d0e8 <__ssvfiscanf_r+0x2b8>
 800d0c8:	466b      	mov	r3, sp
 800d0ca:	4622      	mov	r2, r4
 800d0cc:	a941      	add	r1, sp, #260	@ 0x104
 800d0ce:	4630      	mov	r0, r6
 800d0d0:	f000 fa0a 	bl	800d4e8 <_scanf_i>
 800d0d4:	e7b4      	b.n	800d040 <__ssvfiscanf_r+0x210>
 800d0d6:	bf00      	nop
 800d0d8:	0800cd81 	.word	0x0800cd81
 800d0dc:	0800cdf7 	.word	0x0800cdf7
 800d0e0:	0800e43f 	.word	0x0800e43f
 800d0e4:	0800e3f6 	.word	0x0800e3f6
 800d0e8:	4b0a      	ldr	r3, [pc, #40]	@ (800d114 <__ssvfiscanf_r+0x2e4>)
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	f43f aec5 	beq.w	800ce7a <__ssvfiscanf_r+0x4a>
 800d0f0:	466b      	mov	r3, sp
 800d0f2:	4622      	mov	r2, r4
 800d0f4:	a941      	add	r1, sp, #260	@ 0x104
 800d0f6:	4630      	mov	r0, r6
 800d0f8:	f3af 8000 	nop.w
 800d0fc:	e7a0      	b.n	800d040 <__ssvfiscanf_r+0x210>
 800d0fe:	89a3      	ldrh	r3, [r4, #12]
 800d100:	065b      	lsls	r3, r3, #25
 800d102:	f53f af71 	bmi.w	800cfe8 <__ssvfiscanf_r+0x1b8>
 800d106:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800d10a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d10e:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800d110:	e7f9      	b.n	800d106 <__ssvfiscanf_r+0x2d6>
 800d112:	bf00      	nop
 800d114:	00000000 	.word	0x00000000

0800d118 <_printf_common>:
 800d118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d11c:	4616      	mov	r6, r2
 800d11e:	4698      	mov	r8, r3
 800d120:	688a      	ldr	r2, [r1, #8]
 800d122:	690b      	ldr	r3, [r1, #16]
 800d124:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d128:	4293      	cmp	r3, r2
 800d12a:	bfb8      	it	lt
 800d12c:	4613      	movlt	r3, r2
 800d12e:	6033      	str	r3, [r6, #0]
 800d130:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d134:	4607      	mov	r7, r0
 800d136:	460c      	mov	r4, r1
 800d138:	b10a      	cbz	r2, 800d13e <_printf_common+0x26>
 800d13a:	3301      	adds	r3, #1
 800d13c:	6033      	str	r3, [r6, #0]
 800d13e:	6823      	ldr	r3, [r4, #0]
 800d140:	0699      	lsls	r1, r3, #26
 800d142:	bf42      	ittt	mi
 800d144:	6833      	ldrmi	r3, [r6, #0]
 800d146:	3302      	addmi	r3, #2
 800d148:	6033      	strmi	r3, [r6, #0]
 800d14a:	6825      	ldr	r5, [r4, #0]
 800d14c:	f015 0506 	ands.w	r5, r5, #6
 800d150:	d106      	bne.n	800d160 <_printf_common+0x48>
 800d152:	f104 0a19 	add.w	sl, r4, #25
 800d156:	68e3      	ldr	r3, [r4, #12]
 800d158:	6832      	ldr	r2, [r6, #0]
 800d15a:	1a9b      	subs	r3, r3, r2
 800d15c:	42ab      	cmp	r3, r5
 800d15e:	dc26      	bgt.n	800d1ae <_printf_common+0x96>
 800d160:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d164:	6822      	ldr	r2, [r4, #0]
 800d166:	3b00      	subs	r3, #0
 800d168:	bf18      	it	ne
 800d16a:	2301      	movne	r3, #1
 800d16c:	0692      	lsls	r2, r2, #26
 800d16e:	d42b      	bmi.n	800d1c8 <_printf_common+0xb0>
 800d170:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d174:	4641      	mov	r1, r8
 800d176:	4638      	mov	r0, r7
 800d178:	47c8      	blx	r9
 800d17a:	3001      	adds	r0, #1
 800d17c:	d01e      	beq.n	800d1bc <_printf_common+0xa4>
 800d17e:	6823      	ldr	r3, [r4, #0]
 800d180:	6922      	ldr	r2, [r4, #16]
 800d182:	f003 0306 	and.w	r3, r3, #6
 800d186:	2b04      	cmp	r3, #4
 800d188:	bf02      	ittt	eq
 800d18a:	68e5      	ldreq	r5, [r4, #12]
 800d18c:	6833      	ldreq	r3, [r6, #0]
 800d18e:	1aed      	subeq	r5, r5, r3
 800d190:	68a3      	ldr	r3, [r4, #8]
 800d192:	bf0c      	ite	eq
 800d194:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d198:	2500      	movne	r5, #0
 800d19a:	4293      	cmp	r3, r2
 800d19c:	bfc4      	itt	gt
 800d19e:	1a9b      	subgt	r3, r3, r2
 800d1a0:	18ed      	addgt	r5, r5, r3
 800d1a2:	2600      	movs	r6, #0
 800d1a4:	341a      	adds	r4, #26
 800d1a6:	42b5      	cmp	r5, r6
 800d1a8:	d11a      	bne.n	800d1e0 <_printf_common+0xc8>
 800d1aa:	2000      	movs	r0, #0
 800d1ac:	e008      	b.n	800d1c0 <_printf_common+0xa8>
 800d1ae:	2301      	movs	r3, #1
 800d1b0:	4652      	mov	r2, sl
 800d1b2:	4641      	mov	r1, r8
 800d1b4:	4638      	mov	r0, r7
 800d1b6:	47c8      	blx	r9
 800d1b8:	3001      	adds	r0, #1
 800d1ba:	d103      	bne.n	800d1c4 <_printf_common+0xac>
 800d1bc:	f04f 30ff 	mov.w	r0, #4294967295
 800d1c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1c4:	3501      	adds	r5, #1
 800d1c6:	e7c6      	b.n	800d156 <_printf_common+0x3e>
 800d1c8:	18e1      	adds	r1, r4, r3
 800d1ca:	1c5a      	adds	r2, r3, #1
 800d1cc:	2030      	movs	r0, #48	@ 0x30
 800d1ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d1d2:	4422      	add	r2, r4
 800d1d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d1d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d1dc:	3302      	adds	r3, #2
 800d1de:	e7c7      	b.n	800d170 <_printf_common+0x58>
 800d1e0:	2301      	movs	r3, #1
 800d1e2:	4622      	mov	r2, r4
 800d1e4:	4641      	mov	r1, r8
 800d1e6:	4638      	mov	r0, r7
 800d1e8:	47c8      	blx	r9
 800d1ea:	3001      	adds	r0, #1
 800d1ec:	d0e6      	beq.n	800d1bc <_printf_common+0xa4>
 800d1ee:	3601      	adds	r6, #1
 800d1f0:	e7d9      	b.n	800d1a6 <_printf_common+0x8e>
	...

0800d1f4 <_printf_i>:
 800d1f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d1f8:	7e0f      	ldrb	r7, [r1, #24]
 800d1fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d1fc:	2f78      	cmp	r7, #120	@ 0x78
 800d1fe:	4691      	mov	r9, r2
 800d200:	4680      	mov	r8, r0
 800d202:	460c      	mov	r4, r1
 800d204:	469a      	mov	sl, r3
 800d206:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d20a:	d807      	bhi.n	800d21c <_printf_i+0x28>
 800d20c:	2f62      	cmp	r7, #98	@ 0x62
 800d20e:	d80a      	bhi.n	800d226 <_printf_i+0x32>
 800d210:	2f00      	cmp	r7, #0
 800d212:	f000 80d2 	beq.w	800d3ba <_printf_i+0x1c6>
 800d216:	2f58      	cmp	r7, #88	@ 0x58
 800d218:	f000 80b9 	beq.w	800d38e <_printf_i+0x19a>
 800d21c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d220:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d224:	e03a      	b.n	800d29c <_printf_i+0xa8>
 800d226:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d22a:	2b15      	cmp	r3, #21
 800d22c:	d8f6      	bhi.n	800d21c <_printf_i+0x28>
 800d22e:	a101      	add	r1, pc, #4	@ (adr r1, 800d234 <_printf_i+0x40>)
 800d230:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d234:	0800d28d 	.word	0x0800d28d
 800d238:	0800d2a1 	.word	0x0800d2a1
 800d23c:	0800d21d 	.word	0x0800d21d
 800d240:	0800d21d 	.word	0x0800d21d
 800d244:	0800d21d 	.word	0x0800d21d
 800d248:	0800d21d 	.word	0x0800d21d
 800d24c:	0800d2a1 	.word	0x0800d2a1
 800d250:	0800d21d 	.word	0x0800d21d
 800d254:	0800d21d 	.word	0x0800d21d
 800d258:	0800d21d 	.word	0x0800d21d
 800d25c:	0800d21d 	.word	0x0800d21d
 800d260:	0800d3a1 	.word	0x0800d3a1
 800d264:	0800d2cb 	.word	0x0800d2cb
 800d268:	0800d35b 	.word	0x0800d35b
 800d26c:	0800d21d 	.word	0x0800d21d
 800d270:	0800d21d 	.word	0x0800d21d
 800d274:	0800d3c3 	.word	0x0800d3c3
 800d278:	0800d21d 	.word	0x0800d21d
 800d27c:	0800d2cb 	.word	0x0800d2cb
 800d280:	0800d21d 	.word	0x0800d21d
 800d284:	0800d21d 	.word	0x0800d21d
 800d288:	0800d363 	.word	0x0800d363
 800d28c:	6833      	ldr	r3, [r6, #0]
 800d28e:	1d1a      	adds	r2, r3, #4
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	6032      	str	r2, [r6, #0]
 800d294:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d298:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d29c:	2301      	movs	r3, #1
 800d29e:	e09d      	b.n	800d3dc <_printf_i+0x1e8>
 800d2a0:	6833      	ldr	r3, [r6, #0]
 800d2a2:	6820      	ldr	r0, [r4, #0]
 800d2a4:	1d19      	adds	r1, r3, #4
 800d2a6:	6031      	str	r1, [r6, #0]
 800d2a8:	0606      	lsls	r6, r0, #24
 800d2aa:	d501      	bpl.n	800d2b0 <_printf_i+0xbc>
 800d2ac:	681d      	ldr	r5, [r3, #0]
 800d2ae:	e003      	b.n	800d2b8 <_printf_i+0xc4>
 800d2b0:	0645      	lsls	r5, r0, #25
 800d2b2:	d5fb      	bpl.n	800d2ac <_printf_i+0xb8>
 800d2b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d2b8:	2d00      	cmp	r5, #0
 800d2ba:	da03      	bge.n	800d2c4 <_printf_i+0xd0>
 800d2bc:	232d      	movs	r3, #45	@ 0x2d
 800d2be:	426d      	negs	r5, r5
 800d2c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d2c4:	4859      	ldr	r0, [pc, #356]	@ (800d42c <_printf_i+0x238>)
 800d2c6:	230a      	movs	r3, #10
 800d2c8:	e011      	b.n	800d2ee <_printf_i+0xfa>
 800d2ca:	6821      	ldr	r1, [r4, #0]
 800d2cc:	6833      	ldr	r3, [r6, #0]
 800d2ce:	0608      	lsls	r0, r1, #24
 800d2d0:	f853 5b04 	ldr.w	r5, [r3], #4
 800d2d4:	d402      	bmi.n	800d2dc <_printf_i+0xe8>
 800d2d6:	0649      	lsls	r1, r1, #25
 800d2d8:	bf48      	it	mi
 800d2da:	b2ad      	uxthmi	r5, r5
 800d2dc:	2f6f      	cmp	r7, #111	@ 0x6f
 800d2de:	4853      	ldr	r0, [pc, #332]	@ (800d42c <_printf_i+0x238>)
 800d2e0:	6033      	str	r3, [r6, #0]
 800d2e2:	bf14      	ite	ne
 800d2e4:	230a      	movne	r3, #10
 800d2e6:	2308      	moveq	r3, #8
 800d2e8:	2100      	movs	r1, #0
 800d2ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d2ee:	6866      	ldr	r6, [r4, #4]
 800d2f0:	60a6      	str	r6, [r4, #8]
 800d2f2:	2e00      	cmp	r6, #0
 800d2f4:	bfa2      	ittt	ge
 800d2f6:	6821      	ldrge	r1, [r4, #0]
 800d2f8:	f021 0104 	bicge.w	r1, r1, #4
 800d2fc:	6021      	strge	r1, [r4, #0]
 800d2fe:	b90d      	cbnz	r5, 800d304 <_printf_i+0x110>
 800d300:	2e00      	cmp	r6, #0
 800d302:	d04b      	beq.n	800d39c <_printf_i+0x1a8>
 800d304:	4616      	mov	r6, r2
 800d306:	fbb5 f1f3 	udiv	r1, r5, r3
 800d30a:	fb03 5711 	mls	r7, r3, r1, r5
 800d30e:	5dc7      	ldrb	r7, [r0, r7]
 800d310:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d314:	462f      	mov	r7, r5
 800d316:	42bb      	cmp	r3, r7
 800d318:	460d      	mov	r5, r1
 800d31a:	d9f4      	bls.n	800d306 <_printf_i+0x112>
 800d31c:	2b08      	cmp	r3, #8
 800d31e:	d10b      	bne.n	800d338 <_printf_i+0x144>
 800d320:	6823      	ldr	r3, [r4, #0]
 800d322:	07df      	lsls	r7, r3, #31
 800d324:	d508      	bpl.n	800d338 <_printf_i+0x144>
 800d326:	6923      	ldr	r3, [r4, #16]
 800d328:	6861      	ldr	r1, [r4, #4]
 800d32a:	4299      	cmp	r1, r3
 800d32c:	bfde      	ittt	le
 800d32e:	2330      	movle	r3, #48	@ 0x30
 800d330:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d334:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d338:	1b92      	subs	r2, r2, r6
 800d33a:	6122      	str	r2, [r4, #16]
 800d33c:	f8cd a000 	str.w	sl, [sp]
 800d340:	464b      	mov	r3, r9
 800d342:	aa03      	add	r2, sp, #12
 800d344:	4621      	mov	r1, r4
 800d346:	4640      	mov	r0, r8
 800d348:	f7ff fee6 	bl	800d118 <_printf_common>
 800d34c:	3001      	adds	r0, #1
 800d34e:	d14a      	bne.n	800d3e6 <_printf_i+0x1f2>
 800d350:	f04f 30ff 	mov.w	r0, #4294967295
 800d354:	b004      	add	sp, #16
 800d356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d35a:	6823      	ldr	r3, [r4, #0]
 800d35c:	f043 0320 	orr.w	r3, r3, #32
 800d360:	6023      	str	r3, [r4, #0]
 800d362:	4833      	ldr	r0, [pc, #204]	@ (800d430 <_printf_i+0x23c>)
 800d364:	2778      	movs	r7, #120	@ 0x78
 800d366:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d36a:	6823      	ldr	r3, [r4, #0]
 800d36c:	6831      	ldr	r1, [r6, #0]
 800d36e:	061f      	lsls	r7, r3, #24
 800d370:	f851 5b04 	ldr.w	r5, [r1], #4
 800d374:	d402      	bmi.n	800d37c <_printf_i+0x188>
 800d376:	065f      	lsls	r7, r3, #25
 800d378:	bf48      	it	mi
 800d37a:	b2ad      	uxthmi	r5, r5
 800d37c:	6031      	str	r1, [r6, #0]
 800d37e:	07d9      	lsls	r1, r3, #31
 800d380:	bf44      	itt	mi
 800d382:	f043 0320 	orrmi.w	r3, r3, #32
 800d386:	6023      	strmi	r3, [r4, #0]
 800d388:	b11d      	cbz	r5, 800d392 <_printf_i+0x19e>
 800d38a:	2310      	movs	r3, #16
 800d38c:	e7ac      	b.n	800d2e8 <_printf_i+0xf4>
 800d38e:	4827      	ldr	r0, [pc, #156]	@ (800d42c <_printf_i+0x238>)
 800d390:	e7e9      	b.n	800d366 <_printf_i+0x172>
 800d392:	6823      	ldr	r3, [r4, #0]
 800d394:	f023 0320 	bic.w	r3, r3, #32
 800d398:	6023      	str	r3, [r4, #0]
 800d39a:	e7f6      	b.n	800d38a <_printf_i+0x196>
 800d39c:	4616      	mov	r6, r2
 800d39e:	e7bd      	b.n	800d31c <_printf_i+0x128>
 800d3a0:	6833      	ldr	r3, [r6, #0]
 800d3a2:	6825      	ldr	r5, [r4, #0]
 800d3a4:	6961      	ldr	r1, [r4, #20]
 800d3a6:	1d18      	adds	r0, r3, #4
 800d3a8:	6030      	str	r0, [r6, #0]
 800d3aa:	062e      	lsls	r6, r5, #24
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	d501      	bpl.n	800d3b4 <_printf_i+0x1c0>
 800d3b0:	6019      	str	r1, [r3, #0]
 800d3b2:	e002      	b.n	800d3ba <_printf_i+0x1c6>
 800d3b4:	0668      	lsls	r0, r5, #25
 800d3b6:	d5fb      	bpl.n	800d3b0 <_printf_i+0x1bc>
 800d3b8:	8019      	strh	r1, [r3, #0]
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	6123      	str	r3, [r4, #16]
 800d3be:	4616      	mov	r6, r2
 800d3c0:	e7bc      	b.n	800d33c <_printf_i+0x148>
 800d3c2:	6833      	ldr	r3, [r6, #0]
 800d3c4:	1d1a      	adds	r2, r3, #4
 800d3c6:	6032      	str	r2, [r6, #0]
 800d3c8:	681e      	ldr	r6, [r3, #0]
 800d3ca:	6862      	ldr	r2, [r4, #4]
 800d3cc:	2100      	movs	r1, #0
 800d3ce:	4630      	mov	r0, r6
 800d3d0:	f7f2 ff1e 	bl	8000210 <memchr>
 800d3d4:	b108      	cbz	r0, 800d3da <_printf_i+0x1e6>
 800d3d6:	1b80      	subs	r0, r0, r6
 800d3d8:	6060      	str	r0, [r4, #4]
 800d3da:	6863      	ldr	r3, [r4, #4]
 800d3dc:	6123      	str	r3, [r4, #16]
 800d3de:	2300      	movs	r3, #0
 800d3e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d3e4:	e7aa      	b.n	800d33c <_printf_i+0x148>
 800d3e6:	6923      	ldr	r3, [r4, #16]
 800d3e8:	4632      	mov	r2, r6
 800d3ea:	4649      	mov	r1, r9
 800d3ec:	4640      	mov	r0, r8
 800d3ee:	47d0      	blx	sl
 800d3f0:	3001      	adds	r0, #1
 800d3f2:	d0ad      	beq.n	800d350 <_printf_i+0x15c>
 800d3f4:	6823      	ldr	r3, [r4, #0]
 800d3f6:	079b      	lsls	r3, r3, #30
 800d3f8:	d413      	bmi.n	800d422 <_printf_i+0x22e>
 800d3fa:	68e0      	ldr	r0, [r4, #12]
 800d3fc:	9b03      	ldr	r3, [sp, #12]
 800d3fe:	4298      	cmp	r0, r3
 800d400:	bfb8      	it	lt
 800d402:	4618      	movlt	r0, r3
 800d404:	e7a6      	b.n	800d354 <_printf_i+0x160>
 800d406:	2301      	movs	r3, #1
 800d408:	4632      	mov	r2, r6
 800d40a:	4649      	mov	r1, r9
 800d40c:	4640      	mov	r0, r8
 800d40e:	47d0      	blx	sl
 800d410:	3001      	adds	r0, #1
 800d412:	d09d      	beq.n	800d350 <_printf_i+0x15c>
 800d414:	3501      	adds	r5, #1
 800d416:	68e3      	ldr	r3, [r4, #12]
 800d418:	9903      	ldr	r1, [sp, #12]
 800d41a:	1a5b      	subs	r3, r3, r1
 800d41c:	42ab      	cmp	r3, r5
 800d41e:	dcf2      	bgt.n	800d406 <_printf_i+0x212>
 800d420:	e7eb      	b.n	800d3fa <_printf_i+0x206>
 800d422:	2500      	movs	r5, #0
 800d424:	f104 0619 	add.w	r6, r4, #25
 800d428:	e7f5      	b.n	800d416 <_printf_i+0x222>
 800d42a:	bf00      	nop
 800d42c:	0800e401 	.word	0x0800e401
 800d430:	0800e412 	.word	0x0800e412

0800d434 <_scanf_chars>:
 800d434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d438:	4615      	mov	r5, r2
 800d43a:	688a      	ldr	r2, [r1, #8]
 800d43c:	4680      	mov	r8, r0
 800d43e:	460c      	mov	r4, r1
 800d440:	b932      	cbnz	r2, 800d450 <_scanf_chars+0x1c>
 800d442:	698a      	ldr	r2, [r1, #24]
 800d444:	2a00      	cmp	r2, #0
 800d446:	bf14      	ite	ne
 800d448:	f04f 32ff 	movne.w	r2, #4294967295
 800d44c:	2201      	moveq	r2, #1
 800d44e:	608a      	str	r2, [r1, #8]
 800d450:	6822      	ldr	r2, [r4, #0]
 800d452:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800d4e4 <_scanf_chars+0xb0>
 800d456:	06d1      	lsls	r1, r2, #27
 800d458:	bf5f      	itttt	pl
 800d45a:	681a      	ldrpl	r2, [r3, #0]
 800d45c:	1d11      	addpl	r1, r2, #4
 800d45e:	6019      	strpl	r1, [r3, #0]
 800d460:	6816      	ldrpl	r6, [r2, #0]
 800d462:	2700      	movs	r7, #0
 800d464:	69a0      	ldr	r0, [r4, #24]
 800d466:	b188      	cbz	r0, 800d48c <_scanf_chars+0x58>
 800d468:	2801      	cmp	r0, #1
 800d46a:	d107      	bne.n	800d47c <_scanf_chars+0x48>
 800d46c:	682b      	ldr	r3, [r5, #0]
 800d46e:	781a      	ldrb	r2, [r3, #0]
 800d470:	6963      	ldr	r3, [r4, #20]
 800d472:	5c9b      	ldrb	r3, [r3, r2]
 800d474:	b953      	cbnz	r3, 800d48c <_scanf_chars+0x58>
 800d476:	2f00      	cmp	r7, #0
 800d478:	d031      	beq.n	800d4de <_scanf_chars+0xaa>
 800d47a:	e022      	b.n	800d4c2 <_scanf_chars+0x8e>
 800d47c:	2802      	cmp	r0, #2
 800d47e:	d120      	bne.n	800d4c2 <_scanf_chars+0x8e>
 800d480:	682b      	ldr	r3, [r5, #0]
 800d482:	781b      	ldrb	r3, [r3, #0]
 800d484:	f819 3003 	ldrb.w	r3, [r9, r3]
 800d488:	071b      	lsls	r3, r3, #28
 800d48a:	d41a      	bmi.n	800d4c2 <_scanf_chars+0x8e>
 800d48c:	6823      	ldr	r3, [r4, #0]
 800d48e:	06da      	lsls	r2, r3, #27
 800d490:	bf5e      	ittt	pl
 800d492:	682b      	ldrpl	r3, [r5, #0]
 800d494:	781b      	ldrbpl	r3, [r3, #0]
 800d496:	f806 3b01 	strbpl.w	r3, [r6], #1
 800d49a:	682a      	ldr	r2, [r5, #0]
 800d49c:	686b      	ldr	r3, [r5, #4]
 800d49e:	3201      	adds	r2, #1
 800d4a0:	602a      	str	r2, [r5, #0]
 800d4a2:	68a2      	ldr	r2, [r4, #8]
 800d4a4:	3b01      	subs	r3, #1
 800d4a6:	3a01      	subs	r2, #1
 800d4a8:	606b      	str	r3, [r5, #4]
 800d4aa:	3701      	adds	r7, #1
 800d4ac:	60a2      	str	r2, [r4, #8]
 800d4ae:	b142      	cbz	r2, 800d4c2 <_scanf_chars+0x8e>
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	dcd7      	bgt.n	800d464 <_scanf_chars+0x30>
 800d4b4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800d4b8:	4629      	mov	r1, r5
 800d4ba:	4640      	mov	r0, r8
 800d4bc:	4798      	blx	r3
 800d4be:	2800      	cmp	r0, #0
 800d4c0:	d0d0      	beq.n	800d464 <_scanf_chars+0x30>
 800d4c2:	6823      	ldr	r3, [r4, #0]
 800d4c4:	f013 0310 	ands.w	r3, r3, #16
 800d4c8:	d105      	bne.n	800d4d6 <_scanf_chars+0xa2>
 800d4ca:	68e2      	ldr	r2, [r4, #12]
 800d4cc:	3201      	adds	r2, #1
 800d4ce:	60e2      	str	r2, [r4, #12]
 800d4d0:	69a2      	ldr	r2, [r4, #24]
 800d4d2:	b102      	cbz	r2, 800d4d6 <_scanf_chars+0xa2>
 800d4d4:	7033      	strb	r3, [r6, #0]
 800d4d6:	6923      	ldr	r3, [r4, #16]
 800d4d8:	443b      	add	r3, r7
 800d4da:	6123      	str	r3, [r4, #16]
 800d4dc:	2000      	movs	r0, #0
 800d4de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d4e2:	bf00      	nop
 800d4e4:	0800e43f 	.word	0x0800e43f

0800d4e8 <_scanf_i>:
 800d4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4ec:	4698      	mov	r8, r3
 800d4ee:	4b74      	ldr	r3, [pc, #464]	@ (800d6c0 <_scanf_i+0x1d8>)
 800d4f0:	460c      	mov	r4, r1
 800d4f2:	4682      	mov	sl, r0
 800d4f4:	4616      	mov	r6, r2
 800d4f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d4fa:	b087      	sub	sp, #28
 800d4fc:	ab03      	add	r3, sp, #12
 800d4fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d502:	4b70      	ldr	r3, [pc, #448]	@ (800d6c4 <_scanf_i+0x1dc>)
 800d504:	69a1      	ldr	r1, [r4, #24]
 800d506:	4a70      	ldr	r2, [pc, #448]	@ (800d6c8 <_scanf_i+0x1e0>)
 800d508:	2903      	cmp	r1, #3
 800d50a:	bf08      	it	eq
 800d50c:	461a      	moveq	r2, r3
 800d50e:	68a3      	ldr	r3, [r4, #8]
 800d510:	9201      	str	r2, [sp, #4]
 800d512:	1e5a      	subs	r2, r3, #1
 800d514:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800d518:	bf88      	it	hi
 800d51a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800d51e:	4627      	mov	r7, r4
 800d520:	bf82      	ittt	hi
 800d522:	eb03 0905 	addhi.w	r9, r3, r5
 800d526:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800d52a:	60a3      	strhi	r3, [r4, #8]
 800d52c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800d530:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800d534:	bf98      	it	ls
 800d536:	f04f 0900 	movls.w	r9, #0
 800d53a:	6023      	str	r3, [r4, #0]
 800d53c:	463d      	mov	r5, r7
 800d53e:	f04f 0b00 	mov.w	fp, #0
 800d542:	6831      	ldr	r1, [r6, #0]
 800d544:	ab03      	add	r3, sp, #12
 800d546:	7809      	ldrb	r1, [r1, #0]
 800d548:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800d54c:	2202      	movs	r2, #2
 800d54e:	f7f2 fe5f 	bl	8000210 <memchr>
 800d552:	b328      	cbz	r0, 800d5a0 <_scanf_i+0xb8>
 800d554:	f1bb 0f01 	cmp.w	fp, #1
 800d558:	d159      	bne.n	800d60e <_scanf_i+0x126>
 800d55a:	6862      	ldr	r2, [r4, #4]
 800d55c:	b92a      	cbnz	r2, 800d56a <_scanf_i+0x82>
 800d55e:	6822      	ldr	r2, [r4, #0]
 800d560:	2108      	movs	r1, #8
 800d562:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d566:	6061      	str	r1, [r4, #4]
 800d568:	6022      	str	r2, [r4, #0]
 800d56a:	6822      	ldr	r2, [r4, #0]
 800d56c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800d570:	6022      	str	r2, [r4, #0]
 800d572:	68a2      	ldr	r2, [r4, #8]
 800d574:	1e51      	subs	r1, r2, #1
 800d576:	60a1      	str	r1, [r4, #8]
 800d578:	b192      	cbz	r2, 800d5a0 <_scanf_i+0xb8>
 800d57a:	6832      	ldr	r2, [r6, #0]
 800d57c:	1c51      	adds	r1, r2, #1
 800d57e:	6031      	str	r1, [r6, #0]
 800d580:	7812      	ldrb	r2, [r2, #0]
 800d582:	f805 2b01 	strb.w	r2, [r5], #1
 800d586:	6872      	ldr	r2, [r6, #4]
 800d588:	3a01      	subs	r2, #1
 800d58a:	2a00      	cmp	r2, #0
 800d58c:	6072      	str	r2, [r6, #4]
 800d58e:	dc07      	bgt.n	800d5a0 <_scanf_i+0xb8>
 800d590:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800d594:	4631      	mov	r1, r6
 800d596:	4650      	mov	r0, sl
 800d598:	4790      	blx	r2
 800d59a:	2800      	cmp	r0, #0
 800d59c:	f040 8085 	bne.w	800d6aa <_scanf_i+0x1c2>
 800d5a0:	f10b 0b01 	add.w	fp, fp, #1
 800d5a4:	f1bb 0f03 	cmp.w	fp, #3
 800d5a8:	d1cb      	bne.n	800d542 <_scanf_i+0x5a>
 800d5aa:	6863      	ldr	r3, [r4, #4]
 800d5ac:	b90b      	cbnz	r3, 800d5b2 <_scanf_i+0xca>
 800d5ae:	230a      	movs	r3, #10
 800d5b0:	6063      	str	r3, [r4, #4]
 800d5b2:	6863      	ldr	r3, [r4, #4]
 800d5b4:	4945      	ldr	r1, [pc, #276]	@ (800d6cc <_scanf_i+0x1e4>)
 800d5b6:	6960      	ldr	r0, [r4, #20]
 800d5b8:	1ac9      	subs	r1, r1, r3
 800d5ba:	f000 f889 	bl	800d6d0 <__sccl>
 800d5be:	f04f 0b00 	mov.w	fp, #0
 800d5c2:	68a3      	ldr	r3, [r4, #8]
 800d5c4:	6822      	ldr	r2, [r4, #0]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d03d      	beq.n	800d646 <_scanf_i+0x15e>
 800d5ca:	6831      	ldr	r1, [r6, #0]
 800d5cc:	6960      	ldr	r0, [r4, #20]
 800d5ce:	f891 c000 	ldrb.w	ip, [r1]
 800d5d2:	f810 000c 	ldrb.w	r0, [r0, ip]
 800d5d6:	2800      	cmp	r0, #0
 800d5d8:	d035      	beq.n	800d646 <_scanf_i+0x15e>
 800d5da:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800d5de:	d124      	bne.n	800d62a <_scanf_i+0x142>
 800d5e0:	0510      	lsls	r0, r2, #20
 800d5e2:	d522      	bpl.n	800d62a <_scanf_i+0x142>
 800d5e4:	f10b 0b01 	add.w	fp, fp, #1
 800d5e8:	f1b9 0f00 	cmp.w	r9, #0
 800d5ec:	d003      	beq.n	800d5f6 <_scanf_i+0x10e>
 800d5ee:	3301      	adds	r3, #1
 800d5f0:	f109 39ff 	add.w	r9, r9, #4294967295
 800d5f4:	60a3      	str	r3, [r4, #8]
 800d5f6:	6873      	ldr	r3, [r6, #4]
 800d5f8:	3b01      	subs	r3, #1
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	6073      	str	r3, [r6, #4]
 800d5fe:	dd1b      	ble.n	800d638 <_scanf_i+0x150>
 800d600:	6833      	ldr	r3, [r6, #0]
 800d602:	3301      	adds	r3, #1
 800d604:	6033      	str	r3, [r6, #0]
 800d606:	68a3      	ldr	r3, [r4, #8]
 800d608:	3b01      	subs	r3, #1
 800d60a:	60a3      	str	r3, [r4, #8]
 800d60c:	e7d9      	b.n	800d5c2 <_scanf_i+0xda>
 800d60e:	f1bb 0f02 	cmp.w	fp, #2
 800d612:	d1ae      	bne.n	800d572 <_scanf_i+0x8a>
 800d614:	6822      	ldr	r2, [r4, #0]
 800d616:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800d61a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800d61e:	d1bf      	bne.n	800d5a0 <_scanf_i+0xb8>
 800d620:	2110      	movs	r1, #16
 800d622:	6061      	str	r1, [r4, #4]
 800d624:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d628:	e7a2      	b.n	800d570 <_scanf_i+0x88>
 800d62a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800d62e:	6022      	str	r2, [r4, #0]
 800d630:	780b      	ldrb	r3, [r1, #0]
 800d632:	f805 3b01 	strb.w	r3, [r5], #1
 800d636:	e7de      	b.n	800d5f6 <_scanf_i+0x10e>
 800d638:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800d63c:	4631      	mov	r1, r6
 800d63e:	4650      	mov	r0, sl
 800d640:	4798      	blx	r3
 800d642:	2800      	cmp	r0, #0
 800d644:	d0df      	beq.n	800d606 <_scanf_i+0x11e>
 800d646:	6823      	ldr	r3, [r4, #0]
 800d648:	05d9      	lsls	r1, r3, #23
 800d64a:	d50d      	bpl.n	800d668 <_scanf_i+0x180>
 800d64c:	42bd      	cmp	r5, r7
 800d64e:	d909      	bls.n	800d664 <_scanf_i+0x17c>
 800d650:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800d654:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d658:	4632      	mov	r2, r6
 800d65a:	4650      	mov	r0, sl
 800d65c:	4798      	blx	r3
 800d65e:	f105 39ff 	add.w	r9, r5, #4294967295
 800d662:	464d      	mov	r5, r9
 800d664:	42bd      	cmp	r5, r7
 800d666:	d028      	beq.n	800d6ba <_scanf_i+0x1d2>
 800d668:	6822      	ldr	r2, [r4, #0]
 800d66a:	f012 0210 	ands.w	r2, r2, #16
 800d66e:	d113      	bne.n	800d698 <_scanf_i+0x1b0>
 800d670:	702a      	strb	r2, [r5, #0]
 800d672:	6863      	ldr	r3, [r4, #4]
 800d674:	9e01      	ldr	r6, [sp, #4]
 800d676:	4639      	mov	r1, r7
 800d678:	4650      	mov	r0, sl
 800d67a:	47b0      	blx	r6
 800d67c:	f8d8 3000 	ldr.w	r3, [r8]
 800d680:	6821      	ldr	r1, [r4, #0]
 800d682:	1d1a      	adds	r2, r3, #4
 800d684:	f8c8 2000 	str.w	r2, [r8]
 800d688:	f011 0f20 	tst.w	r1, #32
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	d00f      	beq.n	800d6b0 <_scanf_i+0x1c8>
 800d690:	6018      	str	r0, [r3, #0]
 800d692:	68e3      	ldr	r3, [r4, #12]
 800d694:	3301      	adds	r3, #1
 800d696:	60e3      	str	r3, [r4, #12]
 800d698:	6923      	ldr	r3, [r4, #16]
 800d69a:	1bed      	subs	r5, r5, r7
 800d69c:	445d      	add	r5, fp
 800d69e:	442b      	add	r3, r5
 800d6a0:	6123      	str	r3, [r4, #16]
 800d6a2:	2000      	movs	r0, #0
 800d6a4:	b007      	add	sp, #28
 800d6a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6aa:	f04f 0b00 	mov.w	fp, #0
 800d6ae:	e7ca      	b.n	800d646 <_scanf_i+0x15e>
 800d6b0:	07ca      	lsls	r2, r1, #31
 800d6b2:	bf4c      	ite	mi
 800d6b4:	8018      	strhmi	r0, [r3, #0]
 800d6b6:	6018      	strpl	r0, [r3, #0]
 800d6b8:	e7eb      	b.n	800d692 <_scanf_i+0x1aa>
 800d6ba:	2001      	movs	r0, #1
 800d6bc:	e7f2      	b.n	800d6a4 <_scanf_i+0x1bc>
 800d6be:	bf00      	nop
 800d6c0:	0800dbe8 	.word	0x0800dbe8
 800d6c4:	0800d95d 	.word	0x0800d95d
 800d6c8:	0800da3d 	.word	0x0800da3d
 800d6cc:	0800e433 	.word	0x0800e433

0800d6d0 <__sccl>:
 800d6d0:	b570      	push	{r4, r5, r6, lr}
 800d6d2:	780b      	ldrb	r3, [r1, #0]
 800d6d4:	4604      	mov	r4, r0
 800d6d6:	2b5e      	cmp	r3, #94	@ 0x5e
 800d6d8:	bf0b      	itete	eq
 800d6da:	784b      	ldrbeq	r3, [r1, #1]
 800d6dc:	1c4a      	addne	r2, r1, #1
 800d6de:	1c8a      	addeq	r2, r1, #2
 800d6e0:	2100      	movne	r1, #0
 800d6e2:	bf08      	it	eq
 800d6e4:	2101      	moveq	r1, #1
 800d6e6:	3801      	subs	r0, #1
 800d6e8:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800d6ec:	f800 1f01 	strb.w	r1, [r0, #1]!
 800d6f0:	42a8      	cmp	r0, r5
 800d6f2:	d1fb      	bne.n	800d6ec <__sccl+0x1c>
 800d6f4:	b90b      	cbnz	r3, 800d6fa <__sccl+0x2a>
 800d6f6:	1e50      	subs	r0, r2, #1
 800d6f8:	bd70      	pop	{r4, r5, r6, pc}
 800d6fa:	f081 0101 	eor.w	r1, r1, #1
 800d6fe:	54e1      	strb	r1, [r4, r3]
 800d700:	4610      	mov	r0, r2
 800d702:	4602      	mov	r2, r0
 800d704:	f812 5b01 	ldrb.w	r5, [r2], #1
 800d708:	2d2d      	cmp	r5, #45	@ 0x2d
 800d70a:	d005      	beq.n	800d718 <__sccl+0x48>
 800d70c:	2d5d      	cmp	r5, #93	@ 0x5d
 800d70e:	d016      	beq.n	800d73e <__sccl+0x6e>
 800d710:	2d00      	cmp	r5, #0
 800d712:	d0f1      	beq.n	800d6f8 <__sccl+0x28>
 800d714:	462b      	mov	r3, r5
 800d716:	e7f2      	b.n	800d6fe <__sccl+0x2e>
 800d718:	7846      	ldrb	r6, [r0, #1]
 800d71a:	2e5d      	cmp	r6, #93	@ 0x5d
 800d71c:	d0fa      	beq.n	800d714 <__sccl+0x44>
 800d71e:	42b3      	cmp	r3, r6
 800d720:	dcf8      	bgt.n	800d714 <__sccl+0x44>
 800d722:	3002      	adds	r0, #2
 800d724:	461a      	mov	r2, r3
 800d726:	3201      	adds	r2, #1
 800d728:	4296      	cmp	r6, r2
 800d72a:	54a1      	strb	r1, [r4, r2]
 800d72c:	dcfb      	bgt.n	800d726 <__sccl+0x56>
 800d72e:	1af2      	subs	r2, r6, r3
 800d730:	3a01      	subs	r2, #1
 800d732:	1c5d      	adds	r5, r3, #1
 800d734:	42b3      	cmp	r3, r6
 800d736:	bfa8      	it	ge
 800d738:	2200      	movge	r2, #0
 800d73a:	18ab      	adds	r3, r5, r2
 800d73c:	e7e1      	b.n	800d702 <__sccl+0x32>
 800d73e:	4610      	mov	r0, r2
 800d740:	e7da      	b.n	800d6f8 <__sccl+0x28>

0800d742 <__submore>:
 800d742:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d746:	460c      	mov	r4, r1
 800d748:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800d74a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d74e:	4299      	cmp	r1, r3
 800d750:	d11d      	bne.n	800d78e <__submore+0x4c>
 800d752:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800d756:	f7ff f92f 	bl	800c9b8 <_malloc_r>
 800d75a:	b918      	cbnz	r0, 800d764 <__submore+0x22>
 800d75c:	f04f 30ff 	mov.w	r0, #4294967295
 800d760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d764:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d768:	63a3      	str	r3, [r4, #56]	@ 0x38
 800d76a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800d76e:	6360      	str	r0, [r4, #52]	@ 0x34
 800d770:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800d774:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800d778:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800d77c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800d780:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800d784:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800d788:	6020      	str	r0, [r4, #0]
 800d78a:	2000      	movs	r0, #0
 800d78c:	e7e8      	b.n	800d760 <__submore+0x1e>
 800d78e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800d790:	0077      	lsls	r7, r6, #1
 800d792:	463a      	mov	r2, r7
 800d794:	f000 f83a 	bl	800d80c <_realloc_r>
 800d798:	4605      	mov	r5, r0
 800d79a:	2800      	cmp	r0, #0
 800d79c:	d0de      	beq.n	800d75c <__submore+0x1a>
 800d79e:	eb00 0806 	add.w	r8, r0, r6
 800d7a2:	4601      	mov	r1, r0
 800d7a4:	4632      	mov	r2, r6
 800d7a6:	4640      	mov	r0, r8
 800d7a8:	f7ff f88c 	bl	800c8c4 <memcpy>
 800d7ac:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800d7b0:	f8c4 8000 	str.w	r8, [r4]
 800d7b4:	e7e9      	b.n	800d78a <__submore+0x48>

0800d7b6 <memmove>:
 800d7b6:	4288      	cmp	r0, r1
 800d7b8:	b510      	push	{r4, lr}
 800d7ba:	eb01 0402 	add.w	r4, r1, r2
 800d7be:	d902      	bls.n	800d7c6 <memmove+0x10>
 800d7c0:	4284      	cmp	r4, r0
 800d7c2:	4623      	mov	r3, r4
 800d7c4:	d807      	bhi.n	800d7d6 <memmove+0x20>
 800d7c6:	1e43      	subs	r3, r0, #1
 800d7c8:	42a1      	cmp	r1, r4
 800d7ca:	d008      	beq.n	800d7de <memmove+0x28>
 800d7cc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d7d0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d7d4:	e7f8      	b.n	800d7c8 <memmove+0x12>
 800d7d6:	4402      	add	r2, r0
 800d7d8:	4601      	mov	r1, r0
 800d7da:	428a      	cmp	r2, r1
 800d7dc:	d100      	bne.n	800d7e0 <memmove+0x2a>
 800d7de:	bd10      	pop	{r4, pc}
 800d7e0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d7e4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d7e8:	e7f7      	b.n	800d7da <memmove+0x24>
	...

0800d7ec <_sbrk_r>:
 800d7ec:	b538      	push	{r3, r4, r5, lr}
 800d7ee:	4d06      	ldr	r5, [pc, #24]	@ (800d808 <_sbrk_r+0x1c>)
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	4604      	mov	r4, r0
 800d7f4:	4608      	mov	r0, r1
 800d7f6:	602b      	str	r3, [r5, #0]
 800d7f8:	f7f3 fe3e 	bl	8001478 <_sbrk>
 800d7fc:	1c43      	adds	r3, r0, #1
 800d7fe:	d102      	bne.n	800d806 <_sbrk_r+0x1a>
 800d800:	682b      	ldr	r3, [r5, #0]
 800d802:	b103      	cbz	r3, 800d806 <_sbrk_r+0x1a>
 800d804:	6023      	str	r3, [r4, #0]
 800d806:	bd38      	pop	{r3, r4, r5, pc}
 800d808:	20006bf8 	.word	0x20006bf8

0800d80c <_realloc_r>:
 800d80c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d810:	4680      	mov	r8, r0
 800d812:	4615      	mov	r5, r2
 800d814:	460c      	mov	r4, r1
 800d816:	b921      	cbnz	r1, 800d822 <_realloc_r+0x16>
 800d818:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d81c:	4611      	mov	r1, r2
 800d81e:	f7ff b8cb 	b.w	800c9b8 <_malloc_r>
 800d822:	b92a      	cbnz	r2, 800d830 <_realloc_r+0x24>
 800d824:	f7ff f85c 	bl	800c8e0 <_free_r>
 800d828:	2400      	movs	r4, #0
 800d82a:	4620      	mov	r0, r4
 800d82c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d830:	f000 f906 	bl	800da40 <_malloc_usable_size_r>
 800d834:	4285      	cmp	r5, r0
 800d836:	4606      	mov	r6, r0
 800d838:	d802      	bhi.n	800d840 <_realloc_r+0x34>
 800d83a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d83e:	d8f4      	bhi.n	800d82a <_realloc_r+0x1e>
 800d840:	4629      	mov	r1, r5
 800d842:	4640      	mov	r0, r8
 800d844:	f7ff f8b8 	bl	800c9b8 <_malloc_r>
 800d848:	4607      	mov	r7, r0
 800d84a:	2800      	cmp	r0, #0
 800d84c:	d0ec      	beq.n	800d828 <_realloc_r+0x1c>
 800d84e:	42b5      	cmp	r5, r6
 800d850:	462a      	mov	r2, r5
 800d852:	4621      	mov	r1, r4
 800d854:	bf28      	it	cs
 800d856:	4632      	movcs	r2, r6
 800d858:	f7ff f834 	bl	800c8c4 <memcpy>
 800d85c:	4621      	mov	r1, r4
 800d85e:	4640      	mov	r0, r8
 800d860:	f7ff f83e 	bl	800c8e0 <_free_r>
 800d864:	463c      	mov	r4, r7
 800d866:	e7e0      	b.n	800d82a <_realloc_r+0x1e>

0800d868 <_strtol_l.constprop.0>:
 800d868:	2b24      	cmp	r3, #36	@ 0x24
 800d86a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d86e:	4686      	mov	lr, r0
 800d870:	4690      	mov	r8, r2
 800d872:	d801      	bhi.n	800d878 <_strtol_l.constprop.0+0x10>
 800d874:	2b01      	cmp	r3, #1
 800d876:	d106      	bne.n	800d886 <_strtol_l.constprop.0+0x1e>
 800d878:	f7fe fff0 	bl	800c85c <__errno>
 800d87c:	2316      	movs	r3, #22
 800d87e:	6003      	str	r3, [r0, #0]
 800d880:	2000      	movs	r0, #0
 800d882:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d886:	4834      	ldr	r0, [pc, #208]	@ (800d958 <_strtol_l.constprop.0+0xf0>)
 800d888:	460d      	mov	r5, r1
 800d88a:	462a      	mov	r2, r5
 800d88c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d890:	5d06      	ldrb	r6, [r0, r4]
 800d892:	f016 0608 	ands.w	r6, r6, #8
 800d896:	d1f8      	bne.n	800d88a <_strtol_l.constprop.0+0x22>
 800d898:	2c2d      	cmp	r4, #45	@ 0x2d
 800d89a:	d12d      	bne.n	800d8f8 <_strtol_l.constprop.0+0x90>
 800d89c:	782c      	ldrb	r4, [r5, #0]
 800d89e:	2601      	movs	r6, #1
 800d8a0:	1c95      	adds	r5, r2, #2
 800d8a2:	f033 0210 	bics.w	r2, r3, #16
 800d8a6:	d109      	bne.n	800d8bc <_strtol_l.constprop.0+0x54>
 800d8a8:	2c30      	cmp	r4, #48	@ 0x30
 800d8aa:	d12a      	bne.n	800d902 <_strtol_l.constprop.0+0x9a>
 800d8ac:	782a      	ldrb	r2, [r5, #0]
 800d8ae:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d8b2:	2a58      	cmp	r2, #88	@ 0x58
 800d8b4:	d125      	bne.n	800d902 <_strtol_l.constprop.0+0x9a>
 800d8b6:	786c      	ldrb	r4, [r5, #1]
 800d8b8:	2310      	movs	r3, #16
 800d8ba:	3502      	adds	r5, #2
 800d8bc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d8c0:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	fbbc f9f3 	udiv	r9, ip, r3
 800d8ca:	4610      	mov	r0, r2
 800d8cc:	fb03 ca19 	mls	sl, r3, r9, ip
 800d8d0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d8d4:	2f09      	cmp	r7, #9
 800d8d6:	d81b      	bhi.n	800d910 <_strtol_l.constprop.0+0xa8>
 800d8d8:	463c      	mov	r4, r7
 800d8da:	42a3      	cmp	r3, r4
 800d8dc:	dd27      	ble.n	800d92e <_strtol_l.constprop.0+0xc6>
 800d8de:	1c57      	adds	r7, r2, #1
 800d8e0:	d007      	beq.n	800d8f2 <_strtol_l.constprop.0+0x8a>
 800d8e2:	4581      	cmp	r9, r0
 800d8e4:	d320      	bcc.n	800d928 <_strtol_l.constprop.0+0xc0>
 800d8e6:	d101      	bne.n	800d8ec <_strtol_l.constprop.0+0x84>
 800d8e8:	45a2      	cmp	sl, r4
 800d8ea:	db1d      	blt.n	800d928 <_strtol_l.constprop.0+0xc0>
 800d8ec:	fb00 4003 	mla	r0, r0, r3, r4
 800d8f0:	2201      	movs	r2, #1
 800d8f2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d8f6:	e7eb      	b.n	800d8d0 <_strtol_l.constprop.0+0x68>
 800d8f8:	2c2b      	cmp	r4, #43	@ 0x2b
 800d8fa:	bf04      	itt	eq
 800d8fc:	782c      	ldrbeq	r4, [r5, #0]
 800d8fe:	1c95      	addeq	r5, r2, #2
 800d900:	e7cf      	b.n	800d8a2 <_strtol_l.constprop.0+0x3a>
 800d902:	2b00      	cmp	r3, #0
 800d904:	d1da      	bne.n	800d8bc <_strtol_l.constprop.0+0x54>
 800d906:	2c30      	cmp	r4, #48	@ 0x30
 800d908:	bf0c      	ite	eq
 800d90a:	2308      	moveq	r3, #8
 800d90c:	230a      	movne	r3, #10
 800d90e:	e7d5      	b.n	800d8bc <_strtol_l.constprop.0+0x54>
 800d910:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d914:	2f19      	cmp	r7, #25
 800d916:	d801      	bhi.n	800d91c <_strtol_l.constprop.0+0xb4>
 800d918:	3c37      	subs	r4, #55	@ 0x37
 800d91a:	e7de      	b.n	800d8da <_strtol_l.constprop.0+0x72>
 800d91c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d920:	2f19      	cmp	r7, #25
 800d922:	d804      	bhi.n	800d92e <_strtol_l.constprop.0+0xc6>
 800d924:	3c57      	subs	r4, #87	@ 0x57
 800d926:	e7d8      	b.n	800d8da <_strtol_l.constprop.0+0x72>
 800d928:	f04f 32ff 	mov.w	r2, #4294967295
 800d92c:	e7e1      	b.n	800d8f2 <_strtol_l.constprop.0+0x8a>
 800d92e:	1c53      	adds	r3, r2, #1
 800d930:	d108      	bne.n	800d944 <_strtol_l.constprop.0+0xdc>
 800d932:	2322      	movs	r3, #34	@ 0x22
 800d934:	f8ce 3000 	str.w	r3, [lr]
 800d938:	4660      	mov	r0, ip
 800d93a:	f1b8 0f00 	cmp.w	r8, #0
 800d93e:	d0a0      	beq.n	800d882 <_strtol_l.constprop.0+0x1a>
 800d940:	1e69      	subs	r1, r5, #1
 800d942:	e006      	b.n	800d952 <_strtol_l.constprop.0+0xea>
 800d944:	b106      	cbz	r6, 800d948 <_strtol_l.constprop.0+0xe0>
 800d946:	4240      	negs	r0, r0
 800d948:	f1b8 0f00 	cmp.w	r8, #0
 800d94c:	d099      	beq.n	800d882 <_strtol_l.constprop.0+0x1a>
 800d94e:	2a00      	cmp	r2, #0
 800d950:	d1f6      	bne.n	800d940 <_strtol_l.constprop.0+0xd8>
 800d952:	f8c8 1000 	str.w	r1, [r8]
 800d956:	e794      	b.n	800d882 <_strtol_l.constprop.0+0x1a>
 800d958:	0800e43f 	.word	0x0800e43f

0800d95c <_strtol_r>:
 800d95c:	f7ff bf84 	b.w	800d868 <_strtol_l.constprop.0>

0800d960 <_strtoul_l.constprop.0>:
 800d960:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d964:	4e34      	ldr	r6, [pc, #208]	@ (800da38 <_strtoul_l.constprop.0+0xd8>)
 800d966:	4686      	mov	lr, r0
 800d968:	460d      	mov	r5, r1
 800d96a:	4628      	mov	r0, r5
 800d96c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d970:	5d37      	ldrb	r7, [r6, r4]
 800d972:	f017 0708 	ands.w	r7, r7, #8
 800d976:	d1f8      	bne.n	800d96a <_strtoul_l.constprop.0+0xa>
 800d978:	2c2d      	cmp	r4, #45	@ 0x2d
 800d97a:	d12f      	bne.n	800d9dc <_strtoul_l.constprop.0+0x7c>
 800d97c:	782c      	ldrb	r4, [r5, #0]
 800d97e:	2701      	movs	r7, #1
 800d980:	1c85      	adds	r5, r0, #2
 800d982:	f033 0010 	bics.w	r0, r3, #16
 800d986:	d109      	bne.n	800d99c <_strtoul_l.constprop.0+0x3c>
 800d988:	2c30      	cmp	r4, #48	@ 0x30
 800d98a:	d12c      	bne.n	800d9e6 <_strtoul_l.constprop.0+0x86>
 800d98c:	7828      	ldrb	r0, [r5, #0]
 800d98e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800d992:	2858      	cmp	r0, #88	@ 0x58
 800d994:	d127      	bne.n	800d9e6 <_strtoul_l.constprop.0+0x86>
 800d996:	786c      	ldrb	r4, [r5, #1]
 800d998:	2310      	movs	r3, #16
 800d99a:	3502      	adds	r5, #2
 800d99c:	f04f 38ff 	mov.w	r8, #4294967295
 800d9a0:	2600      	movs	r6, #0
 800d9a2:	fbb8 f8f3 	udiv	r8, r8, r3
 800d9a6:	fb03 f908 	mul.w	r9, r3, r8
 800d9aa:	ea6f 0909 	mvn.w	r9, r9
 800d9ae:	4630      	mov	r0, r6
 800d9b0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800d9b4:	f1bc 0f09 	cmp.w	ip, #9
 800d9b8:	d81c      	bhi.n	800d9f4 <_strtoul_l.constprop.0+0x94>
 800d9ba:	4664      	mov	r4, ip
 800d9bc:	42a3      	cmp	r3, r4
 800d9be:	dd2a      	ble.n	800da16 <_strtoul_l.constprop.0+0xb6>
 800d9c0:	f1b6 3fff 	cmp.w	r6, #4294967295
 800d9c4:	d007      	beq.n	800d9d6 <_strtoul_l.constprop.0+0x76>
 800d9c6:	4580      	cmp	r8, r0
 800d9c8:	d322      	bcc.n	800da10 <_strtoul_l.constprop.0+0xb0>
 800d9ca:	d101      	bne.n	800d9d0 <_strtoul_l.constprop.0+0x70>
 800d9cc:	45a1      	cmp	r9, r4
 800d9ce:	db1f      	blt.n	800da10 <_strtoul_l.constprop.0+0xb0>
 800d9d0:	fb00 4003 	mla	r0, r0, r3, r4
 800d9d4:	2601      	movs	r6, #1
 800d9d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d9da:	e7e9      	b.n	800d9b0 <_strtoul_l.constprop.0+0x50>
 800d9dc:	2c2b      	cmp	r4, #43	@ 0x2b
 800d9de:	bf04      	itt	eq
 800d9e0:	782c      	ldrbeq	r4, [r5, #0]
 800d9e2:	1c85      	addeq	r5, r0, #2
 800d9e4:	e7cd      	b.n	800d982 <_strtoul_l.constprop.0+0x22>
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d1d8      	bne.n	800d99c <_strtoul_l.constprop.0+0x3c>
 800d9ea:	2c30      	cmp	r4, #48	@ 0x30
 800d9ec:	bf0c      	ite	eq
 800d9ee:	2308      	moveq	r3, #8
 800d9f0:	230a      	movne	r3, #10
 800d9f2:	e7d3      	b.n	800d99c <_strtoul_l.constprop.0+0x3c>
 800d9f4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800d9f8:	f1bc 0f19 	cmp.w	ip, #25
 800d9fc:	d801      	bhi.n	800da02 <_strtoul_l.constprop.0+0xa2>
 800d9fe:	3c37      	subs	r4, #55	@ 0x37
 800da00:	e7dc      	b.n	800d9bc <_strtoul_l.constprop.0+0x5c>
 800da02:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800da06:	f1bc 0f19 	cmp.w	ip, #25
 800da0a:	d804      	bhi.n	800da16 <_strtoul_l.constprop.0+0xb6>
 800da0c:	3c57      	subs	r4, #87	@ 0x57
 800da0e:	e7d5      	b.n	800d9bc <_strtoul_l.constprop.0+0x5c>
 800da10:	f04f 36ff 	mov.w	r6, #4294967295
 800da14:	e7df      	b.n	800d9d6 <_strtoul_l.constprop.0+0x76>
 800da16:	1c73      	adds	r3, r6, #1
 800da18:	d106      	bne.n	800da28 <_strtoul_l.constprop.0+0xc8>
 800da1a:	2322      	movs	r3, #34	@ 0x22
 800da1c:	f8ce 3000 	str.w	r3, [lr]
 800da20:	4630      	mov	r0, r6
 800da22:	b932      	cbnz	r2, 800da32 <_strtoul_l.constprop.0+0xd2>
 800da24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da28:	b107      	cbz	r7, 800da2c <_strtoul_l.constprop.0+0xcc>
 800da2a:	4240      	negs	r0, r0
 800da2c:	2a00      	cmp	r2, #0
 800da2e:	d0f9      	beq.n	800da24 <_strtoul_l.constprop.0+0xc4>
 800da30:	b106      	cbz	r6, 800da34 <_strtoul_l.constprop.0+0xd4>
 800da32:	1e69      	subs	r1, r5, #1
 800da34:	6011      	str	r1, [r2, #0]
 800da36:	e7f5      	b.n	800da24 <_strtoul_l.constprop.0+0xc4>
 800da38:	0800e43f 	.word	0x0800e43f

0800da3c <_strtoul_r>:
 800da3c:	f7ff bf90 	b.w	800d960 <_strtoul_l.constprop.0>

0800da40 <_malloc_usable_size_r>:
 800da40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da44:	1f18      	subs	r0, r3, #4
 800da46:	2b00      	cmp	r3, #0
 800da48:	bfbc      	itt	lt
 800da4a:	580b      	ldrlt	r3, [r1, r0]
 800da4c:	18c0      	addlt	r0, r0, r3
 800da4e:	4770      	bx	lr

0800da50 <_init>:
 800da50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da52:	bf00      	nop
 800da54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da56:	bc08      	pop	{r3}
 800da58:	469e      	mov	lr, r3
 800da5a:	4770      	bx	lr

0800da5c <_fini>:
 800da5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da5e:	bf00      	nop
 800da60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da62:	bc08      	pop	{r3}
 800da64:	469e      	mov	lr, r3
 800da66:	4770      	bx	lr
